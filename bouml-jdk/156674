format 222
"management" // jdk1.8::javax::management
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/management/"
  java_package "javax.management"
  classview 151810 "management"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 485122 "MBeanServer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>This is the interface for MBean manipulation on the agent
side. It contains the methods necessary for the creation,
registration, and deletion of MBeans as well as the access methods
for registered MBeans.  This is the core component of the JMX
infrastructure.</p>

<p>User code does not usually implement this interface.  Instead,
an object that implements this interface is obtained with one of
the methods in the {@link javax.management.MBeanServerFactory} class.</p>

<p>Every MBean which is added to the MBean server becomes
manageable: its attributes and operations become remotely
accessible through the connectors/adaptors connected to that MBean
server.  A Java object cannot be registered in the MBean server
unless it is a JMX compliant MBean.</p>

<p id=\"notif\">When an MBean is registered or unregistered in the
MBean server a {@link javax.management.MBeanServerNotification
MBeanServerNotification} Notification is emitted. To register an
object as listener to MBeanServerNotifications you should call the
MBean server method {@link #addNotificationListener
addNotificationListener} with <CODE>ObjectName</CODE> the
<CODE>ObjectName</CODE> of the {@link
javax.management.MBeanServerDelegate MBeanServerDelegate}.  This
<CODE>ObjectName</CODE> is: <BR>
<CODE>JMImplementation:type=MBeanServerDelegate</CODE>.</p>

<p>An object obtained from the {@link
MBeanServerFactory#createMBeanServer(String) createMBeanServer} or
{@link MBeanServerFactory#newMBeanServer(String) newMBeanServer}
methods of the {@link MBeanServerFactory} class applies security
checks to its methods, as follows.</p>

<p>First, if there is no security manager ({@link
System#getSecurityManager()} is null), then an implementation of
this interface is free not to make any checks.</p>

<p>Assuming that there is a security manager, or that the
implementation chooses to make checks anyway, the checks are made
as detailed below.  In what follows, and unless otherwise specified,
{@code className} is the
string returned by {@link MBeanInfo#getClassName()} for the target
MBean.</p>

<p>If a security check fails, the method throws {@link
SecurityException}.</p>

<p>For methods that can throw {@link InstanceNotFoundException},
this exception is thrown for a non-existent MBean, regardless of
permissions.  This is because a non-existent MBean has no
<code>className</code>.</p>

<ul>

<li><p>For the {@link #invoke invoke} method, the caller's
permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, operationName, name, \"invoke\")}.</p>

<li><p>For the {@link #getAttribute getAttribute} method, the
caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, attribute, name, \"getAttribute\")}.</p>

<li><p>For the {@link #getAttributes getAttributes} method, the
caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, name, \"getAttribute\")}.
Additionally, for each attribute <em>a</em> in the {@link
AttributeList}, if the caller's permissions do not imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, <em>a</em>, name, \"getAttribute\")}, the
MBean server will behave as if that attribute had not been in the
supplied list.</p>

<li><p>For the {@link #setAttribute setAttribute} method, the
caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, attrName, name, \"setAttribute\")}, where
<code>attrName</code> is {@link Attribute#getName()
attribute.getName()}.</p>

<li><p>For the {@link #setAttributes setAttributes} method, the
caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, name, \"setAttribute\")}.
Additionally, for each attribute <em>a</em> in the {@link
AttributeList}, if the caller's permissions do not imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, <em>a</em>, name, \"setAttribute\")}, the
MBean server will behave as if that attribute had not been in the
supplied list.</p>

<li><p>For the <code>addNotificationListener</code> methods,
the caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, name,
\"addNotificationListener\")}.</p>

<li><p>For the <code>removeNotificationListener</code> methods,
the caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, name,
\"removeNotificationListener\")}.</p>

<li><p>For the {@link #getMBeanInfo getMBeanInfo} method, the
caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, name, \"getMBeanInfo\")}.</p>

<li><p>For the {@link #getObjectInstance getObjectInstance} method,
the caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, name, \"getObjectInstance\")}.</p>

<li><p>For the {@link #isInstanceOf isInstanceOf} method, the
caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, name, \"isInstanceOf\")}.</p>

<li><p>For the {@link #queryMBeans queryMBeans} method, the
caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(null, null, null, \"queryMBeans\")}.
Additionally, for each MBean <em>n</em> that matches <code>name</code>,
if the caller's permissions do not imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, <em>n</em>, \"queryMBeans\")}, the
MBean server will behave as if that MBean did not exist.</p>

<p>Certain query elements perform operations on the MBean server.
If the caller does not have the required permissions for a given
MBean, that MBean will not be included in the result of the query.
The standard query elements that are affected are {@link
Query#attr(String)}, {@link Query#attr(String,String)}, and {@link
Query#classattr()}.</p>

<li><p>For the {@link #queryNames queryNames} method, the checks
are the same as for <code>queryMBeans</code> except that
<code>\"queryNames\"</code> is used instead of
<code>\"queryMBeans\"</code> in the <code>MBeanPermission</code>
objects.  Note that a <code>\"queryMBeans\"</code> permission implies
the corresponding <code>\"queryNames\"</code> permission.</p>

<li><p>For the {@link #getDomains getDomains} method, the caller's
permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(null, null, null, \"getDomains\")}.  Additionally,
for each domain <var>d</var> in the returned array, if the caller's
permissions do not imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(null, null, new ObjectName(\"<var>d</var>:x=x\"),
\"getDomains\")}, the domain is eliminated from the array.  Here,
<code>x=x</code> is any <var>key=value</var> pair, needed to
satisfy ObjectName's constructor but not otherwise relevant.</p>

<li><p>For the {@link #getClassLoader getClassLoader} method, the
caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, loaderName,
\"getClassLoader\")}.</p>

<li><p>For the {@link #getClassLoaderFor getClassLoaderFor} method,
the caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, mbeanName,
\"getClassLoaderFor\")}.</p>

<li><p>For the {@link #getClassLoaderRepository
getClassLoaderRepository} method, the caller's permissions must
imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(null, null, null, \"getClassLoaderRepository\")}.</p>

<li><p>For the deprecated <code>deserialize</code> methods, the
required permissions are the same as for the methods that replace
them.</p>

<li><p>For the <code>instantiate</code> methods, the caller's
permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, null, \"instantiate\")},
where {@code className} is the name of the class which is to
be instantiated.</p>

<li><p>For the {@link #registerMBean registerMBean} method, the
caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, name, \"registerMBean\")}.

<p>If the <code>MBeanPermission</code> check succeeds, the MBean's
class is validated by checking that its {@link
java.security.ProtectionDomain ProtectionDomain} implies {@link
MBeanTrustPermission#MBeanTrustPermission(String)
MBeanTrustPermission(\"register\")}.</p>

<p>Finally, if the <code>name</code> argument is null, another
<code>MBeanPermission</code> check is made using the
<code>ObjectName</code> returned by {@link
MBeanRegistration#preRegister MBeanRegistration.preRegister}.</p>

<li><p>For the <code>createMBean</code> methods, the caller's
permissions must imply the permissions needed by the equivalent
<code>instantiate</code> followed by
<code>registerMBean</code>.</p>

<li><p>For the {@link #unregisterMBean unregisterMBean} method,
the caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(className, null, name, \"unregisterMBean\")}.</p>

</ul>

@since 1.5

 DELETED:

<li><p>For the {@link #isRegistered isRegistered} method, the
caller's permissions must imply {@link
MBeanPermission#MBeanPermission(String,String,ObjectName,String)
MBeanPermission(null, null, name, \"isRegistered\")}.</p>
"
      classrelation 961666 // <generalisation>
	relation 961666 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 961666 // <generalisation>
	  b parent class_ref 485250 // MBeanServerConnection
      end

      operation 2918914 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 5
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
<p>If this method successfully creates an MBean, a notification
is sent as described <a href=\"#notif\">above</a>.</p>

@throws RuntimeOperationsException {@inheritDoc}
@throws RuntimeMBeanException {@inheritDoc}
@throws RuntimeErrorException {@inheritDoc}
"
      end

      operation 2919042 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	nexceptions 6
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
<p>If this method successfully creates an MBean, a notification
is sent as described <a href=\"#notif\">above</a>.</p>

@throws RuntimeOperationsException {@inheritDoc}
@throws RuntimeMBeanException {@inheritDoc}
@throws RuntimeErrorException {@inheritDoc}
"
      end

      operation 2919170 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 4
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 5
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
<p>If this method successfully creates an MBean, a notification
is sent as described <a href=\"#notif\">above</a>.</p>

@throws RuntimeOperationsException {@inheritDoc}
@throws RuntimeMBeanException {@inheritDoc}
@throws RuntimeErrorException {@inheritDoc}
"
      end

      operation 2919298 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 5
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 6
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
<p>If this method successfully creates an MBean, a notification
is sent as described <a href=\"#notif\">above</a>.</p>

@throws RuntimeOperationsException {@inheritDoc}
@throws RuntimeMBeanException {@inheritDoc}
@throws RuntimeErrorException {@inheritDoc}
"
      end

      operation 2919426 "registerMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 2
	  param inout name "object" type class_ref 129538 // Object
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 3
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486146 // NotCompliantMBeanException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Registers a pre-existing object as an MBean with the MBean
server. If the object name given is null, the MBean must
provide its own name by implementing the {@link
javax.management.MBeanRegistration MBeanRegistration} interface
and returning the name from the {@link
MBeanRegistration#preRegister preRegister} method.

<p>If this method successfully registers an MBean, a notification
is sent as described <a href=\"#notif\">above</a>.</p>

@param object The  MBean to be registered as an MBean.
@param name The object name of the MBean. May be null.

@return An <CODE>ObjectInstance</CODE>, containing the
<CODE>ObjectName</CODE> and the Java class name of the newly
registered MBean.  If the contained <code>ObjectName</code>
is <code>n</code>, the contained Java class name is
<code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()</code>.

@exception InstanceAlreadyExistsException The MBean is already
under the control of the MBean server.
@exception MBeanRegistrationException The
<CODE>preRegister</CODE> (<CODE>MBeanRegistration</CODE>
interface) method of the MBean has thrown an exception. The
MBean will not be registered.
@exception RuntimeMBeanException If the <CODE>postRegister</CODE>
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
<CODE>RuntimeException</CODE>, the <CODE>registerMBean</CODE> method will
throw a <CODE>RuntimeMBeanException</CODE>, although the MBean
registration succeeded. In such a case, the MBean will be actually
registered even though the <CODE>registerMBean</CODE> method
threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
also be thrown by <CODE>preRegister</CODE>, in which case the MBean
will not be registered.
@exception RuntimeErrorException If the <CODE>postRegister</CODE>
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
<CODE>Error</CODE>, the <CODE>registerMBean</CODE> method will
throw a <CODE>RuntimeErrorException</CODE>, although the MBean
registration succeeded. In such a case, the MBean will be actually
registered even though the <CODE>registerMBean</CODE> method
threw an exception.  Note that <CODE>RuntimeErrorException</CODE> can
also be thrown by <CODE>preRegister</CODE>, in which case the MBean
will not be registered.
@exception NotCompliantMBeanException This object is not a JMX
compliant MBean
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The object
passed in parameter is null or no object name is specified.
@see javax.management.MBeanRegistration
"
      end

      operation 2919554 "unregisterMBean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485890 // MBeanRegistrationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

<p>If this method successfully unregisters an MBean, a notification
is sent as described <a href=\"#notif\">above</a>.</p>

@throws RuntimeOperationsException {@inheritDoc}
@throws RuntimeMBeanException {@inheritDoc}
@throws RuntimeErrorException {@inheritDoc}
"
      end

      operation 2919682 "getObjectInstance"
	public return_type class_ref 485378 // ObjectInstance
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection"
      end

      operation 2919810 "queryMBeans"
	public return_type class_ref 192258 // Set
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "query" type class_ref 486402 // QueryExp
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectInstance> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@throws RuntimeOperationsException {@inheritDoc}
"
      end

      operation 2919938 "queryNames"
	public return_type class_ref 192258 // Set
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "query" type class_ref 486402 // QueryExp
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@throws RuntimeOperationsException {@inheritDoc}
"
      end

      operation 2920066 "isRegistered"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection

@throws RuntimeOperationsException {@inheritDoc}
"
      end

      operation 2920194 "getMBeanCount"
	public return_type class_ref 137602 // Integer
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of MBeans registered in the MBean server.

@return the number of registered MBeans, wrapped in an Integer.
If the caller's permissions are restricted, this number may
be greater than the number of MBeans the caller can access.
"
      end

      operation 2920322 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attribute" type class_ref 128130 // String
	nexceptions 4
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485634 // ReflectionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection

@throws RuntimeOperationsException {@inheritDoc}
"
      end

      operation 2920450 "getAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attributes" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485634 // ReflectionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection

@throws RuntimeOperationsException {@inheritDoc}
"
      end

      operation 2920578 "setAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attribute" type class_ref 486786 // Attribute
	nexceptions 5
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486914 // InvalidAttributeValueException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection

@throws RuntimeOperationsException {@inheritDoc}
"
      end

      operation 2920706 "setAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attributes" type class_ref 486658 // AttributeList
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485634 // ReflectionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection

@throws RuntimeOperationsException {@inheritDoc}
"
      end

      operation 2920834 "invoke"
	public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "operationName" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection"
      end

      operation 2920962 "getDefaultDomain"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection"
      end

      operation 2921090 "getDomains"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection"
      end

      operation 2921218 "addNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection, plus:

{@inheritDoc}
If the source of the notification
is a reference to an MBean object, the MBean server will replace it
by that MBean's ObjectName.  Otherwise the source is unchanged.
"
      end

      operation 2921346 "addNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 485506 // ObjectName
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@throws RuntimeOperationsException {@inheritDoc}
"
      end

      operation 2921474 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 485506 // ObjectName
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection"
      end

      operation 2921602 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 485506 // ObjectName
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection"
      end

      operation 2921730 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 487042 // NotificationListener
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection"
      end

      operation 2921858 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection"
      end

      operation 2921986 "getMBeanInfo"
	public return_type class_ref 487426 // MBeanInfo
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487554 // IntrospectionException
	  exception class_ref 485634 // ReflectionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection"
      end

      operation 2922114 "isInstanceOf"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doc comment inherited from MBeanServerConnection"
      end

      operation 2922242 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Instantiates an object using the list of all class loaders
registered in the MBean server's {@link
javax.management.loading.ClassLoaderRepository Class Loader
Repository}.  The object's class should have a public
constructor.  This method returns a reference to the newly
created object.  The newly created object is not registered in
the MBean server.</p>

<p>This method is equivalent to {@link
#instantiate(String,Object[],String[])
instantiate(className, (Object[]) null, (String[]) null)}.</p>

@param className The class name of the object to be instantiated.

@return The newly instantiated object.

@exception ReflectionException Wraps a
<CODE>java.lang.ClassNotFoundException</CODE> or the
<CODE>java.lang.Exception</CODE> that occurred when trying to
invoke the object's constructor.
@exception MBeanException The constructor of the object has
thrown an exception
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The className
passed in parameter is null.
"
      end

      operation 2922370 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	nexceptions 3
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Instantiates an object using the class Loader specified by its
<CODE>ObjectName</CODE>.  If the loader name is null, the
ClassLoader that loaded the MBean Server will be used.  The
object's class should have a public constructor.  This method
returns a reference to the newly created object.  The newly
created object is not registered in the MBean server.</p>

<p>This method is equivalent to {@link
#instantiate(String,ObjectName,Object[],String[])
instantiate(className, loaderName, (Object[]) null, (String[])
null)}.</p>

@param className The class name of the MBean to be instantiated.
@param loaderName The object name of the class loader to be used.

@return The newly instantiated object.

@exception ReflectionException Wraps a
<CODE>java.lang.ClassNotFoundException</CODE> or the
<CODE>java.lang.Exception</CODE> that occurred when trying to
invoke the object's constructor.
@exception MBeanException The constructor of the object has
thrown an exception.
@exception InstanceNotFoundException The specified class loader
is not registered in the MBeanServer.
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The className
passed in parameter is null.
"
      end

      operation 2922498 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Instantiates an object using the list of all class loaders
registered in the MBean server {@link
javax.management.loading.ClassLoaderRepository Class Loader
Repository}.  The object's class should have a public
constructor.  The call returns a reference to the newly created
object.  The newly created object is not registered in the
MBean server.</p>

@param className The class name of the object to be instantiated.
@param params An array containing the parameters of the
constructor to be invoked.
@param signature An array containing the signature of the
constructor to be invoked.

@return The newly instantiated object.

@exception ReflectionException Wraps a
<CODE>java.lang.ClassNotFoundException</CODE> or the
<CODE>java.lang.Exception</CODE> that occurred when trying to
invoke the object's constructor.
@exception MBeanException The constructor of the object has
thrown an exception
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The className
passed in parameter is null.
"
      end

      operation 2922626 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "className" type class_ref 128130 // String
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Instantiates an object. The class loader to be used is
identified by its object name. If the object name of the loader
is null, the ClassLoader that loaded the MBean server will be
used.  The object's class should have a public constructor.
The call returns a reference to the newly created object.  The
newly created object is not registered in the MBean server.</p>

@param className The class name of the object to be instantiated.
@param params An array containing the parameters of the
constructor to be invoked.
@param signature An array containing the signature of the
constructor to be invoked.
@param loaderName The object name of the class loader to be used.

@return The newly instantiated object.

@exception ReflectionException Wraps a <CODE>java.lang.ClassNotFoundException</CODE> or the <CODE>java.lang.Exception</CODE> that
occurred when trying to invoke the object's constructor.
@exception MBeanException The constructor of the object has
thrown an exception
@exception InstanceNotFoundException The specified class loader
is not registered in the MBean server.
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The className
passed in parameter is null.
"
      end

      operation 2922754 "deserialize"
	public return_type class_ref 168962 // ObjectInputStream
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487682 // OperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "<p>De-serializes a byte array in the context of the class loader
of an MBean.</p>

@param name The name of the MBean whose class loader should be
used for the de-serialization.
@param data The byte array to be de-sererialized.

@return The de-serialized object stream.

@exception InstanceNotFoundException The MBean specified is not
found.
@exception OperationsException Any of the usual Input/Output
related exceptions.

@deprecated Use {@link #getClassLoaderFor getClassLoaderFor} to
obtain the appropriate class loader for deserialization.
"
      end

      operation 2922882 "deserialize"
	public return_type class_ref 168962 // ObjectInputStream
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 487682 // OperationsException
	  exception class_ref 485634 // ReflectionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "<p>De-serializes a byte array in the context of a given MBean
class loader.  The class loader is found by loading the class
<code>className</code> through the {@link
javax.management.loading.ClassLoaderRepository Class Loader
Repository}.  The resultant class's class loader is the one to
use.

@param className The name of the class whose class loader should be
used for the de-serialization.
@param data The byte array to be de-sererialized.

@return  The de-serialized object stream.

@exception OperationsException Any of the usual Input/Output
related exceptions.
@exception ReflectionException The specified class could not be
loaded by the class loader repository

@deprecated Use {@link #getClassLoaderRepository} to obtain the
class loader repository and use it to deserialize.
"
      end

      operation 2923010 "deserialize"
	public return_type class_ref 168962 // ObjectInputStream
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487682 // OperationsException
	  exception class_ref 485634 // ReflectionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "<p>De-serializes a byte array in the context of a given MBean
class loader.  The class loader is the one that loaded the
class with name \"className\".  The name of the class loader to
be used for loading the specified class is specified.  If null,
the MBean Server's class loader will be used.</p>

@param className The name of the class whose class loader should be
used for the de-serialization.
@param data The byte array to be de-sererialized.
@param loaderName The name of the class loader to be used for
loading the specified class.  If null, the MBean Server's class
loader will be used.

@return  The de-serialized object stream.

@exception InstanceNotFoundException The specified class loader
MBean is not found.
@exception OperationsException Any of the usual Input/Output
related exceptions.
@exception ReflectionException The specified class could not be
loaded by the specified class loader.

@deprecated Use {@link #getClassLoader getClassLoader} to obtain
the class loader for deserialization.
"
      end

      operation 2923138 "getClassLoaderFor"
	public return_type class_ref 129026 // ClassLoader
	nparams 1
	  param inout name "mbeanName" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the {@link java.lang.ClassLoader} that was used for
loading the class of the named MBean.</p>

@param mbeanName The ObjectName of the MBean.

@return The ClassLoader used for that MBean.  If <var>l</var>
is the MBean's actual ClassLoader, and <var>r</var> is the
returned value, then either:

<ul>
<li><var>r</var> is identical to <var>l</var>; or
<li>the result of <var>r</var>{@link
ClassLoader#loadClass(String) .loadClass(<var>s</var>)} is the
same as <var>l</var>{@link ClassLoader#loadClass(String)
.loadClass(<var>s</var>)} for any string <var>s</var>.
</ul>

What this means is that the ClassLoader may be wrapped in
another ClassLoader for security or other reasons.

@exception InstanceNotFoundException if the named MBean is not found.

"
      end

      operation 2923266 "getClassLoader"
	public return_type class_ref 129026 // ClassLoader
	nparams 1
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the named {@link java.lang.ClassLoader}.</p>

@param loaderName The ObjectName of the ClassLoader.  May be
null, in which case the MBean server's own ClassLoader is
returned.

@return The named ClassLoader.  If <var>l</var> is the actual
ClassLoader with that name, and <var>r</var> is the returned
value, then either:

<ul>
<li><var>r</var> is identical to <var>l</var>; or
<li>the result of <var>r</var>{@link
ClassLoader#loadClass(String) .loadClass(<var>s</var>)} is the
same as <var>l</var>{@link ClassLoader#loadClass(String)
.loadClass(<var>s</var>)} for any string <var>s</var>.
</ul>

What this means is that the ClassLoader may be wrapped in
another ClassLoader for security or other reasons.

@exception InstanceNotFoundException if the named ClassLoader is
   not found.

"
      end

      operation 2923394 "getClassLoaderRepository"
	public return_type class_ref 487810 // ClassLoaderRepository
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the ClassLoaderRepository for this MBeanServer.
@return The ClassLoaderRepository for this MBeanServer.

"
      end
    end

    class 485250 "MBeanServerConnection"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a way to talk to an MBean server, whether
local or remote.  The {@link MBeanServer} interface, representing a
local MBean server, extends this interface.


@since 1.5
"
      operation 2915714 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 6
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Instantiates and registers an MBean in the MBean server.  The
MBean server will use its {@link
javax.management.loading.ClassLoaderRepository Default Loader
Repository} to load the class of the MBean.  An object name is
associated with the MBean.  If the object name given is null, the
MBean must provide its own name by implementing the {@link
javax.management.MBeanRegistration MBeanRegistration} interface
and returning the name from the {@link
MBeanRegistration#preRegister preRegister} method.</p>

<p>This method is equivalent to {@link
#createMBean(String,ObjectName,Object[],String[])
createMBean(className, name, (Object[]) null, (String[])
null)}.</p>

@param className The class name of the MBean to be instantiated.
@param name The object name of the MBean. May be null.

@return An <CODE>ObjectInstance</CODE>, containing the
<CODE>ObjectName</CODE> and the Java class name of the newly
instantiated MBean.  If the contained <code>ObjectName</code>
is <code>n</code>, the contained Java class name is
<code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()</code>.

@exception ReflectionException Wraps a
<CODE>java.lang.ClassNotFoundException</CODE> or a
<CODE>java.lang.Exception</CODE> that occurred
when trying to invoke the MBean's constructor.
@exception InstanceAlreadyExistsException The MBean is already
under the control of the MBean server.
@exception MBeanRegistrationException The
<CODE>preRegister</CODE> (<CODE>MBeanRegistration</CODE>
interface) method of the MBean has thrown an exception. The
MBean will not be registered.
@exception RuntimeMBeanException If the MBean's constructor or its
{@code preRegister} or {@code postRegister} method threw
a {@code RuntimeException}. If the <CODE>postRegister</CODE>
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
<CODE>RuntimeException</CODE>, the <CODE>createMBean</CODE> method will
throw a <CODE>RuntimeMBeanException</CODE>, although the MBean creation
and registration succeeded. In such a case, the MBean will be actually
registered even though the <CODE>createMBean</CODE> method
threw an exception. Note that <CODE>RuntimeMBeanException</CODE> can
also be thrown by <CODE>preRegister</CODE>, in which case the MBean
will not be registered.
@exception RuntimeErrorException If the <CODE>postRegister</CODE>
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
<CODE>Error</CODE>, the <CODE>createMBean</CODE> method will
throw a <CODE>RuntimeErrorException</CODE>, although the MBean creation
and registration succeeded. In such a case, the MBean will be actually
registered even though the <CODE>createMBean</CODE> method
threw an exception.  Note that <CODE>RuntimeErrorException</CODE> can
also be thrown by <CODE>preRegister</CODE>, in which case the MBean
will not be registered.
@exception MBeanException The constructor of the MBean has
thrown an exception
@exception NotCompliantMBeanException This class is not a JMX
compliant MBean
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The className
passed in parameter is null, the <CODE>ObjectName</CODE> passed
in parameter contains a pattern or no <CODE>ObjectName</CODE>
is specified for the MBean.
@exception IOException A communication problem occurred when
talking to the MBean server.
@see javax.management.MBeanRegistration
"
      end

      operation 2915842 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	nexceptions 7
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Instantiates and registers an MBean in the MBean server.  The
class loader to be used is identified by its object name. An
object name is associated with the MBean. If the object name of
the loader is null, the ClassLoader that loaded the MBean
server will be used.  If the MBean's object name given is null,
the MBean must provide its own name by implementing the {@link
javax.management.MBeanRegistration MBeanRegistration} interface
and returning the name from the {@link
MBeanRegistration#preRegister preRegister} method.</p>

<p>This method is equivalent to {@link
#createMBean(String,ObjectName,ObjectName,Object[],String[])
createMBean(className, name, loaderName, (Object[]) null,
(String[]) null)}.</p>

@param className The class name of the MBean to be instantiated.
@param name The object name of the MBean. May be null.
@param loaderName The object name of the class loader to be used.

@return An <CODE>ObjectInstance</CODE>, containing the
<CODE>ObjectName</CODE> and the Java class name of the newly
instantiated MBean.  If the contained <code>ObjectName</code>
is <code>n</code>, the contained Java class name is
<code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()</code>.

@exception ReflectionException Wraps a
<CODE>java.lang.ClassNotFoundException</CODE> or a
<CODE>java.lang.Exception</CODE> that occurred when trying to
invoke the MBean's constructor.
@exception InstanceAlreadyExistsException The MBean is already
under the control of the MBean server.
@exception MBeanRegistrationException The
<CODE>preRegister</CODE> (<CODE>MBeanRegistration</CODE>
interface) method of the MBean has thrown an exception. The
MBean will not be registered.
@exception RuntimeMBeanException If the MBean's constructor or its
{@code preRegister} or {@code postRegister} method threw
a {@code RuntimeException}. If the <CODE>postRegister</CODE>
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
<CODE>RuntimeException</CODE>, the <CODE>createMBean</CODE> method will
throw a <CODE>RuntimeMBeanException</CODE>, although the MBean creation
and registration succeeded. In such a case, the MBean will be actually
registered even though the <CODE>createMBean</CODE> method
threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
also be thrown by <CODE>preRegister</CODE>, in which case the MBean
will not be registered.
@exception RuntimeErrorException If the <CODE>postRegister</CODE>
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
<CODE>Error</CODE>, the <CODE>createMBean</CODE> method will
throw a <CODE>RuntimeErrorException</CODE>, although the MBean creation
and registration succeeded. In such a case, the MBean will be actually
registered even though the <CODE>createMBean</CODE> method
threw an exception.  Note that <CODE>RuntimeErrorException</CODE> can
also be thrown by <CODE>preRegister</CODE>, in which case the MBean
will not be registered.
@exception MBeanException The constructor of the MBean has
thrown an exception
@exception NotCompliantMBeanException This class is not a JMX
compliant MBean
@exception InstanceNotFoundException The specified class loader
is not registered in the MBean server.
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The className
passed in parameter is null, the <CODE>ObjectName</CODE> passed
in parameter contains a pattern or no <CODE>ObjectName</CODE>
is specified for the MBean.
@exception IOException A communication problem occurred when
talking to the MBean server.
@see javax.management.MBeanRegistration
"
      end

      operation 2915970 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 4
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 6
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates and registers an MBean in the MBean server.  The
MBean server will use its {@link
javax.management.loading.ClassLoaderRepository Default Loader
Repository} to load the class of the MBean.  An object name is
associated with the MBean.  If the object name given is null, the
MBean must provide its own name by implementing the {@link
javax.management.MBeanRegistration MBeanRegistration} interface
and returning the name from the {@link
MBeanRegistration#preRegister preRegister} method.

@param className The class name of the MBean to be instantiated.
@param name The object name of the MBean. May be null.
@param params An array containing the parameters of the
constructor to be invoked.
@param signature An array containing the signature of the
constructor to be invoked.

@return An <CODE>ObjectInstance</CODE>, containing the
<CODE>ObjectName</CODE> and the Java class name of the newly
instantiated MBean.  If the contained <code>ObjectName</code>
is <code>n</code>, the contained Java class name is
<code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()</code>.

@exception ReflectionException Wraps a
<CODE>java.lang.ClassNotFoundException</CODE> or a
<CODE>java.lang.Exception</CODE> that occurred when trying to
invoke the MBean's constructor.
@exception InstanceAlreadyExistsException The MBean is already
under the control of the MBean server.
@exception MBeanRegistrationException The
<CODE>preRegister</CODE> (<CODE>MBeanRegistration</CODE>
interface) method of the MBean has thrown an exception. The
MBean will not be registered.
@exception RuntimeMBeanException If the MBean's constructor or its
{@code preRegister} or {@code postRegister} method threw
a {@code RuntimeException}. If the <CODE>postRegister</CODE>
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
<CODE>RuntimeException</CODE>, the <CODE>createMBean</CODE> method will
throw a <CODE>RuntimeMBeanException</CODE>, although the MBean creation
and registration succeeded. In such a case, the MBean will be actually
registered even though the <CODE>createMBean</CODE> method
threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
also be thrown by <CODE>preRegister</CODE>, in which case the MBean
will not be registered.
@exception RuntimeErrorException If the <CODE>postRegister</CODE>
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
<CODE>Error</CODE>, the <CODE>createMBean</CODE> method will
throw a <CODE>RuntimeErrorException</CODE>, although the MBean creation
and registration succeeded. In such a case, the MBean will be actually
registered even though the <CODE>createMBean</CODE> method
threw an exception.  Note that <CODE>RuntimeErrorException</CODE> can
also be thrown by <CODE>preRegister</CODE>, in which case the MBean
will not be registered.
@exception MBeanException The constructor of the MBean has
thrown an exception
@exception NotCompliantMBeanException This class is not a JMX
compliant MBean
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The className
passed in parameter is null, the <CODE>ObjectName</CODE> passed
in parameter contains a pattern or no <CODE>ObjectName</CODE>
is specified for the MBean.
@exception IOException A communication problem occurred when
talking to the MBean server.
@see javax.management.MBeanRegistration
"
      end

      operation 2916098 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 5
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 7
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Instantiates and registers an MBean in the MBean server.  The
class loader to be used is identified by its object name. An
object name is associated with the MBean. If the object name of
the loader is not specified, the ClassLoader that loaded the
MBean server will be used.  If the MBean object name given is
null, the MBean must provide its own name by implementing the
{@link javax.management.MBeanRegistration MBeanRegistration}
interface and returning the name from the {@link
MBeanRegistration#preRegister preRegister} method.

@param className The class name of the MBean to be instantiated.
@param name The object name of the MBean. May be null.
@param params An array containing the parameters of the
constructor to be invoked.
@param signature An array containing the signature of the
constructor to be invoked.
@param loaderName The object name of the class loader to be used.

@return An <CODE>ObjectInstance</CODE>, containing the
<CODE>ObjectName</CODE> and the Java class name of the newly
instantiated MBean.  If the contained <code>ObjectName</code>
is <code>n</code>, the contained Java class name is
<code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()</code>.

@exception ReflectionException Wraps a
<CODE>java.lang.ClassNotFoundException</CODE> or a
<CODE>java.lang.Exception</CODE> that occurred when trying to
invoke the MBean's constructor.
@exception InstanceAlreadyExistsException The MBean is already
under the control of the MBean server.
@exception MBeanRegistrationException The
<CODE>preRegister</CODE> (<CODE>MBeanRegistration</CODE>
interface) method of the MBean has thrown an exception. The
MBean will not be registered.
@exception RuntimeMBeanException The MBean's constructor or its
{@code preRegister} or {@code postRegister} method threw
a {@code RuntimeException}. If the <CODE>postRegister</CODE>
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
<CODE>RuntimeException</CODE>, the <CODE>createMBean</CODE> method will
throw a <CODE>RuntimeMBeanException</CODE>, although the MBean creation
and registration succeeded. In such a case, the MBean will be actually
registered even though the <CODE>createMBean</CODE> method
threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
also be thrown by <CODE>preRegister</CODE>, in which case the MBean
will not be registered.
@exception RuntimeErrorException If the <CODE>postRegister</CODE> method
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
<CODE>Error</CODE>, the <CODE>createMBean</CODE> method will
throw a <CODE>RuntimeErrorException</CODE>, although the MBean creation
and registration succeeded. In such a case, the MBean will be actually
registered even though the <CODE>createMBean</CODE> method
threw an exception.  Note that <CODE>RuntimeErrorException</CODE> can
also be thrown by <CODE>preRegister</CODE>, in which case the MBean
will not be registered.
@exception MBeanException The constructor of the MBean has
thrown an exception
@exception NotCompliantMBeanException This class is not a JMX
compliant MBean
@exception InstanceNotFoundException The specified class loader
is not registered in the MBean server.
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The className
passed in parameter is null, the <CODE>ObjectName</CODE> passed
in parameter contains a pattern or no <CODE>ObjectName</CODE>
is specified for the MBean.
@exception IOException A communication problem occurred when
talking to the MBean server.
@see javax.management.MBeanRegistration
"
      end

      operation 2916226 "unregisterMBean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unregisters an MBean from the MBean server. The MBean is
identified by its object name. Once the method has been
invoked, the MBean may no longer be accessed by its object
name.

@param name The object name of the MBean to be unregistered.

@exception InstanceNotFoundException The MBean specified is not
registered in the MBean server.
@exception MBeanRegistrationException The preDeregister
((<CODE>MBeanRegistration</CODE> interface) method of the MBean
has thrown an exception.
@exception RuntimeMBeanException If the <CODE>postDeregister</CODE>
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
<CODE>RuntimeException</CODE>, the <CODE>unregisterMBean</CODE> method
will throw a <CODE>RuntimeMBeanException</CODE>, although the MBean
unregistration succeeded. In such a case, the MBean will be actually
unregistered even though the <CODE>unregisterMBean</CODE> method
threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
also be thrown by <CODE>preDeregister</CODE>, in which case the MBean
will remain registered.
@exception RuntimeErrorException If the <CODE>postDeregister</CODE>
(<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
<CODE>Error</CODE>, the <CODE>unregisterMBean</CODE> method will
throw a <CODE>RuntimeErrorException</CODE>, although the MBean
unregistration succeeded. In such a case, the MBean will be actually
unregistered even though the <CODE>unregisterMBean</CODE> method
threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
also be thrown by <CODE>preDeregister</CODE>, in which case the MBean
will remain registered.
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The object
name in parameter is null or the MBean you are when trying to
unregister is the {@link javax.management.MBeanServerDelegate
MBeanServerDelegate} MBean.
@exception IOException A communication problem occurred when
talking to the MBean server.
@see javax.management.MBeanRegistration
"
      end

      operation 2916354 "getObjectInstance"
	public return_type class_ref 485378 // ObjectInstance
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <CODE>ObjectInstance</CODE> for a given MBean
registered with the MBean server.

@param name The object name of the MBean.

@return The <CODE>ObjectInstance</CODE> associated with the MBean
specified by <VAR>name</VAR>.  The contained <code>ObjectName</code>
is <code>name</code> and the contained class name is
<code>{@link #getMBeanInfo getMBeanInfo(name)}.getClassName()</code>.

@exception InstanceNotFoundException The MBean specified is not
registered in the MBean server.
@exception IOException A communication problem occurred when
talking to the MBean server.
"
      end

      operation 2916482 "queryMBeans"
	public return_type class_ref 192258 // Set
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "query" type class_ref 486402 // QueryExp
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectInstance> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets MBeans controlled by the MBean server. This method allows
any of the following to be obtained: All MBeans, a set of
MBeans specified by pattern matching on the
<CODE>ObjectName</CODE> and/or a Query expression, a specific
MBean. When the object name is null or no domain and key
properties are specified, all objects are to be selected (and
filtered if a query is specified). It returns the set of
<CODE>ObjectInstance</CODE> objects (containing the
<CODE>ObjectName</CODE> and the Java Class name) for the
selected MBeans.

@param name The object name pattern identifying the MBeans to
be retrieved. If null or no domain and key properties are
specified, all the MBeans registered will be retrieved.
@param query The query expression to be applied for selecting
MBeans. If null no query expression will be applied for
selecting MBeans.

@return A set containing the <CODE>ObjectInstance</CODE>
objects for the selected MBeans.  If no MBean satisfies the
query an empty list is returned.

@exception IOException A communication problem occurred when
talking to the MBean server.
"
      end

      operation 2916610 "queryNames"
	public return_type class_ref 192258 // Set
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "query" type class_ref 486402 // QueryExp
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the names of MBeans controlled by the MBean server. This
method enables any of the following to be obtained: The names
of all MBeans, the names of a set of MBeans specified by
pattern matching on the <CODE>ObjectName</CODE> and/or a Query
expression, a specific MBean name (equivalent to testing
whether an MBean is registered). When the object name is null
or no domain and key properties are specified, all objects are
selected (and filtered if a query is specified). It returns the
set of ObjectNames for the MBeans selected.

@param name The object name pattern identifying the MBean names
to be retrieved. If null or no domain and key properties are
specified, the name of all registered MBeans will be retrieved.
@param query The query expression to be applied for selecting
MBeans. If null no query expression will be applied for
selecting MBeans.

@return A set containing the ObjectNames for the MBeans
selected.  If no MBean satisfies the query, an empty list is
returned.

@exception IOException A communication problem occurred when
talking to the MBean server.
"
      end

      operation 2916738 "isRegistered"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether an MBean, identified by its object name, is
already registered with the MBean server.

@param name The object name of the MBean to be checked.

@return True if the MBean is already registered in the MBean
server, false otherwise.

@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The object
name in parameter is null.
@exception IOException A communication problem occurred when
talking to the MBean server.
"
      end

      operation 2916866 "getMBeanCount"
	public return_type class_ref 137602 // Integer
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of MBeans registered in the MBean server.

@return the number of MBeans registered.

@exception IOException A communication problem occurred when
talking to the MBean server.
"
      end

      operation 2916994 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attribute" type class_ref 128130 // String
	nexceptions 5
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specific attribute of a named MBean. The MBean
is identified by its object name.

@param name The object name of the MBean from which the
attribute is to be retrieved.
@param attribute A String specifying the name of the attribute
to be retrieved.

@return  The value of the retrieved attribute.

@exception AttributeNotFoundException The attribute specified
is not accessible in the MBean.
@exception MBeanException Wraps an exception thrown by the
MBean's getter.
@exception InstanceNotFoundException The MBean specified is not
registered in the MBean server.
@exception ReflectionException Wraps a
<CODE>java.lang.Exception</CODE> thrown when trying to invoke
the setter.
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The object
name in parameter is null or the attribute in parameter is
null.
@exception IOException A communication problem occurred when
talking to the MBean server.

@see #setAttribute
"
      end

      operation 2917122 "getAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attributes" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Retrieves the values of several attributes of a named MBean. The MBean
is identified by its object name.</p>

<p>If one or more attributes cannot be retrieved for some reason, they
will be omitted from the returned {@code AttributeList}.  The caller
should check that the list is the same size as the {@code attributes}
array.  To discover what problem prevented a given attribute from being
retrieved, call {@link #getAttribute getAttribute} for that attribute.</p>

<p>Here is an example of calling this method and checking that it
succeeded in retrieving all the requested attributes:</p>

<pre>
String[] attrNames = ...;
AttributeList list = mbeanServerConnection.getAttributes(objectName, attrNames);
if (list.size() == attrNames.length)
    System.out.println(\"All attributes were retrieved successfully\");
else {
    {@code List<String>} missing = new {@code ArrayList<String>}(<!--
-->{@link java.util.Arrays#asList Arrays.asList}(attrNames));
    for (Attribute a : list.asList())
        missing.remove(a.getName());
    System.out.println(\"Did not retrieve: \" + missing);
}
</pre>

@param name The object name of the MBean from which the
attributes are retrieved.
@param attributes A list of the attributes to be retrieved.

@return The list of the retrieved attributes.

@exception InstanceNotFoundException The MBean specified is not
registered in the MBean server.
@exception ReflectionException An exception occurred when
trying to invoke the getAttributes method of a Dynamic MBean.
@exception RuntimeOperationsException Wrap a
<CODE>java.lang.IllegalArgumentException</CODE>: The object
name in parameter is null or attributes in parameter is null.
@exception IOException A communication problem occurred when
talking to the MBean server.

@see #setAttributes
"
      end

      operation 2917250 "setAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attribute" type class_ref 486786 // Attribute
	nexceptions 6
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486914 // InvalidAttributeValueException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specific attribute of a named MBean. The MBean
is identified by its object name.

@param name The name of the MBean within which the attribute is
to be set.
@param attribute The identification of the attribute to be set
and the value it is to be set to.

@exception InstanceNotFoundException The MBean specified is not
registered in the MBean server.
@exception AttributeNotFoundException The attribute specified
is not accessible in the MBean.
@exception InvalidAttributeValueException The value specified
for the attribute is not valid.
@exception MBeanException Wraps an exception thrown by the
MBean's setter.
@exception ReflectionException Wraps a
<CODE>java.lang.Exception</CODE> thrown when trying to invoke
the setter.
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The object
name in parameter is null or the attribute in parameter is
null.
@exception IOException A communication problem occurred when
talking to the MBean server.

@see #getAttribute
"
      end

      operation 2917378 "setAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attributes" type class_ref 486658 // AttributeList
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets the values of several attributes of a named MBean. The MBean is
identified by its object name.</p>

<p>If one or more attributes cannot be set for some reason, they will be
omitted from the returned {@code AttributeList}.  The caller should check
that the input {@code AttributeList} is the same size as the output one.
To discover what problem prevented a given attribute from being retrieved,
it will usually be possible to call {@link #setAttribute setAttribute}
for that attribute, although this is not guaranteed to work.  (For
example, the values of two attributes may have been rejected because
they were inconsistent with each other.  Setting one of them alone might
be allowed.)

<p>Here is an example of calling this method and checking that it
succeeded in setting all the requested attributes:</p>

<pre>
AttributeList inputAttrs = ...;
AttributeList outputAttrs = mbeanServerConnection.setAttributes(<!--
-->objectName, inputAttrs);
if (inputAttrs.size() == outputAttrs.size())
    System.out.println(\"All attributes were set successfully\");
else {
    {@code List<String>} missing = new {@code ArrayList<String>}();
    for (Attribute a : inputAttrs.asList())
        missing.add(a.getName());
    for (Attribute a : outputAttrs.asList())
        missing.remove(a.getName());
    System.out.println(\"Did not set: \" + missing);
}
</pre>

@param name The object name of the MBean within which the
attributes are to be set.
@param attributes A list of attributes: The identification of
the attributes to be set and the values they are to be set to.

@return The list of attributes that were set, with their new
values.

@exception InstanceNotFoundException The MBean specified is not
registered in the MBean server.
@exception ReflectionException An exception occurred when
trying to invoke the getAttributes method of a Dynamic MBean.
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: The object
name in parameter is null or attributes in parameter is null.
@exception IOException A communication problem occurred when
talking to the MBean server.

@see #getAttributes
"
      end

      operation 2917506 "invoke"
	public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "operationName" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 4
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Invokes an operation on an MBean.</p>

<p>Because of the need for a {@code signature} to differentiate
possibly-overloaded operations, it is much simpler to invoke operations
through an {@linkplain JMX#newMBeanProxy(MBeanServerConnection, ObjectName,
Class) MBean proxy} where possible.  For example, suppose you have a
Standard MBean interface like this:</p>

<pre>
public interface FooMBean {
    public int countMatches(String[] patterns, boolean ignoreCase);
}
</pre>

<p>The {@code countMatches} operation can be invoked as follows:</p>

<pre>
String[] myPatterns = ...;
int count = (Integer) mbeanServerConnection.invoke(
        objectName,
        \"countMatches\",
        new Object[] {myPatterns, true},
        new String[] {String[].class.getName(), boolean.class.getName()});
</pre>

<p>Alternatively, it can be invoked through a proxy as follows:</p>

<pre>
String[] myPatterns = ...;
FooMBean fooProxy = JMX.newMBeanProxy(
        mbeanServerConnection, objectName, FooMBean.class);
int count = fooProxy.countMatches(myPatterns, true);
</pre>

@param name The object name of the MBean on which the method is
to be invoked.
@param operationName The name of the operation to be invoked.
@param params An array containing the parameters to be set when
the operation is invoked
@param signature An array containing the signature of the
operation, an array of class names in the format returned by
{@link Class#getName()}. The class objects will be loaded using the same
class loader as the one used for loading the MBean on which the
operation was invoked.

@return The object returned by the operation, which represents
the result of invoking the operation on the MBean specified.

@exception InstanceNotFoundException The MBean specified is not
registered in the MBean server.
@exception MBeanException Wraps an exception thrown by the
MBean's invoked method.
@exception ReflectionException Wraps a
<CODE>java.lang.Exception</CODE> thrown while trying to invoke
the method.
@exception IOException A communication problem occurred when
talking to the MBean server.

"
      end

      operation 2917634 "getDefaultDomain"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default domain used for naming the MBean.
The default domain name is used as the domain part in the ObjectName
of MBeans if no domain is specified by the user.

@return the default domain.

@exception IOException A communication problem occurred when
talking to the MBean server.
"
      end

      operation 2917762 "getDomains"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the list of domains in which any MBean is currently
registered.  A string is in the returned array if and only if
there is at least one MBean registered with an ObjectName whose
{@link ObjectName#getDomain() getDomain()} is equal to that
string.  The order of strings within the returned array is
not defined.</p>

@return the list of domains.

@exception IOException A communication problem occurred when
talking to the MBean server.

"
      end

      operation 2917890 "addNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Adds a listener to a registered MBean.
Notifications emitted by the MBean will be forwarded to the listener.</p>

@param name The name of the MBean on which the listener should
be added.
@param listener The listener object which will handle the
notifications emitted by the registered MBean.
@param filter The filter object. If filter is null, no
filtering will be performed before handling notifications.
@param handback The context to be sent to the listener when a
notification is emitted.

@exception InstanceNotFoundException The MBean name provided
does not match any of the registered MBeans.
@exception IOException A communication problem occurred when
talking to the MBean server.

@see #removeNotificationListener(ObjectName, NotificationListener)
@see #removeNotificationListener(ObjectName, NotificationListener,
NotificationFilter, Object)
"
      end

      operation 2918018 "addNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 485506 // ObjectName
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Adds a listener to a registered MBean.</p>

<p>A notification emitted by an MBean will be forwarded by the
MBeanServer to the listener.  If the source of the notification
is a reference to an MBean object, the MBean server will
replace it by that MBean's ObjectName.  Otherwise the source is
unchanged.</p>

<p>The listener object that receives notifications is the one
that is registered with the given name at the time this method
is called.  Even if it is subsequently unregistered, it will
continue to receive notifications.</p>

@param name The name of the MBean on which the listener should
be added.
@param listener The object name of the listener which will
handle the notifications emitted by the registered MBean.
@param filter The filter object. If filter is null, no
filtering will be performed before handling notifications.
@param handback The context to be sent to the listener when a
notification is emitted.

@exception InstanceNotFoundException The MBean name of the
notification listener or of the notification broadcaster does
not match any of the registered MBeans.
@exception RuntimeOperationsException Wraps an {@link
IllegalArgumentException}.  The MBean named by
<code>listener</code> exists but does not implement the {@link
NotificationListener} interface.
@exception IOException A communication problem occurred when
talking to the MBean server.

@see #removeNotificationListener(ObjectName, ObjectName)
@see #removeNotificationListener(ObjectName, ObjectName,
NotificationFilter, Object)
"
      end

      operation 2918146 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 485506 // ObjectName
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener from a registered MBean.

<P> If the listener is registered more than once, perhaps with
different filters or callbacks, this method will remove all
those registrations.

@param name The name of the MBean on which the listener should
be removed.
@param listener The object name of the listener to be removed.

@exception InstanceNotFoundException The MBean name provided
does not match any of the registered MBeans.
@exception ListenerNotFoundException The listener is not
registered in the MBean.
@exception IOException A communication problem occurred when
talking to the MBean server.

@see #addNotificationListener(ObjectName, ObjectName,
NotificationFilter, Object)
"
      end

      operation 2918274 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 485506 // ObjectName
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Removes a listener from a registered MBean.</p>

<p>The MBean must have a listener that exactly matches the
given <code>listener</code>, <code>filter</code>, and
<code>handback</code> parameters.  If there is more than one
such listener, only one is removed.</p>

<p>The <code>filter</code> and <code>handback</code> parameters
may be null if and only if they are null in a listener to be
removed.</p>

@param name The name of the MBean on which the listener should
be removed.
@param listener The object name of the listener to be removed.
@param filter The filter that was specified when the listener
was added.
@param handback The handback that was specified when the
listener was added.

@exception InstanceNotFoundException The MBean name provided
does not match any of the registered MBeans.
@exception ListenerNotFoundException The listener is not
registered in the MBean, or it is not registered with the given
filter and handback.
@exception IOException A communication problem occurred when
talking to the MBean server.

@see #addNotificationListener(ObjectName, ObjectName,
NotificationFilter, Object)

"
      end

      operation 2918402 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 487042 // NotificationListener
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Removes a listener from a registered MBean.</p>

<P> If the listener is registered more than once, perhaps with
different filters or callbacks, this method will remove all
those registrations.

@param name The name of the MBean on which the listener should
be removed.
@param listener The listener to be removed.

@exception InstanceNotFoundException The MBean name provided
does not match any of the registered MBeans.
@exception ListenerNotFoundException The listener is not
registered in the MBean.
@exception IOException A communication problem occurred when
talking to the MBean server.

@see #addNotificationListener(ObjectName, NotificationListener,
NotificationFilter, Object)
"
      end

      operation 2918530 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Removes a listener from a registered MBean.</p>

<p>The MBean must have a listener that exactly matches the
given <code>listener</code>, <code>filter</code>, and
<code>handback</code> parameters.  If there is more than one
such listener, only one is removed.</p>

<p>The <code>filter</code> and <code>handback</code> parameters
may be null if and only if they are null in a listener to be
removed.</p>

@param name The name of the MBean on which the listener should
be removed.
@param listener The listener to be removed.
@param filter The filter that was specified when the listener
was added.
@param handback The handback that was specified when the
listener was added.

@exception InstanceNotFoundException The MBean name provided
does not match any of the registered MBeans.
@exception ListenerNotFoundException The listener is not
registered in the MBean, or it is not registered with the given
filter and handback.
@exception IOException A communication problem occurred when
talking to the MBean server.

@see #addNotificationListener(ObjectName, NotificationListener,
NotificationFilter, Object)

"
      end

      operation 2918658 "getMBeanInfo"
	public return_type class_ref 487426 // MBeanInfo
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487554 // IntrospectionException
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method discovers the attributes and operations that an
MBean exposes for management.

@param name The name of the MBean to analyze

@return An instance of <CODE>MBeanInfo</CODE> allowing the
retrieval of all attributes and operations of this MBean.

@exception IntrospectionException An exception occurred during
introspection.
@exception InstanceNotFoundException The MBean specified was
not found.
@exception ReflectionException An exception occurred when
trying to invoke the getMBeanInfo of a Dynamic MBean.
@exception IOException A communication problem occurred when
talking to the MBean server.
"
      end

      operation 2918786 "isInstanceOf"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "className" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns true if the MBean specified is an instance of the
specified class, false otherwise.</p>

<p>If <code>name</code> does not name an MBean, this method
throws {@link InstanceNotFoundException}.</p>

<p>Otherwise, let<br>
X be the MBean named by <code>name</code>,<br>
L be the ClassLoader of X,<br>
N be the class name in X's {@link MBeanInfo}.</p>

<p>If N equals <code>className</code>, the result is true.</p>

<p>Otherwise, if L successfully loads <code>className</code>
and X is an instance of this class, the result is true.

<p>Otherwise, if L successfully loads both N and
<code>className</code>, and the second class is assignable from
the first, the result is true.</p>

<p>Otherwise, the result is false.</p>

@param name The <CODE>ObjectName</CODE> of the MBean.
@param className The name of the class.

@return true if the MBean specified is an instance of the
specified class according to the rules above, false otherwise.

@exception InstanceNotFoundException The MBean specified is not
registered in the MBean server.
@exception IOException A communication problem occurred when
talking to the MBean server.

@see Class#isInstance
"
      end
    end

    class 485378 "ObjectInstance"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Used to represent the object name of an MBean and its class name.
If the MBean is a Dynamic MBean the class name should be retrieved from
the <CODE>MBeanInfo</CODE> it provides.

@since 1.5
"
      classrelation 3801602 // <realization>
	relation 3801602 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3801602 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2274690 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4099952623687795850L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3801730 // name (<unidirectional association>)
	relation 3801730 --->
	  a role_name "name" private
	    comment "
@serial Object name.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3801730 // name (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end

      classrelation 3801858 // className (<unidirectional association>)
	relation 3801858 --->
	  a role_name "className" private
	    comment "
@serial Class name.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3801858 // className (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9785474 "ObjectInstance"
	public explicit_return_type ""
	nparams 2
	  param inout name "objectName" type class_ref 128130 // String
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows an object instance to be created given a string representation of
an object name and the full class name, including the package name.

@param objectName  A string representation of the object name.
@param className The full class name, including the package
name, of the object instance.  If the MBean is a Dynamic MBean
the class name corresponds to its {@link
DynamicMBean#getMBeanInfo()
getMBeanInfo()}<code>.getClassName()</code>.

@exception MalformedObjectNameException The string passed as a
parameter does not have the right format.

"
      end

      operation 9785602 "ObjectInstance"
	public explicit_return_type ""
	nparams 2
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "className" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows an object instance to be created given an object name and
the full class name, including the package name.

@param objectName  The object name.
@param className  The full class name, including the package
name, of the object instance.  If the MBean is a Dynamic MBean
the class name corresponds to its {@link
DynamicMBean#getMBeanInfo()
getMBeanInfo()}<code>.getClassName()</code>.
If the MBean is a Dynamic MBean the class name should be retrieved
from the <CODE>MBeanInfo</CODE> it provides.

"
      end

      operation 9785730 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the current object instance with another object instance.

@param object  The object instance that the current object instance is
    to be compared with.

@return  True if the two object instances are equal, otherwise false.
"
      end

      operation 9785858 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9785986 "getObjectName"
	public return_type class_ref 485506 // ObjectName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the object name part.

@return the object name.
"
      end

      operation 9786114 "getClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class part.

@return the class name.
"
      end

      operation 9786242 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representing this ObjectInstance object. The format of this string
is not specified, but users can expect that two ObjectInstances return the same
string if and only if they are equal.
"
      end
    end

    class 485506 "ObjectName"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Represents the object name of an MBean, or a pattern that can
match the names of several MBeans.  Instances of this class are
immutable.</p>

<p>An instance of this class can be used to represent:</p>
<ul>
<li>An object name</li>
<li>An object name pattern, within the context of a query</li>
</ul>

<p>An object name consists of two parts, the domain and the key
properties.</p>

<p>The <em>domain</em> is a string of characters not including
the character colon (<code>:</code>).  It is recommended that the domain
should not contain the string \"{@code //}\", which is reserved for future use.

<p>If the domain includes at least one occurrence of the wildcard
characters asterisk (<code>*</code>) or question mark
(<code>?</code>), then the object name is a pattern.  The asterisk
matches any sequence of zero or more characters, while the question
mark matches any single character.</p>

<p>If the domain is empty, it will be replaced in certain contexts
by the <em>default domain</em> of the MBean server in which the
ObjectName is used.</p>

<p>The <em>key properties</em> are an unordered set of keys and
associated values.</p>

<p>Each <em>key</em> is a nonempty string of characters which may
not contain any of the characters comma (<code>,</code>), equals
(<code>=</code>), colon, asterisk, or question mark.  The same key
may not occur twice in a given ObjectName.</p>

<p>Each <em>value</em> associated with a key is a string of
characters that is either unquoted or quoted.</p>

<p>An <em>unquoted value</em> is a possibly empty string of
characters which may not contain any of the characters comma,
equals, colon, or quote.</p>

<p>If the <em>unquoted value</em> contains at least one occurrence
of the wildcard characters asterisk or question mark, then the object
name is a <em>property value pattern</em>. The asterisk matches any
sequence of zero or more characters, while the question mark matches
any single character.</p>

<p>A <em>quoted value</em> consists of a quote (<code>\"</code>),
followed by a possibly empty string of characters, followed by
another quote.  Within the string of characters, the backslash
(<code>\\</code>) has a special meaning.  It must be followed by
one of the following characters:</p>

<ul>
<li>Another backslash.  The second backslash has no special
meaning and the two characters represent a single backslash.</li>

<li>The character 'n'.  The two characters represent a newline
('\\n' in Java).</li>

<li>A quote.  The two characters represent a quote, and that quote
is not considered to terminate the quoted value. An ending closing
quote must be present for the quoted value to be valid.</li>

<li>A question mark (?) or asterisk (*).  The two characters represent
a question mark or asterisk respectively.</li>
</ul>

<p>A quote may not appear inside a quoted value except immediately
after an odd number of consecutive backslashes.</p>

<p>The quotes surrounding a quoted value, and any backslashes
within that value, are considered to be part of the value.</p>

<p>If the <em>quoted value</em> contains at least one occurrence of
the characters asterisk or question mark and they are not preceded
by a backslash, then they are considered as wildcard characters and
the object name is a <em>property value pattern</em>. The asterisk
matches any sequence of zero or more characters, while the question
mark matches any single character.</p>

<p>An ObjectName may be a <em>property list pattern</em>. In this
case it may have zero or more keys and associated values. It matches
a nonpattern ObjectName whose domain matches and that contains the
same keys and associated values, as well as possibly other keys and
values.</p>

<p>An ObjectName is a <em>property value pattern</em> when at least
one of its <em>quoted</em> or <em>unquoted</em> key property values
contains the wildcard characters asterisk or question mark as described
above. In this case it has one or more keys and associated values, with
at least one of the values containing wildcard characters. It matches a
nonpattern ObjectName whose domain matches and that contains the same
keys whose values match; if the property value pattern is also a
property list pattern then the nonpattern ObjectName can contain
other keys and values.</p>

<p>An ObjectName is a <em>property pattern</em> if it is either a
<em>property list pattern</em> or a <em>property value pattern</em>
or both.</p>

<p>An ObjectName is a pattern if its domain contains a wildcard or
if the ObjectName is a property pattern.</p>

<p>If an ObjectName is not a pattern, it must contain at least one
key with its associated value.</p>

<p>Examples of ObjectName patterns are:</p>

<ul>
<li>{@code *:type=Foo,name=Bar} to match names in any domain whose
    exact set of keys is {@code type=Foo,name=Bar}.</li>
<li>{@code d:type=Foo,name=Bar,*} to match names in the domain
    {@code d} that have the keys {@code type=Foo,name=Bar} plus
    zero or more other keys.</li>
<li>{@code *:type=Foo,name=Bar,*} to match names in any domain
    that has the keys {@code type=Foo,name=Bar} plus zero or
    more other keys.</li>
<li>{@code d:type=F?o,name=Bar} will match e.g.
    {@code d:type=Foo,name=Bar} and {@code d:type=Fro,name=Bar}.</li>
<li>{@code d:type=F*o,name=Bar} will match e.g.
    {@code d:type=Fo,name=Bar} and {@code d:type=Frodo,name=Bar}.</li>
<li>{@code d:type=Foo,name=\"B*\"} will match e.g.
    {@code d:type=Foo,name=\"Bling\"}. Wildcards are recognized even
    inside quotes, and like other special characters can be escaped
    with {@code \\}.</li>
</ul>

<p>An ObjectName can be written as a String with the following
elements in order:</p>

<ul>
<li>The domain.
<li>A colon (<code>:</code>).
<li>A key property list as defined below.
</ul>

<p>A key property list written as a String is a comma-separated
list of elements.  Each element is either an asterisk or a key
property.  A key property consists of a key, an equals
(<code>=</code>), and the associated value.</p>

<p>At most one element of a key property list may be an asterisk.
If the key property list contains an asterisk element, the
ObjectName is a property list pattern.</p>

<p>Spaces have no special significance in a String representing an
ObjectName.  For example, the String:
<pre>
domain: key1 = value1 , key2 = value2
</pre>
represents an ObjectName with two keys.  The name of each key
contains six characters, of which the first and last are spaces.
The value associated with the key <code>\"&nbsp;key1&nbsp;\"</code>
also begins and ends with a space.

<p>In addition to the restrictions on characters spelt out above,
no part of an ObjectName may contain a newline character
(<code>'\\n'</code>), whether the domain, a key, or a value, whether
quoted or unquoted.  The newline character can be represented in a
quoted value with the sequence <code>\\n</code>.

<p>The rules on special characters and quoting apply regardless of
which constructor is used to make an ObjectName.</p>

<p>To avoid collisions between MBeans supplied by different
vendors, a useful convention is to begin the domain name with the
reverse DNS name of the organization that specifies the MBeans,
followed by a period and a string whose interpretation is
determined by that organization.  For example, MBeans specified by
<code>example.com</code>  would have
domains such as <code>com.example.MyDomain</code>.  This is essentially
the same convention as for Java-language package names.</p>

<p>The <b>serialVersionUID</b> of this class is <code>1081892073854801359L</code>.

@since 1.5

 don't complain serialVersionUID not constant"
      classrelation 3801986 // <realization>
	relation 3801986 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3801986 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3802114 // <realization>
	relation 3802114 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3802114 // <realization>
	  b parent class_ref 486402 // QueryExp
      end

      class 1190914 "Property"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2274818 "_key_index"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2274946 "_key_length"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2275074 "_value_length"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9786370 "Property"
	  package explicit_return_type ""
	  nparams 3
	    param in name "key_index" explicit_type "int"
	    param in name "key_length" explicit_type "int"
	    param in name "value_length" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.
"
	end

	operation 9786498 "setKeyIndex"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "key_index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Assigns the key index of property
"
	end

	operation 9786626 "getKeyString"
	  package return_type class_ref 128130 // String
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a key string for receiver key
"
	end

	operation 9786754 "getValueString"
	  package return_type class_ref 128130 // String
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a value string for receiver key
"
	end
      end

      class 1191042 "PatternProperty"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3802242 // <generalisation>
	  relation 3802242 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3802242 // <generalisation>
	    b parent class_ref 1190914 // Property
	end

	operation 9786882 "PatternProperty"
	  package explicit_return_type ""
	  nparams 3
	    param in name "key_index" explicit_type "int"
	    param in name "key_length" explicit_type "int"
	    param in name "value_length" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor.
"
	end
      end

      attribute 2275202 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5467795090068647408L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Inner classes <========================================
 Private fields ---------------------------------------->
 Serialization compatibility stuff -------------------->
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2275330 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1081892073854801359L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3802370 // oldSerialPersistentFields (<unidirectional association>)
	relation 3802370 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
        new ObjectStreamField(\"domain\", String.class),
        new ObjectStreamField(\"propertyList\", Hashtable.class),
        new ObjectStreamField(\"propertyListString\", String.class),
        new ObjectStreamField(\"canonicalName\", String.class),
        new ObjectStreamField(\"pattern\", Boolean.TYPE),
        new ObjectStreamField(\"propertyPattern\", Boolean.TYPE)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3802370 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3802498 // newSerialPersistentFields (<unidirectional association>)
	relation 3802498 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value " { }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3802498 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2275458 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3802626 // serialPersistentFields (<unidirectional association>)
	relation 3802626 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3802626 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2275586 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 179970 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK: exception means no compat with 1.0, too bad
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3802754 // _Empty_property_array (<unidirectional association>)
	relation 3802754 --->
	  a role_name "_Empty_property_array" multiplicity "[]" init_value " new Property[0]" class_relation const_relation private
	    comment " Serialization compatibility stuff <==============================
 Class private fields ----------------------------------->

a shared empty array for empty property lists

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3802754 // _Empty_property_array (<unidirectional association>)
	  b parent class_ref 1190914 // Property
      end

      classrelation 3802882 // _canonicalName (<unidirectional association>)
	relation 3802882 --->
	  a role_name "_canonicalName" private
	    comment " Class private fields <==============================
 Instance private fields ----------------------------------->

a String containing the canonical name

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3802882 // _canonicalName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3803010 // _kp_array (<unidirectional association>)
	relation 3803010 --->
	  a role_name "_kp_array" multiplicity "[]" private
	    comment "
An array of properties in the same seq order as time creation

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3803010 // _kp_array (<unidirectional association>)
	  b parent class_ref 1190914 // Property
      end

      classrelation 3803138 // _ca_array (<unidirectional association>)
	relation 3803138 --->
	  a role_name "_ca_array" multiplicity "[]" private
	    comment "
An array of properties in the same seq order as canonical order

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3803138 // _ca_array (<unidirectional association>)
	  b parent class_ref 1190914 // Property
      end

      attribute 2275714 "_domain_length"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The length of the domain part of built objectname

"
      end

      classrelation 3803266 // _propertyList (<unidirectional association>)
	relation 3803266 --->
	  a role_name "_propertyList" private
	    comment "
The propertyList of built object name. Initialized lazily.
Table that contains all the pairs (key,value) for this ObjectName.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,String> ${name}${value};
"
	    classrelation_ref 3803266 // _propertyList (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 2275842 "_domain_pattern"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "boolean that declares if this ObjectName domain part is a pattern

"
      end

      attribute 2275970 "_property_list_pattern"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "boolean that declares if this ObjectName contains a pattern on the
key property list

"
      end

      attribute 2276098 "_property_value_pattern"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "boolean that declares if this ObjectName contains a pattern on the
value of at least one key property

"
      end

      operation 9787010 "construct"
	private explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Instance private fields <=======================================
 Private fields <========================================
  Private methods ---------------------------------------->
 Category : Instance construction ------------------------->

Initializes this {@link ObjectName} from the given string
representation.

@param name A string representation of the {@link ObjectName}

@exception MalformedObjectNameException The string passed as a
parameter does not have the right format.
@exception NullPointerException The <code>name</code> parameter
is null.
"
      end

      operation 9787138 "construct"
	private explicit_return_type "void"
	nparams 2
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "props" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an ObjectName from a domain and a Hashtable.

@param domain Domain of the ObjectName.
@param props  Map containing couples <i>key</i> {@literal ->} <i>value</i>.

@exception MalformedObjectNameException The <code>domain</code>
contains an illegal character, or one of the keys or values in
<code>table</code> contains an illegal character, or one of the
values in <code>table</code> does not follow the rules for quoting.
@exception NullPointerException One of the parameters is null.
"
      end

      operation 9787266 "addProperty"
	private explicit_return_type "void"
	nparams 4
	  param inout name "prop" type class_ref 1190914 // Property
	  param in name "index" explicit_type "int"
	  param inout name "keys_map" type class_ref 130178 // Map
	  param inout name "key_name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String,Property> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Category : Instance construction <==============================
 Category : Internal utilities ------------------------------>

Add passed property to the list at the given index
for the passed key name
"
      end

      operation 9787394 "setCanonicalName"
	private explicit_return_type "void"
	nparams 6
	  param inout name "specified_chars" explicit_type "char"
	multiplicity "[]"
	  param inout name "canonical_chars" explicit_type "char"
	multiplicity "[]"
	  param inout name "keys" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "keys_map" type class_ref 130178 // Map
	  param in name "prop_index" explicit_type "int"
	  param in name "nb_props" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}<String,Property> ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the canonical name of receiver from input 'specified_chars'
array, by filling 'canonical_chars' array with found 'nb-props'
properties starting at position 'prop_index'.
"
      end

      operation 9787522 "parseKey"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "s" explicit_type "char"
	multiplicity "[]"
	  param in name "startKey" explicit_type "int"
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}[] ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse a key.
<pre>final int endKey=parseKey(s,startKey);</pre>
<p>key starts at startKey (included), and ends at endKey (excluded).
If (startKey == endKey), then the key is empty.

@param s The char array of the original string.
@param startKey index at which to begin parsing.
@return The index following the last character of the key.
"
      end

      operation 9787650 "parseValue"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "s" explicit_type "char"
	multiplicity "[]"
	  param in name "startValue" explicit_type "int"
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}final ${t0}[] ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse a value.
<pre>final int endVal=parseValue(s,startVal);</pre>
<p>value starts at startVal (included), and ends at endVal (excluded).
If (startVal == endVal), then the key is empty.

@param s The char array of the original string.
@param startValue index at which to begin parsing.
@return The first element of the int array indicates the index
        following the last character of the value. The second
        element of the int array indicates that the value is
        a pattern when its value equals 1.
"
      end

      operation 9787778 "checkValue"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if the supplied value is a valid value.

@return true if the value is a pattern, otherwise false.
"
      end

      operation 9787906 "checkKey"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if the supplied key is a valid key.
"
      end

      operation 9788034 "isDomain"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "domain" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Category : Internal utilities <==============================
 Category : Internal accessors ------------------------------>

Check if domain is a valid domain.  Set _domain_pattern if appropriate.
"
      end

      operation 9788162 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Category : Internal accessors <==============================
 Category : Serialization ----------------------------------->

Deserializes an {@link ObjectName} from an {@link ObjectInputStream}.
@serialData <ul>
              <li>In the current serial form (value of property
                  <code>jmx.serial.form</code> differs from
                  <code>1.0</code>): the string
                  &quot;&lt;domain&gt;:&lt;properties&gt;&lt;wild&gt;&quot;,
                  where: <ul>
                           <li>&lt;domain&gt; represents the domain part
                               of the {@link ObjectName}</li>
                           <li>&lt;properties&gt; represents the list of
                               properties, as returned by
                               {@link #getKeyPropertyListString}
                           <li>&lt;wild&gt; is empty if not
                               <code>isPropertyPattern</code>, or
                               is the character \"<code>*</code>\" if
                               <code>isPropertyPattern</code>
                               and &lt;properties&gt; is empty, or
                               is \"<code>,*</code>\" if
                               <code>isPropertyPattern</code> and
                               &lt;properties&gt; is not empty.
                           </li>
                         </ul>
                  The intent is that this string could be supplied
                  to the {@link #ObjectName(String)} constructor to
                  produce an equivalent {@link ObjectName}.
              </li>
              <li>In the old serial form (value of property
                  <code>jmx.serial.form</code> is
                  <code>1.0</code>): &lt;domain&gt; &lt;propertyList&gt;
                  &lt;propertyListString&gt; &lt;canonicalName&gt;
                  &lt;pattern&gt; &lt;propertyPattern&gt;,
                  where: <ul>
                           <li>&lt;domain&gt; represents the domain part
                               of the {@link ObjectName}</li>
                           <li>&lt;propertyList&gt; is the
                               {@link Hashtable} that contains all the
                               pairs (key,value) for this
                               {@link ObjectName}</li>
                           <li>&lt;propertyListString&gt; is the
                               {@link String} representation of the
                               list of properties in any order (not
                               mandatorily a canonical representation)
                               </li>
                           <li>&lt;canonicalName&gt; is the
                               {@link String} containing this
                               {@link ObjectName}'s canonical name</li>
                           <li>&lt;pattern&gt; is a boolean which is
                               <code>true</code> if this
                               {@link ObjectName} contains a pattern</li>
                           <li>&lt;propertyPattern&gt; is a boolean which
                               is <code>true</code> if this
                               {@link ObjectName} contains a pattern in
                               the list of properties</li>
                         </ul>
              </li>
            </ul>
"
      end

      operation 9788290 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes an {@link ObjectName} to an {@link ObjectOutputStream}.
@serialData <ul>
              <li>In the current serial form (value of property
                  <code>jmx.serial.form</code> differs from
                  <code>1.0</code>): the string
                  &quot;&lt;domain&gt;:&lt;properties&gt;&lt;wild&gt;&quot;,
                  where: <ul>
                           <li>&lt;domain&gt; represents the domain part
                               of the {@link ObjectName}</li>
                           <li>&lt;properties&gt; represents the list of
                               properties, as returned by
                               {@link #getKeyPropertyListString}
                           <li>&lt;wild&gt; is empty if not
                               <code>isPropertyPattern</code>, or
                               is the character \"<code>*</code>\" if
                               this <code>isPropertyPattern</code>
                               and &lt;properties&gt; is empty, or
                               is \"<code>,*</code>\" if
                               <code>isPropertyPattern</code> and
                               &lt;properties&gt; is not empty.
                           </li>
                         </ul>
                  The intent is that this string could be supplied
                  to the {@link #ObjectName(String)} constructor to
                  produce an equivalent {@link ObjectName}.
              </li>
              <li>In the old serial form (value of property
                  <code>jmx.serial.form</code> is
                  <code>1.0</code>): &lt;domain&gt; &lt;propertyList&gt;
                  &lt;propertyListString&gt; &lt;canonicalName&gt;
                  &lt;pattern&gt; &lt;propertyPattern&gt;,
                  where: <ul>
                           <li>&lt;domain&gt; represents the domain part
                               of the {@link ObjectName}</li>
                           <li>&lt;propertyList&gt; is the
                               {@link Hashtable} that contains all the
                               pairs (key,value) for this
                               {@link ObjectName}</li>
                           <li>&lt;propertyListString&gt; is the
                               {@link String} representation of the
                               list of properties in any order (not
                               mandatorily a canonical representation)
                               </li>
                           <li>&lt;canonicalName&gt; is the
                               {@link String} containing this
                               {@link ObjectName}'s canonical name</li>
                           <li>&lt;pattern&gt; is a boolean which is
                               <code>true</code> if this
                               {@link ObjectName} contains a pattern</li>
                           <li>&lt;propertyPattern&gt; is a boolean which
                               is <code>true</code> if this
                               {@link ObjectName} contains a pattern in
                               the list of properties</li>
                         </ul>
              </li>
            </ul>
"
      end

      operation 9788418 "getInstance"
	class_operation public return_type class_ref 485506 // ObjectName
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 499330 // MalformedObjectNameException
	  exception class_ref 521346 // NullPointerException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Category : Serialization <===================================
 Private methods <========================================
 Public methods ---------------------------------------->
 Category : ObjectName Construction ------------------------------>

<p>Return an instance of ObjectName that can be used anywhere
an object obtained with {@link #ObjectName(String) new
ObjectName(name)} can be used.  The returned object may be of
a subclass of ObjectName.  Calling this method twice with the
same parameters may return the same object or two equal but
not identical objects.</p>

@param name  A string representation of the object name.

@return an ObjectName corresponding to the given String.

@exception MalformedObjectNameException The string passed as a
parameter does not have the right format.
@exception NullPointerException The <code>name</code> parameter
is null.

"
      end

      operation 9788546 "getInstance"
	class_operation public return_type class_ref 485506 // ObjectName
	nparams 3
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return an instance of ObjectName that can be used anywhere
an object obtained with {@link #ObjectName(String, String,
String) new ObjectName(domain, key, value)} can be used.  The
returned object may be of a subclass of ObjectName.  Calling
this method twice with the same parameters may return the same
object or two equal but not identical objects.</p>

@param domain  The domain part of the object name.
@param key  The attribute in the key property of the object name.
@param value The value in the key property of the object name.

@return an ObjectName corresponding to the given domain,
key, and value.

@exception MalformedObjectNameException The
<code>domain</code>, <code>key</code>, or <code>value</code>
contains an illegal character, or <code>value</code> does not
follow the rules for quoting.
@exception NullPointerException One of the parameters is null.

"
      end

      operation 9788674 "getInstance"
	class_operation public return_type class_ref 485506 // ObjectName
	nparams 2
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "table" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return an instance of ObjectName that can be used anywhere
an object obtained with {@link #ObjectName(String, Hashtable)
new ObjectName(domain, table)} can be used.  The returned
object may be of a subclass of ObjectName.  Calling this method
twice with the same parameters may return the same object or
two equal but not identical objects.</p>

@param domain  The domain part of the object name.
@param table A hash table containing one or more key
properties.  The key of each entry in the table is the key of a
key property in the object name.  The associated value in the
table is the associated value in the object name.

@return an ObjectName corresponding to the given domain and
key mappings.

@exception MalformedObjectNameException The <code>domain</code>
contains an illegal character, or one of the keys or values in
<code>table</code> contains an illegal character, or one of the
values in <code>table</code> does not follow the rules for
quoting.
@exception NullPointerException One of the parameters is null.

"
      end

      operation 9788802 "getInstance"
	class_operation public return_type class_ref 485506 // ObjectName
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return an instance of ObjectName that can be used anywhere
the given object can be used.  The returned object may be of a
subclass of ObjectName.  If <code>name</code> is of a subclass
of ObjectName, it is not guaranteed that the returned object
will be of the same class.</p>

<p>The returned value may or may not be identical to
<code>name</code>.  Calling this method twice with the same
parameters may return the same object or two equal but not
identical objects.</p>

<p>Since ObjectName is immutable, it is not usually useful to
make a copy of an ObjectName.  The principal use of this method
is to guard against a malicious caller who might pass an
instance of a subclass with surprising behavior to sensitive
code.  Such code can call this method to obtain an ObjectName
that is known not to have surprising behavior.</p>

@param name an instance of the ObjectName class or of a subclass

@return an instance of ObjectName or a subclass that is known to
have the same semantics.  If <code>name</code> respects the
semantics of ObjectName, then the returned object is equal
(though not necessarily identical) to <code>name</code>.

@exception NullPointerException The <code>name</code> is null.

"
      end

      operation 9788930 "ObjectName"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an object name from the given string.

@param name  A string representation of the object name.

@exception MalformedObjectNameException The string passed as a
parameter does not have the right format.
@exception NullPointerException The <code>name</code> parameter
is null.
"
      end

      operation 9789058 "ObjectName"
	public explicit_return_type ""
	nparams 3
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "key" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an object name with exactly one key property.

@param domain  The domain part of the object name.
@param key  The attribute in the key property of the object name.
@param value The value in the key property of the object name.

@exception MalformedObjectNameException The
<code>domain</code>, <code>key</code>, or <code>value</code>
contains an illegal character, or <code>value</code> does not
follow the rules for quoting.
@exception NullPointerException One of the parameters is null.
"
      end

      operation 9789186 "ObjectName"
	public explicit_return_type ""
	nparams 2
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "table" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<String,String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an object name with several key properties from a Hashtable.

@param domain  The domain part of the object name.
@param table A hash table containing one or more key
properties.  The key of each entry in the table is the key of a
key property in the object name.  The associated value in the
table is the associated value in the object name.

@exception MalformedObjectNameException The <code>domain</code>
contains an illegal character, or one of the keys or values in
<code>table</code> contains an illegal character, or one of the
values in <code>table</code> does not follow the rules for
quoting.
@exception NullPointerException One of the parameters is null.
"
      end

      operation 9789314 "isPattern"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Category : ObjectName Construction <==============================
 Category : Getter methods ------------------------------>

Checks whether the object name is a pattern.
<p>
An object name is a pattern if its domain contains a
wildcard or if the object name is a property pattern.

@return  True if the name is a pattern, otherwise false.
"
      end

      operation 9789442 "isDomainPattern"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the object name is a pattern on the domain part.

@return  True if the name is a domain pattern, otherwise false.

"
      end

      operation 9789570 "isPropertyPattern"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the object name is a pattern on the key properties.
<p>
An object name is a pattern on the key properties if it is a
pattern on the key property list (e.g. \"d:k=v,*\") or on the
property values (e.g. \"d:k=*\") or on both (e.g. \"d:k=*,*\").

@return  True if the name is a property pattern, otherwise false.
"
      end

      operation 9789698 "isPropertyListPattern"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the object name is a pattern on the key property list.
<p>
For example, \"d:k=v,*\" and \"d:k=*,*\" are key property list patterns
whereas \"d:k=*\" is not.

@return  True if the name is a property list pattern, otherwise false.

@since 1.6
"
      end

      operation 9789826 "isPropertyValuePattern"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the object name is a pattern on the value part
of at least one of the key properties.
<p>
For example, \"d:k=*\" and \"d:k=*,*\" are property value patterns
whereas \"d:k=v,*\" is not.

@return  True if the name is a property value pattern, otherwise false.

@since 1.6
"
      end

      operation 9789954 "isPropertyValuePattern"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "property" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the value associated with a key in a key
property is a pattern.

@param property The property whose value is to be checked.

@return True if the value associated with the given key property
is a pattern, otherwise false.

@exception NullPointerException If <code>property</code> is null.
@exception IllegalArgumentException If <code>property</code> is not
a valid key property for this ObjectName.

@since 1.6
"
      end

      operation 9790082 "getCanonicalName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the canonical form of the name; that is, a string
representation where the properties are sorted in lexical
order.</p>

<p>More precisely, the canonical form of the name is a String
consisting of the <em>domain part</em>, a colon
(<code>:</code>), the <em>canonical key property list</em>, and
a <em>pattern indication</em>.</p>

<p>The <em>canonical key property list</em> is the same string
as described for {@link #getCanonicalKeyPropertyListString()}.</p>

<p>The <em>pattern indication</em> is:
<ul>
<li>empty for an ObjectName
that is not a property list pattern;
<li>an asterisk for an ObjectName
that is a property list pattern with no keys; or
<li>a comma and an
asterisk (<code>,*</code>) for an ObjectName that is a property
list pattern with at least one key.
</ul>

@return The canonical form of the name.
"
      end

      operation 9790210 "getDomain"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the domain part.

@return The domain.
"
      end

      operation 9790338 "getKeyProperty"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "property" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the value associated with a key in a key property.

@param property The property whose value is to be obtained.

@return The value of the property, or null if there is no such
property in this ObjectName.

@exception NullPointerException If <code>property</code> is null.
"
      end

      operation 9790466 "_getKeyPropertyList"
	private return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the key properties as a Map.  The returned
value is a Map in which each key is a key in the
ObjectName's key property list and each value is the associated
value.</p>

<p>The returned value must not be modified.</p>

@return The table of key properties.
"
      end

      operation 9790594 "getKeyPropertyList"
	public return_type class_ref 137090 // Hashtable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the key properties as a Hashtable.  The returned
value is a Hashtable in which each key is a key in the
ObjectName's key property list and each value is the associated
value.</p>

<p>The returned value may be unmodifiable.  If it is
modifiable, changing it has no effect on this ObjectName.</p>

@return The table of key properties.

 CR 6441274 depends on the modification property defined above"
      end

      operation 9790722 "getKeyPropertyListString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a string representation of the list of key
properties specified at creation time.  If this ObjectName was
constructed with the constructor {@link #ObjectName(String)},
the key properties in the returned String will be in the same
order as in the argument to the constructor.</p>

@return The key property list string.  This string is
independent of whether the ObjectName is a pattern.
"
      end

      operation 9790850 "getSerializedNameString"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the serialized string of the ObjectName.
properties specified at creation time.  If this ObjectName was
constructed with the constructor {@link #ObjectName(String)},
the key properties in the returned String will be in the same
order as in the argument to the constructor.</p>

@return The key property list string.  This string is
independent of whether the ObjectName is a pattern.
"
      end

      operation 9790978 "writeKeyPropertyListString"
	private explicit_return_type "int"
	nparams 3
	  param inout name "canonicalChars" explicit_type "char"
	multiplicity "[]"
	  param inout name "data" explicit_type "char"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Write a string representation of the list of key
properties specified at creation time in the given array, starting
at the specified offset.  If this ObjectName was
constructed with the constructor {@link #ObjectName(String)},
the key properties in the returned String will be in the same
order as in the argument to the constructor.</p>

@return offset + #of chars written
"
      end

      operation 9791106 "getCanonicalKeyPropertyListString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the list of key properties,
in which the key properties are sorted in lexical order. This
is used in lexicographic comparisons performed in order to
select MBeans based on their key property list.  Lexical order
is the order implied by {@link String#compareTo(String)
String.compareTo(String)}.

@return The canonical key property list string.  This string is
independent of whether the ObjectName is a pattern.
"
      end

      operation 9791234 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Category : Getter methods <===================================
 Category : Utilities ---------------------------------------->

<p>Returns a string representation of the object name.  The
format of this string is not specified, but users can expect
that two ObjectNames return the same string if and only if they
are equal.</p>

@return a string representation of this object name.
"
      end

      operation 9791362 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the current object name with another object name.  Two
ObjectName instances are equal if and only if their canonical
forms are equal.  The canonical form is the string described
for {@link #getCanonicalName()}.

@param object  The object name that the current object name is to be
       compared with.

@return True if <code>object</code> is an ObjectName whose
canonical form is equal to that of this ObjectName.
"
      end

      operation 9791490 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a hash code for this object name.

"
      end

      operation 9791618 "quote"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a quoted form of the given String, suitable for
inclusion in an ObjectName.  The returned value can be used as
the value associated with a key in an ObjectName.  The String
<code>s</code> may contain any character.  Appropriate quoting
ensures that the returned value is legal in an ObjectName.</p>

<p>The returned value consists of a quote ('\"'), a sequence of
characters corresponding to the characters of <code>s</code>,
and another quote.  Characters in <code>s</code> appear
unchanged within the returned value except:</p>

<ul>
<li>A quote ('\"') is replaced by a backslash (\\) followed by a quote.</li>
<li>An asterisk ('*') is replaced by a backslash (\\) followed by an
asterisk.</li>
<li>A question mark ('?') is replaced by a backslash (\\) followed by
a question mark.</li>
<li>A backslash ('\\') is replaced by two backslashes.</li>
<li>A newline character (the character '\\n' in Java) is replaced
by a backslash followed by the character '\\n'.</li>
</ul>

@param s the String to be quoted.

@return the quoted String.

@exception NullPointerException if <code>s</code> is null.

"
      end

      operation 9791746 "unquote"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "q" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns an unquoted form of the given String.  If
<code>q</code> is a String returned by {@link #quote quote(s)},
then <code>unquote(q).equals(s)</code>.  If there is no String
<code>s</code> for which <code>quote(s).equals(q)</code>, then
unquote(q) throws an IllegalArgumentException.</p>

<p>These rules imply that there is a one-to-one mapping between
quoted and unquoted forms.</p>

@param q the String to be unquoted.

@return the unquoted String.

@exception IllegalArgumentException if <code>q</code> could not
have been returned by the {@link #quote} method, for instance
if it does not begin and end with a quote (\").

@exception NullPointerException if <code>q</code> is null.

"
      end

      classrelation 3803394 // WILDCARD (<unidirectional association>)
	relation 3803394 --->
	  a role_name "WILDCARD" init_value " Util.newObjectName(\"*:*\")" class_relation const_relation public
	    comment "
Defines the wildcard \"*:*\" ObjectName.

@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3803394 // WILDCARD (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end

      operation 9791874 "apply"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Category : Utilities <===================================
 Category : QueryExp Interface ---------------------------------------->

<p>Test whether this ObjectName, which may be a pattern,
matches another ObjectName.  If <code>name</code> is a pattern,
the result is false.  If this ObjectName is a pattern, the
result is true if and only if <code>name</code> matches the
pattern.  If neither this ObjectName nor <code>name</code> is
a pattern, the result is true if and only if the two
ObjectNames are equal as described for the {@link
#equals(Object)} method.</p>

@param name The name of the MBean to compare to.

@return True if <code>name</code> matches this ObjectName.

@exception NullPointerException if <code>name</code> is null.

"
      end

      operation 9792002 "matchDomains"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9792130 "matchKeys"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9792258 "setMBeanServer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mbs" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Method inherited from QueryExp, no implementation needed here
because ObjectName is not relative to an MBeanServer and does
not contain a subquery.
"
      end

      operation 9792386 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Category : QueryExp Interface <=========================
 Category : Comparable Interface ---------------------------------------->

<p>Compares two ObjectName instances. The ordering relation between
ObjectNames is not completely specified but is intended to be such
that a sorted list of ObjectNames will appear in an order that is
convenient for a person to read.</p>

<p>In particular, if the two ObjectName instances have different
domains then their order is the lexicographical order of the domains.
The ordering of the key property list remains unspecified.</p>

<p>For example, the ObjectName instances below:</p>
<ul>
<li>Shapes:type=Square,name=3</li>
<li>Colors:type=Red,name=2</li>
<li>Shapes:type=Triangle,side=isosceles,name=2</li>
<li>Colors:type=Red,name=1</li>
<li>Shapes:type=Square,name=1</li>
<li>Colors:type=Blue,name=1</li>
<li>Shapes:type=Square,name=2</li>
<li>JMImplementation:type=MBeanServerDelegate</li>
<li>Shapes:type=Triangle,side=scalene,name=1</li>
</ul>
<p>could be ordered as follows:</p>
<ul>
<li>Colors:type=Blue,name=1</li>
<li>Colors:type=Red,name=1</li>
<li>Colors:type=Red,name=2</li>
<li>JMImplementation:type=MBeanServerDelegate</li>
<li>Shapes:type=Square,name=1</li>
<li>Shapes:type=Square,name=2</li>
<li>Shapes:type=Square,name=3</li>
<li>Shapes:type=Triangle,side=scalene,name=1</li>
<li>Shapes:type=Triangle,side=isosceles,name=2</li>
</ul>

@param name the ObjectName to be compared.

@return a negative integer, zero, or a positive integer as this
        ObjectName is less than, equal to, or greater than the
        specified ObjectName.

@since 1.6
"
      end
    end

    class 485634 "ReflectionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents exceptions thrown in the MBean server when using the
java.lang.reflect classes to invoke methods on MBeans. It \"wraps\" the
actual java.lang.Exception thrown.

@since 1.5
"
      classrelation 3804418 // <generalisation>
	relation 3804418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3804418 // <generalisation>
	  b parent class_ref 1186690 // JMException
      end

      attribute 2277634 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 9170809325636915553L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3804546 // exception (<unidirectional association>)
	relation 3804546 --->
	  a role_name "exception" private
	    comment "
@serial The wrapped {@link Exception}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3804546 // exception (<unidirectional association>)
	  b parent class_ref 132226 // Exception
      end

      operation 9798146 "ReflectionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <CODE>ReflectionException</CODE> that wraps the actual <CODE>java.lang.Exception</CODE>.

@param e the wrapped exception.
"
      end

      operation 9798274 "ReflectionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 132226 // Exception
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <CODE>ReflectionException</CODE> that wraps the actual <CODE>java.lang.Exception</CODE> with
a detail message.

@param e the wrapped exception.
@param message the detail message.
"
      end

      operation 9798402 "getTargetException"
	public return_type class_ref 132226 // Exception
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the actual {@link Exception} thrown.

@return the wrapped {@link Exception}.
"
      end

      operation 9798530 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the actual {@link Exception} thrown.

@return the wrapped {@link Exception}.
"
      end
    end

    class 485762 "InstanceAlreadyExistsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The MBean is already registered in the repository.

@since 1.5
"
      classrelation 3786754 // <generalisation>
	relation 3786754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3786754 // <generalisation>
	  b parent class_ref 487682 // OperationsException
      end

      attribute 2264962 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8893743928912733931L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9755650 "InstanceAlreadyExistsException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9755778 "InstanceAlreadyExistsException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param message the detail message.
"
      end
    end

    class 485890 "MBeanRegistrationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Wraps exceptions thrown by the preRegister(), preDeregister() methods
of the <CODE>MBeanRegistration</CODE> interface.

@since 1.5
"
      classrelation 3796098 // <generalisation>
	relation 3796098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3796098 // <generalisation>
	  b parent class_ref 486018 // MBeanException
      end

      attribute 2271618 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4482382455277067805L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9773314 "MBeanRegistrationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <CODE>MBeanRegistrationException</CODE> that wraps
the actual <CODE>java.lang.Exception</CODE>.

@param e the wrapped exception.
"
      end

      operation 9773442 "MBeanRegistrationException"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 132226 // Exception
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <CODE>MBeanRegistrationException</CODE> that wraps
the actual <CODE>java.lang.Exception</CODE> with a detailed
message.

@param e the wrapped exception.
@param message the detail message.
"
      end
    end

    class 486018 "MBeanException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents \"user defined\" exceptions thrown by MBean methods
in the agent. It \"wraps\" the actual \"user defined\" exception thrown.
This exception will be built by the MBeanServer when a call to an
MBean method results in an unknown exception.

@since 1.5
"
      classrelation 3791618 // <generalisation>
	relation 3791618 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3791618 // <generalisation>
	  b parent class_ref 1186690 // JMException
      end

      attribute 2267010 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4066342430588744142L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3791746 // exception (<unidirectional association>)
	relation 3791746 --->
	  a role_name "exception" private
	    comment "
@serial Encapsulated {@link Exception}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3791746 // exception (<unidirectional association>)
	  b parent class_ref 132226 // Exception
      end

      operation 9763714 "MBeanException"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <CODE>MBeanException</CODE> that wraps the actual <CODE>java.lang.Exception</CODE>.

@param e the wrapped exception.
"
      end

      operation 9763842 "MBeanException"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 132226 // Exception
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <CODE>MBeanException</CODE> that wraps the actual <CODE>java.lang.Exception</CODE> with
a detail message.

@param e the wrapped exception.
@param message the detail message.
"
      end

      operation 9763970 "getTargetException"
	public return_type class_ref 132226 // Exception
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the actual {@link Exception} thrown.

@return the wrapped exception.
"
      end

      operation 9764098 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the actual {@link Exception} thrown.

@return the wrapped exception.
"
      end
    end

    class 486146 "NotCompliantMBeanException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception which occurs when trying to register an  object in the MBean server that is not a JMX compliant MBean.

@since 1.5
"
      classrelation 3798274 // <generalisation>
	relation 3798274 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3798274 // <generalisation>
	  b parent class_ref 487682 // OperationsException
      end

      attribute 2273794 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5175579583207963577L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9780354 "NotCompliantMBeanException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9780482 "NotCompliantMBeanException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param message the detail message.
"
      end
    end

    class 486274 "InstanceNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The specified MBean does not exist in the repository.

@since 1.5
"
      classrelation 3786882 // <generalisation>
	relation 3786882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3786882 // <generalisation>
	  b parent class_ref 487682 // OperationsException
      end

      attribute 2265090 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -882579438394773049L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9755906 "InstanceNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9756034 "InstanceNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param message the detail message.
"
      end
    end

    class 486402 "QueryExp"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Represents relational constraints similar to database query \"where
clauses\". Instances of QueryExp are returned by the static methods of the
{@link Query} class.</p>

<p>It is possible, but not
recommended, to create custom queries by implementing this
interface.  In that case, it is better to extend the {@link
QueryEval} class than to implement the interface directly, so that
the {@link #setMBeanServer} method works correctly.

@see MBeanServer#queryNames MBeanServer.queryNames
@since 1.5
"
      classrelation 985858 // <generalisation>
	relation 985858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 985858 // <generalisation>
	  b parent class_ref 136578 // Serializable
      end

      operation 3005570 "apply"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the QueryExp on an MBean.

@param name The name of the MBean on which the QueryExp will be applied.

@return  True if the query was successfully applied to the MBean, false otherwise

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 3005698 "setMBeanServer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 485122 // MBeanServer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the MBean server on which the query is to be performed.

@param s The MBean server on which the query is to be performed.
"
      end
    end

    class 486530 "AttributeNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The specified attribute does not exist or cannot be retrieved.

@since 1.5
"
      classrelation 3781890 // <generalisation>
	relation 3781890 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3781890 // <generalisation>
	  b parent class_ref 487682 // OperationsException
      end

      attribute 2262658 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6511584241791106926L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9742338 "AttributeNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9742466 "AttributeNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param message detail message.
"
      end
    end

    class 486658 "AttributeList"
      visibility public 
      nactuals 1
      actual class class_ref 186498 // ArrayList
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Represents a list of values for attributes of an MBean.  See the
{@link MBeanServerConnection#getAttributes getAttributes} and
{@link MBeanServerConnection#setAttributes setAttributes} methods of
{@link MBeanServer} and {@link MBeanServerConnection}.</p>

<p id=\"type-safe\">For compatibility reasons, it is possible, though
highly discouraged, to add objects to an {@code AttributeList} that are
not instances of {@code Attribute}.  However, an {@code AttributeList}
can be made <em>type-safe</em>, which means that an attempt to add
an object that is not an {@code Attribute} will produce an {@code
IllegalArgumentException}.  An {@code AttributeList} becomes type-safe
when the method {@link #asList()} is called on it.</p>

@since 1.5

 We cannot extend ArrayList<Attribute> because our legacy
add(Attribute) method would then override add(E) in ArrayList<E>,
and our return value is void whereas ArrayList.add(E)'s is boolean.
Likewise for set(int,Attribute).  Grrr.  We cannot use covariance
to override the most important methods and have them return
Attribute, either, because that would break subclasses that
override those methods in turn (using the original return type
of Object).  Finally, we cannot implement Iterable<Attribute>
so you could write
for (Attribute a : attributeList)
because ArrayList<> implements Iterable<> and the same class cannot
implement two versions of a generic interface.  Instead we provide
the asList() method so you can write
for (Attribute a : attributeList.asList())
"
      classrelation 3781506 // <realization>
	relation 3781506 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3781506 // <realization>
	  b parent class_ref 186498 // ArrayList
      end

      attribute 2262018 "typeSafe"
	volatile private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2262146 "tainted"
	volatile private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2262274 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4077085769279709076L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9739650 "AttributeList"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty <CODE>AttributeList</CODE>.
"
      end

      operation 9739778 "AttributeList"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty <CODE>AttributeList</CODE> with
the initial capacity specified.

@param initialCapacity the initial capacity of the
<code>AttributeList</code>, as specified by {@link
ArrayList#ArrayList(int)}.
"
      end

      operation 9739906 "AttributeList"
	public explicit_return_type ""
	nparams 1
	  param inout name "list" type class_ref 486658 // AttributeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>AttributeList</CODE> containing the
elements of the <CODE>AttributeList</CODE> specified, in the
order in which they are returned by the
<CODE>AttributeList</CODE>'s iterator.  The
<CODE>AttributeList</CODE> instance has an initial capacity of
110% of the size of the <CODE>AttributeList</CODE> specified.

@param list the <code>AttributeList</code> that defines the initial
contents of the new <code>AttributeList</code>.

@see ArrayList#ArrayList(java.util.Collection)
"
      end

      operation 9740034 "AttributeList"
	public explicit_return_type ""
	nparams 1
	  param inout name "list" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Attribute> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code AttributeList} containing the elements of the
{@code List} specified, in the order in which they are returned by
the {@code List}'s iterator.

@param list the {@code List} that defines the initial contents of
the new {@code AttributeList}.

@exception IllegalArgumentException if the {@code list} parameter
is {@code null} or if the {@code list} parameter contains any
non-Attribute objects.

@see ArrayList#ArrayList(java.util.Collection)

@since 1.6
"
      end

      operation 9740162 "asList"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Return a view of this list as a {@code List<Attribute>}.
Changes to the returned value are reflected by changes
to the original {@code AttributeList} and vice versa.

@return a {@code List<Attribute>} whose contents
reflect the contents of this {@code AttributeList}.

<p>If this method has ever been called on a given
{@code AttributeList} instance, a subsequent attempt to add
an object to that instance which is not an {@code Attribute}
will fail with a {@code IllegalArgumentException}. For compatibility
reasons, an {@code AttributeList} on which this method has never
been called does allow objects other than {@code Attribute}s to
be added.</p>

@throws IllegalArgumentException if this {@code AttributeList} contains
an element that is not an {@code Attribute}.

@since 1.6
"
      end

      operation 9740290 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "object" type class_ref 486786 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the {@code Attribute} specified as the last element of the list.

@param object  The attribute to be added.
"
      end

      operation 9740418 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "object" type class_ref 486786 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the attribute specified as an element at the position specified.
Elements with an index greater than or equal to the current position are
shifted up. If the index is out of range {@literal (index < 0 || index >
size())} a RuntimeOperationsException should be raised, wrapping the
java.lang.IndexOutOfBoundsException thrown.

@param object  The <CODE>Attribute</CODE> object to be inserted.
@param index The position in the list where the new {@code Attribute}
object is to be inserted.
"
      end

      operation 9740546 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "object" type class_ref 486786 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element at the position specified to be the attribute specified.
The previous element at that position is discarded. If the index is
out of range {@literal (index < 0 || index > size())} a RuntimeOperationsException
should be raised, wrapping the java.lang.IndexOutOfBoundsException thrown.

@param object  The value to which the attribute element should be set.
@param index  The position specified.
"
      end

      operation 9740674 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "list" type class_ref 486658 // AttributeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all the elements in the <CODE>AttributeList</CODE> specified to
the end of the list, in the order in which they are returned by the
Iterator of the <CODE>AttributeList</CODE> specified.

@param list  Elements to be inserted into the list.

@return true if this list changed as a result of the call.

@see ArrayList#addAll(java.util.Collection)
"
      end

      operation 9740802 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "list" type class_ref 486658 // AttributeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the <CODE>AttributeList</CODE> specified
into this list, starting at the specified position, in the order in which
they are returned by the Iterator of the {@code AttributeList} specified.
If the index is out of range {@literal (index < 0 || index > size())} a
RuntimeOperationsException should be raised, wrapping the
java.lang.IndexOutOfBoundsException thrown.

@param list  Elements to be inserted into the list.
@param index  Position at which to insert the first element from the
<CODE>AttributeList</CODE> specified.

@return true if this list changed as a result of the call.

@see ArrayList#addAll(int, java.util.Collection)
"
      end

      operation 9740930 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "element" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Override all of the methods from ArrayList<Object> that might add
a non-Attribute to the List, and disallow that if asList has ever
been called on this instance.


{@inheritDoc}
@throws IllegalArgumentException if this {@code AttributeList} is
<a href=\"#type-safe\">type-safe</a> and {@code element} is not an
{@code Attribute}.
"
      end

      operation 9741058 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws IllegalArgumentException if this {@code AttributeList} is
<a href=\"#type-safe\">type-safe</a> and {@code element} is not an
{@code Attribute}.
"
      end

      operation 9741186 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws IllegalArgumentException if this {@code AttributeList} is
<a href=\"#type-safe\">type-safe</a> and {@code c} contains an
element that is not an {@code Attribute}.
"
      end

      operation 9741314 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws IllegalArgumentException if this {@code AttributeList} is
<a href=\"#type-safe\">type-safe</a> and {@code c} contains an
element that is not an {@code Attribute}.
"
      end

      operation 9741442 "set"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws IllegalArgumentException if this {@code AttributeList} is
<a href=\"#type-safe\">type-safe</a> and {@code element} is not an
{@code Attribute}.
"
      end

      operation 9741570 "adding"
	private explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9741698 "adding"
	private explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 486786 "Attribute"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an MBean attribute by associating its name with its value.
The MBean server and other objects use this class to get and set attributes values.

@since 1.5
"
      classrelation 3779970 // <realization>
	relation 3779970 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3779970 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2261634 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2484220110589082382L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3780098 // name (<unidirectional association>)
	relation 3780098 --->
	  a role_name "name" private
	    comment "
@serial Attribute name.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3780098 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3780226 // value (<unidirectional association>)
	relation 3780226 --->
	  a role_name "value" init_value " null" private
	    comment "
@serial Attribute value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3780226 // value (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 9737474 "Attribute"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an Attribute object which associates the given attribute name with the given value.

@param name A String containing the name of the attribute to be created. Cannot be null.
@param value The Object which is assigned to the attribute. This object must be of the same type as the attribute.

"
      end

      operation 9737602 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String containing the  name of the attribute.

@return the name of the attribute.
"
      end

      operation 9737730 "getValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an Object that is the value of this attribute.

@return the value of the attribute.
"
      end

      operation 9737858 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the current Attribute Object with another Attribute Object.

@param object  The Attribute that the current Attribute is to be compared with.

@return  True if the two Attribute objects are equal, otherwise false.
"
      end

      operation 9737986 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code value for this attribute.

@return a hash code value for this attribute.
"
      end

      operation 9738114 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String object representing this Attribute's value. The format of this
string is not specified, but users can expect that two Attributes return the
same string if and only if they are equal.
"
      end
    end

    class 486914 "InvalidAttributeValueException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The value specified is not valid for the attribute.

@since 1.5
"
      classrelation 3787778 // <generalisation>
	relation 3787778 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3787778 // <generalisation>
	  b parent class_ref 487682 // OperationsException
      end

      attribute 2265602 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2164571879317142449L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9757058 "InvalidAttributeValueException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9757186 "InvalidAttributeValueException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param message the detail message.
"
      end
    end

    class 487042 "NotificationListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Should be implemented by an object that wants to receive notifications.

@since 1.5
"
      classrelation 962946 // <generalisation>
	relation 962946 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 962946 // <generalisation>
	  b parent class_ref 314882 // EventListener
      end

      operation 2932610 "handleNotification"
	public explicit_return_type "void"
	nparams 2
	  param inout name "notification" type class_ref 488706 // Notification
	  param inout name "handback" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a JMX notification occurs.
The implementation of this method should return as soon as possible, to avoid
blocking its notification broadcaster.

@param notification The notification.
@param handback An opaque object which helps the listener to associate
information regarding the MBean emitter. This object is passed to the
addNotificationListener call and resent, without modification, to the
listener.
"
      end
    end

    class 487170 "NotificationFilter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "To be implemented by a any class acting as a notification filter.
It allows a registered notification listener to filter the notifications of interest.

@since 1.5
"
      classrelation 3781122 // <generalisation>
	relation 3781122 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3781122 // <generalisation>
	  b parent class_ref 136578 // Serializable
      end

      operation 9738882 "isNotificationEnabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "notification" type class_ref 488706 // Notification
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked before sending the specified notification to the listener.

@param notification The notification to be sent.
@return <CODE>true</CODE> if the notification has to be sent to the listener, <CODE>false</CODE> otherwise.
"
      end
    end

    class 487298 "ListenerNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The specified MBean listener does not exist in the repository.

@since 1.5
"
      classrelation 3789186 // <generalisation>
	relation 3789186 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3789186 // <generalisation>
	  b parent class_ref 487682 // OperationsException
      end

      attribute 2265730 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7242605822448519061L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9758210 "ListenerNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9758338 "ListenerNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param message the detail message.
"
      end
    end

    class 487426 "MBeanInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Describes the management interface exposed by an MBean; that is,
the set of attributes and operations which are available for
management operations.  Instances of this class are immutable.
Subclasses may be mutable but this is not recommended.</p>

<p id=\"info-changed\">Usually the {@code MBeanInfo} for any given MBean does
not change over the lifetime of that MBean.  Dynamic MBeans can change their
{@code MBeanInfo} and in that case it is recommended that they emit a {@link
Notification} with a {@linkplain Notification#getType() type} of {@code
\"jmx.mbean.info.changed\"} and a {@linkplain Notification#getUserData()
userData} that is the new {@code MBeanInfo}.  This is not required, but
provides a conventional way for clients of the MBean to discover the change.
See also the <a href=\"Descriptor.html#immutableInfo\">immutableInfo</a> and
<a href=\"Descriptor.html#infoTimeout\">infoTimeout</a> fields in the {@code
MBeanInfo} {@link Descriptor}.</p>

<p>The contents of the <code>MBeanInfo</code> for a Dynamic MBean
are determined by its {@link DynamicMBean#getMBeanInfo
getMBeanInfo()} method.  This includes Open MBeans and Model
MBeans, which are kinds of Dynamic MBeans.</p>

<p>The contents of the <code>MBeanInfo</code> for a Standard MBean
are determined by the MBean server as follows:</p>

<ul>

<li>{@link #getClassName()} returns the Java class name of the MBean
object;

<li>{@link #getConstructors()} returns the list of all public
constructors in that object;

<li>{@link #getAttributes()} returns the list of all attributes
whose existence is deduced from the presence in the MBean interface
of a <code>get<i>Name</i></code>, <code>is<i>Name</i></code>, or
<code>set<i>Name</i></code> method that conforms to the conventions
for Standard MBeans;

<li>{@link #getOperations()} returns the list of all methods in
the MBean interface that do not represent attributes;

<li>{@link #getNotifications()} returns an empty array if the MBean
does not implement the {@link NotificationBroadcaster} interface,
otherwise the result of calling {@link
NotificationBroadcaster#getNotificationInfo()} on it;

<li>{@link #getDescriptor()} returns a descriptor containing the contents
of any descriptor annotations in the MBean interface (see
{@link DescriptorKey &#64;DescriptorKey}).

</ul>

<p>The description returned by {@link #getDescription()} and the
descriptions of the contained attributes and operations are not specified.</p>

<p>The remaining details of the <code>MBeanInfo</code> for a
Standard MBean are not specified.  This includes the description of
any contained constructors, and notifications; the names
of parameters to constructors and operations; and the descriptions of
constructor parameters.</p>

@since 1.5
"
      classrelation 3791874 // <realization>
	relation 3791874 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3791874 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3792002 // <realization>
	relation 3792002 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3792002 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3792130 // <realization>
	relation 3792130 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3792130 // <realization>
	  b parent class_ref 1188098 // DescriptorRead
      end

      attribute 2267138 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -6451021435135161911L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3792258 // descriptor (<unidirectional association>)
	relation 3792258 --->
	  a role_name "descriptor" private
	    comment "
@serial The Descriptor for the MBean.  This field
can be null, which is equivalent to an empty Descriptor.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3792258 // descriptor (<unidirectional association>)
	  b parent class_ref 489986 // Descriptor
      end

      classrelation 3792386 // description (<unidirectional association>)
	relation 3792386 --->
	  a role_name "description" const_relation private
	    comment "
@serial The human readable description of the class.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3792386 // description (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3792514 // className (<unidirectional association>)
	relation 3792514 --->
	  a role_name "className" const_relation private
	    comment "
@serial The MBean qualified name.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3792514 // className (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3792642 // attributes (<unidirectional association>)
	relation 3792642 --->
	  a role_name "attributes" multiplicity "[]" const_relation private
	    comment "
@serial The MBean attribute descriptors.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3792642 // attributes (<unidirectional association>)
	  b parent class_ref 496642 // MBeanAttributeInfo
      end

      classrelation 3792770 // operations (<unidirectional association>)
	relation 3792770 --->
	  a role_name "operations" multiplicity "[]" const_relation private
	    comment "
@serial The MBean operation descriptors.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3792770 // operations (<unidirectional association>)
	  b parent class_ref 496770 // MBeanOperationInfo
      end

      classrelation 3792898 // constructors (<unidirectional association>)
	relation 3792898 --->
	  a role_name "constructors" multiplicity "[]" const_relation private
	    comment "
@serial The MBean constructor descriptors.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3792898 // constructors (<unidirectional association>)
	  b parent class_ref 497282 // MBeanConstructorInfo
      end

      classrelation 3793026 // notifications (<unidirectional association>)
	relation 3793026 --->
	  a role_name "notifications" multiplicity "[]" const_relation private
	    comment "
@serial The MBean notification descriptors.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3793026 // notifications (<unidirectional association>)
	  b parent class_ref 497154 // MBeanNotificationInfo
      end

      attribute 2267266 "hashCode"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2267394 "arrayGettersSafe"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<p>True if this class is known not to override the array-valued
getters of MBeanInfo.  Obviously true for MBeanInfo itself, and true
for a subclass where we succeed in reflecting on the methods
and discover they are not overridden.</p>

<p>The purpose of this variable is to avoid cloning the arrays
when doing operations like {@link #equals} where we know they
will not be changed.  If a subclass overrides a getter, we
cannot access the corresponding array directly.</p>

"
      end

      operation 9764226 "MBeanInfo"
	public explicit_return_type ""
	nparams 6
	  param inout name "className" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "attributes" type class_ref 496642 // MBeanAttributeInfo
	multiplicity "[]"
	  param inout name "constructors" type class_ref 497282 // MBeanConstructorInfo
	multiplicity "[]"
	  param inout name "operations" type class_ref 496770 // MBeanOperationInfo
	multiplicity "[]"
	  param inout name "notifications" type class_ref 497154 // MBeanNotificationInfo
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanInfo</CODE>.

@param className The name of the Java class of the MBean described
by this <CODE>MBeanInfo</CODE>.  This value may be any
syntactically legal Java class name.  It does not have to be a
Java class known to the MBean server or to the MBean's
ClassLoader.  If it is a Java class known to the MBean's
ClassLoader, it is recommended but not required that the
class's public methods include those that would appear in a
Standard MBean implementing the attributes and operations in
this MBeanInfo.
@param description A human readable description of the MBean (optional).
@param attributes The list of exposed attributes of the MBean.
This may be null with the same effect as a zero-length array.
@param constructors The list of public constructors of the
MBean.  This may be null with the same effect as a zero-length
array.
@param operations The list of operations of the MBean.  This
may be null with the same effect as a zero-length array.
@param notifications The list of notifications emitted.  This
may be null with the same effect as a zero-length array.
"
      end

      operation 9764354 "MBeanInfo"
	public explicit_return_type ""
	nparams 7
	  param inout name "className" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "attributes" type class_ref 496642 // MBeanAttributeInfo
	multiplicity "[]"
	  param inout name "constructors" type class_ref 497282 // MBeanConstructorInfo
	multiplicity "[]"
	  param inout name "operations" type class_ref 496770 // MBeanOperationInfo
	multiplicity "[]"
	  param inout name "notifications" type class_ref 497154 // MBeanNotificationInfo
	multiplicity "[]"
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanInfo</CODE>.

@param className The name of the Java class of the MBean described
by this <CODE>MBeanInfo</CODE>.  This value may be any
syntactically legal Java class name.  It does not have to be a
Java class known to the MBean server or to the MBean's
ClassLoader.  If it is a Java class known to the MBean's
ClassLoader, it is recommended but not required that the
class's public methods include those that would appear in a
Standard MBean implementing the attributes and operations in
this MBeanInfo.
@param description A human readable description of the MBean (optional).
@param attributes The list of exposed attributes of the MBean.
This may be null with the same effect as a zero-length array.
@param constructors The list of public constructors of the
MBean.  This may be null with the same effect as a zero-length
array.
@param operations The list of operations of the MBean.  This
may be null with the same effect as a zero-length array.
@param notifications The list of notifications emitted.  This
may be null with the same effect as a zero-length array.
@param descriptor The descriptor for the MBean.  This may be null
which is equivalent to an empty descriptor.

@since 1.6
"
      end

      operation 9764482 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Returns a shallow clone of this instance.
The clone is obtained by simply calling <tt>super.clone()</tt>,
thus calling the default native shallow cloning mechanism
implemented by <tt>Object.clone()</tt>.
No deeper cloning of any internal field is made.</p>

<p>Since this class is immutable, the clone method is chiefly of
interest to subclasses.</p>
"
      end

      operation 9764610 "getClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the Java class of the MBean described by
this <CODE>MBeanInfo</CODE>.

@return the class name.
"
      end

      operation 9764738 "getDescription"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a human readable description of the MBean.

@return the description.
"
      end

      operation 9764866 "getAttributes"
	public return_type class_ref 496642 // MBeanAttributeInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of attributes exposed for management.
Each attribute is described by an <CODE>MBeanAttributeInfo</CODE> object.

The returned array is a shallow copy of the internal array,
which means that it is a copy of the internal array of
references to the <CODE>MBeanAttributeInfo</CODE> objects
but that each referenced <CODE>MBeanAttributeInfo</CODE> object is not copied.

@return  An array of <CODE>MBeanAttributeInfo</CODE> objects.
"
      end

      operation 9764994 "fastGetAttributes"
	private return_type class_ref 496642 // MBeanAttributeInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9765122 "nonNullAttributes"
	private return_type class_ref 496642 // MBeanAttributeInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the value of the attributes field, or an empty array if
the field is null.  This can't happen with a
normally-constructed instance of this class, but can if the
instance was deserialized from another implementation that
allows the field to be null.  It would be simpler if we enforced
the class invariant that these fields cannot be null by writing
a readObject() method, but that would require us to define the
various array fields as non-final, which is annoying because
conceptually they are indeed final.
"
      end

      operation 9765250 "getOperations"
	public return_type class_ref 496770 // MBeanOperationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of operations  of the MBean.
Each operation is described by an <CODE>MBeanOperationInfo</CODE> object.

The returned array is a shallow copy of the internal array,
which means that it is a copy of the internal array of
references to the <CODE>MBeanOperationInfo</CODE> objects
but that each referenced <CODE>MBeanOperationInfo</CODE> object is not copied.

@return  An array of <CODE>MBeanOperationInfo</CODE> objects.
"
      end

      operation 9765378 "fastGetOperations"
	private return_type class_ref 496770 // MBeanOperationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9765506 "nonNullOperations"
	private return_type class_ref 496770 // MBeanOperationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9765634 "getConstructors"
	public return_type class_ref 497282 // MBeanConstructorInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the list of the public constructors of the MBean.
Each constructor is described by an
<CODE>MBeanConstructorInfo</CODE> object.</p>

<p>The returned array is a shallow copy of the internal array,
which means that it is a copy of the internal array of
references to the <CODE>MBeanConstructorInfo</CODE> objects but
that each referenced <CODE>MBeanConstructorInfo</CODE> object
is not copied.</p>

<p>The returned list is not necessarily exhaustive.  That is,
the MBean may have a public constructor that is not in the
list.  In this case, the MBean server can construct another
instance of this MBean's class using that constructor, even
though it is not listed here.</p>

@return  An array of <CODE>MBeanConstructorInfo</CODE> objects.
"
      end

      operation 9765762 "fastGetConstructors"
	private return_type class_ref 497282 // MBeanConstructorInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9765890 "nonNullConstructors"
	private return_type class_ref 497282 // MBeanConstructorInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9766018 "getNotifications"
	public return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of the notifications emitted by the MBean.
Each notification is described by an <CODE>MBeanNotificationInfo</CODE> object.

The returned array is a shallow copy of the internal array,
which means that it is a copy of the internal array of
references to the <CODE>MBeanNotificationInfo</CODE> objects
but that each referenced <CODE>MBeanNotificationInfo</CODE> object is not copied.

@return  An array of <CODE>MBeanNotificationInfo</CODE> objects.
"
      end

      operation 9766146 "fastGetNotifications"
	private return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9766274 "nonNullNotifications"
	private return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9766402 "getDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the descriptor of this MBeanInfo.  Changing the returned value
will have no affect on the original descriptor.

@return a descriptor that is either immutable or a copy of the original.

@since 1.6
"
      end

      operation 9766530 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9766658 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Compare this MBeanInfo to another.  Two MBeanInfo objects
are equal if and only if they return equal values for {@link
#getClassName()}, for {@link #getDescription()}, and for
{@link #getDescriptor()}, and the
arrays returned by the two objects for {@link
#getAttributes()}, {@link #getOperations()}, {@link
#getConstructors()}, and {@link #getNotifications()} are
pairwise equal.  Here \"equal\" means {@link
Object#equals(Object)}, not identity.</p>

<p>If two MBeanInfo objects return the same values in one of
their arrays but in a different order then they are not equal.</p>

@param o the object to compare to.

@return true if and only if <code>o</code> is an MBeanInfo that is equal
to this one according to the rules above.
"
      end

      operation 9766786 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 3793154 // arrayGettersSafeMap (<unidirectional association>)
	relation 3793154 --->
	  a role_name "arrayGettersSafeMap" init_value "
        new WeakHashMap<Class<?>, Boolean>()" class_relation const_relation private
	    comment "
Cached results of previous calls to arrayGettersSafe.  This is
a WeakHashMap so that we don't prevent a class from being
garbage collected just because we know whether it's immutable.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>, Boolean> ${name}${value};
"
	    classrelation_ref 3793154 // arrayGettersSafeMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 9766914 "arrayGettersSafe"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "subclass" type class_ref 130818 // Class
	  param inout name "immutableClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if <code>subclass</code> is known to preserve the
immutability of <code>immutableClass</code>.  The class
<code>immutableClass</code> is a reference class that is known
to be immutable.  The subclass <code>subclass</code> is
considered immutable if it does not override any public method
of <code>immutableClass</code> whose name begins with \"get\".
This is obviously not an infallible test for immutability,
but it works for the public interfaces of the MBean*Info classes.
"
      end

      class 1189122 "ArrayGettersSafeAction"
	visibility private 
	nactuals 1
	actual class class_ref 250114 // PrivilegedAction
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3793282 // <realization>
	  relation 3793282 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3793282 // <realization>
	    b parent class_ref 250114 // PrivilegedAction
	end

	classrelation 3793410 // subclass (<unidirectional association>)
	  relation 3793410 --->
	    a role_name "subclass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3793410 // subclass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3793538 // immutableClass (<unidirectional association>)
	  relation 3793538 --->
	    a role_name "immutableClass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3793538 // immutableClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 9767042 "ArrayGettersSafeAction"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "subclass" type class_ref 130818 // Class
	    param inout name "immutableClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9767170 "run"
	  public return_type class_ref 315010 // Boolean
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9767298 "isEqual"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "s1" type class_ref 128130 // String
	  param inout name "s2" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9767426 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes an {@link MBeanInfo} to an {@link ObjectOutputStream}.
@serialData
For compatibility reasons, an object of this class is serialized as follows.
<p>
The method {@link ObjectOutputStream#defaultWriteObject defaultWriteObject()}
is called first to serialize the object except the field {@code descriptor}
which is declared as transient. The field {@code descriptor} is serialized
as follows:
    <ul>
    <li> If {@code descriptor} is an instance of the class
       {@link ImmutableDescriptor}, the method {@link ObjectOutputStream#write
       write(int val)} is called to write a byte with the value {@code 1},
       then the method {@link ObjectOutputStream#writeObject writeObject(Object obj)}
       is called twice to serialize the field names and the field values of the
       {@code descriptor}, respectively as a {@code String[]} and an
       {@code Object[]};</li>
    <li> Otherwise, the method {@link ObjectOutputStream#write write(int val)}
       is called to write a byte with the value {@code 0}, then the method
       {@link ObjectOutputStream#writeObject writeObject(Object obj)} is called
       to serialize the field {@code descriptor} directly.
    </ul>

@since 1.6
"
      end

      operation 9767554 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes an {@link MBeanInfo} from an {@link ObjectInputStream}.
@serialData
For compatibility reasons, an object of this class is deserialized as follows.
<p>
The method {@link ObjectInputStream#defaultReadObject defaultReadObject()}
is called first to deserialize the object except the field
{@code descriptor}, which is not serialized in the default way. Then the method
{@link ObjectInputStream#read read()} is called to read a byte, the field
{@code descriptor} is deserialized according to the value of the byte value:
   <ul>
   <li>1. The method {@link ObjectInputStream#readObject readObject()}
      is called twice to obtain the field names (a {@code String[]}) and
      the field values (a {@code Object[]}) of the {@code descriptor}.
      The two obtained values then are used to construct
      an {@link ImmutableDescriptor} instance for the field
      {@code descriptor};</li>
   <li>0. The value for the field {@code descriptor} is obtained directly
      by calling the method {@link ObjectInputStream#readObject readObject()}.
      If the obtained value is null, the field {@code descriptor} is set to
      {@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR};</li>
   <li>-1. This means that there is no byte to read and that the object is from
      an earlier version of the JMX API. The field {@code descriptor} is set to
      {@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR}.</li>
   <li>Any other value. A {@link StreamCorruptedException} is thrown.</li>
   </ul>

@since 1.6
"
      end
    end

    class 487554 "IntrospectionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception occurred during the introspection of an MBean.

@since 1.5
"
      classrelation 3787394 // <generalisation>
	relation 3787394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3787394 // <generalisation>
	  b parent class_ref 487682 // OperationsException
      end

      attribute 2265346 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1054516935875481725L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9756674 "IntrospectionException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9756802 "IntrospectionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param message the detail message.
"
      end
    end

    class 487682 "OperationsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents exceptions thrown in the MBean server when performing operations
on MBeans.

@since 1.5
"
      classrelation 3781762 // <generalisation>
	relation 3781762 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3781762 // <generalisation>
	  b parent class_ref 1186690 // JMException
      end

      attribute 2262530 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4967597595580536216L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9742082 "OperationsException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9742210 "OperationsException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param message the detail message.
"
      end
    end

    class 488066 "MBeanServerDelegate"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents  the MBean server from the management point of view.
The MBeanServerDelegate MBean emits the MBeanServerNotifications when
an MBean is registered/unregistered in the MBean server.

@since 1.5
"
      classrelation 976386 // <realization>
	relation 976386 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 976386 // <realization>
	  b parent class_ref 497538 // MBeanServerDelegateMBean
      end

      classrelation 976642 // <realization>
	relation 976642 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 976642 // <realization>
	  b parent class_ref 497666 // NotificationEmitter
      end

      classrelation 976770 // mbeanServerId (<unidirectional association>)
	relation 976770 --->
	  a role_name "mbeanServerId" private
	    comment " The MBean server agent identification.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 976770 // mbeanServerId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 976898 // broadcaster (<unidirectional association>)
	relation 976898 --->
	  a role_name "broadcaster" const_relation private
	    comment " The NotificationBroadcasterSupport object that sends the
notifications 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 976898 // broadcaster (<unidirectional association>)
	  b parent class_ref 497922 // NotificationBroadcasterSupport
      end

      attribute 621442 "oldStamp"
	class_attribute private explicit_type "long"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 621570 "stamp"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 621698 "sequenceNumber"
	private explicit_type "long"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 977026 // notifsInfo (<unidirectional association>)
	relation 977026 --->
	  a role_name "notifsInfo" multiplicity "[]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 977026 // notifsInfo (<unidirectional association>)
	  b parent class_ref 497154 // MBeanNotificationInfo
      end

      extra_member 138882 "initialization"
	
	cpp "" ""
	java "  static {
        final String[] types  = {
            MBeanServerNotification.UNREGISTRATION_NOTIFICATION,
            MBeanServerNotification.REGISTRATION_NOTIFICATION
        };
        notifsInfo = new MBeanNotificationInfo[1];
        notifsInfo[0] =
            new MBeanNotificationInfo(types,
                    \"javax.management.MBeanServerNotification\",
                    \"Notifications sent by the MBeanServerDelegate MBean\");
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 2978562 "MBeanServerDelegate"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a MBeanServerDelegate object.
"
      end

      operation 2978690 "getMBeanServerId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the MBean server agent identity.

@return the identity.
"
      end

      operation 2978818 "getSpecificationName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the full name of the JMX specification implemented
by this product.

@return the specification name.
"
      end

      operation 2978946 "getSpecificationVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version of the JMX specification implemented
by this product.

@return the specification version.
"
      end

      operation 2979074 "getSpecificationVendor"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the vendor of the JMX specification implemented
by this product.

@return the specification vendor.
"
      end

      operation 2979202 "getImplementationName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the JMX implementation name (the name of this product).

@return the implementation name.
"
      end

      operation 2979330 "getImplementationVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the JMX implementation version (the version of this product).

@return the implementation version.
"
      end

      operation 2979458 "getImplementationVendor"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the JMX implementation vendor (the vendor of this product).

@return the implementation vendor.
"
      end

      operation 2979586 "getNotificationInfo"
	public return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From NotificationEmitter extends NotificationBroacaster
"
      end

      operation 2979714 "addNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From NotificationEmitter extends NotificationBroacaster
"
      end

      operation 2979842 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From NotificationEmitter extends NotificationBroacaster
"
      end

      operation 2979970 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 487042 // NotificationListener
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From NotificationEmitter extends NotificationBroacaster
"
      end

      operation 2980098 "sendNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "notification" type class_ref 488706 // Notification
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables the MBean server to send a notification.
If the passed <var>notification</var> has a sequence number lesser
or equal to 0, then replace it with the delegate's own sequence
number.
@param notification The notification to send.

"
      end

      classrelation 977154 // DELEGATE_NAME (<unidirectional association>)
	relation 977154 --->
	  a role_name "DELEGATE_NAME" init_value "
            Util.newObjectName(\"JMImplementation:type=MBeanServerDelegate\")" class_relation const_relation public
	    comment "
Defines the default ObjectName of the MBeanServerDelegate.

@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 977154 // DELEGATE_NAME (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end

      operation 2980226 "getStamp"
	class_operation private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a timestamp that is monotonically increasing even if
System.currentTimeMillis() isn't (for example, if you call this
constructor more than once in the same millisecond, or if the
clock always returns the same value).  This means that the ids
for a given JVM will always be distinact, though there is no
such guarantee for two different JVMs.  "
      end
    end

    class 488450 "DynamicMBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the methods that should be implemented by
a Dynamic MBean (MBean that exposes a dynamic management interface).

@since 1.5
"
      operation 2955266 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "attribute" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtain the value of a specific attribute of the Dynamic MBean.

@param attribute The name of the attribute to be retrieved

@return  The value of the attribute retrieved.

@exception AttributeNotFoundException
@exception MBeanException  Wraps a <CODE>java.lang.Exception</CODE> thrown by the MBean's getter.
@exception ReflectionException  Wraps a <CODE>java.lang.Exception</CODE> thrown while trying to invoke the getter.

@see #setAttribute
"
      end

      operation 2955394 "setAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "attribute" type class_ref 486786 // Attribute
	nexceptions 4
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486914 // InvalidAttributeValueException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the value of a specific attribute of the Dynamic MBean.

@param attribute The identification of the attribute to
be set and  the value it is to be set to.

@exception AttributeNotFoundException
@exception InvalidAttributeValueException
@exception MBeanException Wraps a <CODE>java.lang.Exception</CODE> thrown by the MBean's setter.
@exception ReflectionException Wraps a <CODE>java.lang.Exception</CODE> thrown while trying to invoke the MBean's setter.

@see #getAttribute
"
      end

      operation 2955522 "getAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 1
	  param inout name "attributes" type class_ref 128130 // String
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the values of several attributes of the Dynamic MBean.

@param attributes A list of the attributes to be retrieved.

@return  The list of attributes retrieved.

@see #setAttributes
"
      end

      operation 2955650 "setAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 1
	  param inout name "attributes" type class_ref 486658 // AttributeList
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the values of several attributes of the Dynamic MBean.

@param attributes A list of attributes: The identification of the
attributes to be set and  the values they are to be set to.

@return  The list of attributes that were set, with their new values.

@see #getAttributes
"
      end

      operation 2955778 "invoke"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "actionName" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows an action to be invoked on the Dynamic MBean.

@param actionName The name of the action to be invoked.
@param params An array containing the parameters to be set when the action is
invoked.
@param signature An array containing the signature of the action. The class objects will
be loaded through the same class loader as the one used for loading the
MBean on which the action is invoked.

@return  The object returned by the action, which represents the result of
invoking the action on the MBean specified.

@exception MBeanException  Wraps a <CODE>java.lang.Exception</CODE> thrown by the MBean's invoked method.
@exception ReflectionException  Wraps a <CODE>java.lang.Exception</CODE> thrown while trying to invoke the method
"
      end

      operation 2955906 "getMBeanInfo"
	public return_type class_ref 487426 // MBeanInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides the exposed attributes and actions of the Dynamic MBean using an MBeanInfo object.

@return  An instance of <CODE>MBeanInfo</CODE> allowing all attributes and actions
exposed by this Dynamic MBean to be retrieved.

"
      end
    end

    class 488578 "MBeanRegistration"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Can be implemented by an MBean in order to
carry out operations before and after being registered or unregistered from
the MBean Server.  An MBean can also implement this interface in order
to get a reference to the MBean Server and/or its name within that
MBean Server.</p>

@since 1.5
"
      operation 2980354 "preRegister"
	public return_type class_ref 485506 // ObjectName
	nparams 2
	  param inout name "server" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the MBean to perform any operations it needs before
being registered in the MBean Server.  If the name of the MBean
is not specified, the MBean can provide a name for its
registration.  If any exception is raised, the MBean will not be
registered in the MBean Server.

@param server The MBean Server in which the MBean will be registered.

@param name The object name of the MBean.  This name is null if
the name parameter to one of the <code>createMBean</code> or
<code>registerMBean</code> methods in the {@link MBeanServer}
interface is null.  In that case, this method must return a
non-null ObjectName for the new MBean.

@return The name under which the MBean is to be registered.
This value must not be null.  If the <code>name</code>
parameter is not null, it will usually but not necessarily be
the returned value.

@exception java.lang.Exception This exception will be caught by
the MBean Server and re-thrown as an {@link
MBeanRegistrationException}.
"
      end

      operation 2980482 "postRegister"
	public explicit_return_type "void"
	nparams 1
	  param inout name "registrationDone" type class_ref 315010 // Boolean
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the MBean to perform any operations needed after having been
registered in the MBean server or after the registration has failed.
<p>If the implementation of this method throws a {@link RuntimeException}
or an {@link Error}, the MBean Server will rethrow those inside
a {@link RuntimeMBeanException} or {@link RuntimeErrorException},
respectively. However, throwing an exception in {@code postRegister}
will not change the state of the MBean:
if the MBean was already registered ({@code registrationDone} is
{@code true}), the MBean will remain registered. </p>
<p>This might be confusing for the code calling {@code createMBean()}
or {@code registerMBean()}, as such code might assume that MBean
registration has failed when such an exception is raised.
Therefore it is recommended that implementations of
{@code postRegister} do not throw Runtime Exceptions or Errors if it
can be avoided.</p>
@param registrationDone Indicates whether or not the MBean has
been successfully registered in the MBean server. The value
false means that the registration phase has failed.
"
      end

      operation 2980610 "preDeregister"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the MBean to perform any operations it needs before
being unregistered by the MBean server.

@exception java.lang.Exception This exception will be caught by
the MBean server and re-thrown as an {@link
MBeanRegistrationException}.
"
      end

      operation 2980738 "postDeregister"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the MBean to perform any operations needed after having been
unregistered in the MBean server.
<p>If the implementation of this method throws a {@link RuntimeException}
or an {@link Error}, the MBean Server will rethrow those inside
a {@link RuntimeMBeanException} or {@link RuntimeErrorException},
respectively. However, throwing an exception in {@code postDeregister}
will not change the state of the MBean:
the MBean was already successfully deregistered and will remain so. </p>
<p>This might be confusing for the code calling
{@code unregisterMBean()}, as it might assume that MBean deregistration
has failed. Therefore it is recommended that implementations of
{@code postDeregister} do not throw Runtime Exceptions or Errors if it
can be avoided.</p>
"
      end
    end

    class 488706 "Notification"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>The Notification class represents a notification emitted by an
MBean.  It contains a reference to the source MBean: if the
notification has been forwarded through the MBean server, and the
original source of the notification was a reference to the emitting
MBean object, then the MBean server replaces it by the MBean's
ObjectName.  If the listener has registered directly with the
MBean, this is either the object name or a direct reference to the
MBean.</p>

<p>It is strongly recommended that notification senders use the
object name rather than a reference to the MBean object as the
source.</p>

<p>The <b>serialVersionUID</b> of this class is <code>-7516092053498031989L</code>.

@since 1.5

 serialVersionUID is not constant"
      classrelation 1030658 // <generalisation>
	relation 1030658 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1030658 // <generalisation>
	  b parent class_ref 525698 // EventObject
      end

      attribute 669442 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1716977971058914352L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 669570 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7516092053498031989L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 1030786 // oldSerialPersistentFields (<unidirectional association>)
	relation 1030786 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
        new ObjectStreamField(\"message\", String.class),
        new ObjectStreamField(\"sequenceNumber\", Long.TYPE),
        new ObjectStreamField(\"source\", Object.class),
        new ObjectStreamField(\"sourceObjectName\", ObjectName.class),
        new ObjectStreamField(\"timeStamp\", Long.TYPE),
        new ObjectStreamField(\"type\", String.class),
        new ObjectStreamField(\"userData\", Object.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1030786 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 1030914 // newSerialPersistentFields (<unidirectional association>)
	relation 1030914 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
        new ObjectStreamField(\"message\", String.class),
        new ObjectStreamField(\"sequenceNumber\", Long.TYPE),
        new ObjectStreamField(\"source\", Object.class),
        new ObjectStreamField(\"timeStamp\", Long.TYPE),
        new ObjectStreamField(\"type\", String.class),
        new ObjectStreamField(\"userData\", Object.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1030914 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 669698 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 1031042 // serialPersistentFields (<unidirectional association>)
	relation 1031042 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField type String The notification type.
             A string expressed in a dot notation similar to Java properties.
             An example of a notification type is network.alarm.router
@serialField sequenceNumber long The notification sequence number.
             A serial number which identify particular instance
             of notification in the context of the notification source.
@serialField timeStamp long The notification timestamp.
             Indicating when the notification was generated
@serialField userData Object The notification user data.
             Used for whatever other data the notification
             source wishes to communicate to its consumers
@serialField message String The notification message.
@serialField source Object The object on which the notification initially occurred.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1031042 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 669826 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 139650 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK: exception means no compat with 1.0, too bad
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 1031170 // type (<unidirectional association>)
	relation 1031170 --->
	  a role_name "type" private
	    comment " END Serialization compatibility stuff

@serial The notification type.
        A string expressed in a dot notation similar to Java properties.
        An example of a notification type is network.alarm.router

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1031170 // type (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 669954 "sequenceNumber"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial The notification sequence number.
        A serial number which identify particular instance
        of notification in the context of the notification source.

"
      end

      attribute 670082 "timeStamp"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial The notification timestamp.
        Indicating when the notification was generated

"
      end

      classrelation 1031298 // userData (<unidirectional association>)
	relation 1031298 --->
	  a role_name "userData" init_value " null" private
	    comment "
@serial The notification user data.
        Used for whatever other data the notification
        source wishes to communicate to its consumers

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1031298 // userData (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 1031426 // message (<unidirectional association>)
	relation 1031426 --->
	  a role_name "message" init_value " \"\"" private
	    comment "
@serial The notification message.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1031426 // message (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1031554 // source (<unidirectional association>)
	relation 1031554 --->
	  a role_name "source" init_value " null" protected
	    comment "
<p>This field hides the {@link EventObject#source} field in the
parent class to make it non-transient and therefore part of the
serialized form.</p>

@serial The object on which the notification initially occurred.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1031554 // source (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 3174402 "Notification"
	public explicit_return_type ""
	nparams 3
	  param inout name "type" type class_ref 128130 // String
	  param inout name "source" type class_ref 129538 // Object
	  param in name "sequenceNumber" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Notification object.
The notification timeStamp is set to the current date.

@param type The notification type.
@param source The notification source.
@param sequenceNumber The notification sequence number within the source object.

"
      end

      operation 3174530 "Notification"
	public explicit_return_type ""
	nparams 4
	  param inout name "type" type class_ref 128130 // String
	  param inout name "source" type class_ref 129538 // Object
	  param in name "sequenceNumber" explicit_type "long"
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Notification object.
The notification timeStamp is set to the current date.

@param type The notification type.
@param source The notification source.
@param sequenceNumber The notification sequence number within the source object.
@param message The detailed message.

"
      end

      operation 3174658 "Notification"
	public explicit_return_type ""
	nparams 4
	  param inout name "type" type class_ref 128130 // String
	  param inout name "source" type class_ref 129538 // Object
	  param in name "sequenceNumber" explicit_type "long"
	  param in name "timeStamp" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Notification object.

@param type The notification type.
@param source The notification source.
@param sequenceNumber The notification sequence number within the source object.
@param timeStamp The notification emission date.

"
      end

      operation 3174786 "Notification"
	public explicit_return_type ""
	nparams 5
	  param inout name "type" type class_ref 128130 // String
	  param inout name "source" type class_ref 129538 // Object
	  param in name "sequenceNumber" explicit_type "long"
	  param in name "timeStamp" explicit_type "long"
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Notification object.

@param type The notification type.
@param source The notification source.
@param sequenceNumber The notification sequence number within the source object.
@param timeStamp The notification emission date.
@param message The detailed message.

"
      end

      operation 3174914 "setSource"
	public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the source.

@param source the new source for this object.

@see EventObject#getSource
"
      end

      operation 3175042 "getSequenceNumber"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the notification sequence number.

@return The notification sequence number within the source object. It's a serial number
identifying a particular instance of notification in the context of the notification source.
The notification model does not assume that notifications will be received in the same order
that they are sent. The sequence number helps listeners to sort received notifications.

@see #setSequenceNumber
"
      end

      operation 3175170 "setSequenceNumber"
	public explicit_return_type "void"
	nparams 1
	  param in name "sequenceNumber" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the notification sequence number.

@param sequenceNumber The notification sequence number within the source object. It is
a serial number identifying a particular instance of notification in the
context of the notification source.

@see #getSequenceNumber
"
      end

      operation 3175298 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the notification type.

@return The notification type. It's a string expressed in a dot notation
similar to Java properties. It is recommended that the notification type
should follow the reverse-domain-name convention used by Java package
names.  An example of a notification type is com.example.alarm.router.
"
      end

      operation 3175426 "getTimeStamp"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the notification timestamp.

@return The notification timestamp.

@see #setTimeStamp
"
      end

      operation 3175554 "setTimeStamp"
	public explicit_return_type "void"
	nparams 1
	  param in name "timeStamp" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the notification timestamp.

@param timeStamp The notification timestamp. It indicates when the notification was generated.

@see #getTimeStamp
"
      end

      operation 3175682 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the notification message.

@return The message string of this notification object.

"
      end

      operation 3175810 "getUserData"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the user data.

@return The user data object. It is used for whatever data
the notification source wishes to communicate to its consumers.

@see #setUserData
"
      end

      operation 3175938 "setUserData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "userData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the user data.

@param userData The user data object. It is used for whatever data
the notification source wishes to communicate to its consumers.

@see #getUserData
"
      end

      operation 3176066 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a String representation of this notification.

@return A String representation of this notification.
"
      end

      operation 3176194 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link Notification} from an {@link ObjectInputStream}.
"
      end

      operation 3176322 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link Notification} to an {@link ObjectOutputStream}.
"
      end
    end

    class 489986 "Descriptor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Additional metadata for a JMX element.  A {@code Descriptor}
is associated with a {@link MBeanInfo}, {@link MBeanAttributeInfo}, etc.
It consists of a collection of fields.  A field is a name and an
associated value.</p>

<p>Field names are not case-sensitive.  The names {@code descriptorType},
{@code descriptortype}, and {@code DESCRIPTORTYPE} are all equivalent.
However, the case that was used when the field was first set is preserved
in the result of the {@link #getFields} and {@link #getFieldNames}
methods.</p>

<p>Not all field names and values are predefined.
New fields can be defined and added by any program.</p>

<p>A descriptor can be mutable or immutable.
An immutable descriptor, once created, never changes.
The <code>Descriptor</code> methods that could modify the contents
of the descriptor will throw an exception
for an immutable descriptor.  Immutable descriptors are usually
instances of {@link ImmutableDescriptor} or a subclass.  Mutable
descriptors are usually instances of
{@link javax.management.modelmbean.DescriptorSupport} or a subclass.

<p>Certain fields are used by the JMX implementation.  This means
either that the presence of the field may change the behavior of
the JMX API or that the field may be set in descriptors returned by
the JMX API.  These fields appear in <i>italics</i> in the table
below, and each one has a corresponding constant in the {@link JMX}
class.  For example, the field {@code defaultValue} is represented
by the constant {@link JMX#DEFAULT_VALUE_FIELD}.</p>

<p>Certain other fields have conventional meanings described in the
table below but they are not required to be understood or set by
the JMX implementation.</p>

<p>Field names defined by the JMX specification in this and all
future versions will never contain a period (.).  Users can safely
create their own fields by including a period in the name and be
sure that these names will not collide with any future version of
the JMX API.  It is recommended to follow the Java package naming
convention to avoid collisions between field names from different
origins.  For example, a field created by {@code example.com} might
have the name {@code com.example.interestLevel}.</p>

<p>Note that the values in the {@code defaultValue}, {@code
legalValues}, {@code maxValue}, and {@code minValue} fields should
be consistent with the type returned by the {@code getType()}
method for the associated {@code MBeanAttributeInfo} or {@code
MBeanParameterInfo}.  For MXBeans, this means that they should be
of the mapped Java type, called <em>opendata</em>(J) in the <a
href=\"MXBean.html#mapping-rules\">MXBean type mapping rules</a>.</p>

<table border=\"1\" cellpadding=\"5\" summary=\"Descriptor Fields\">

<tr><th>Name</th><th>Type</th><th>Used in</th><th>Meaning</th></tr>

<tr id=\"defaultValue\"><td><i>defaultValue</i><td>Object</td>
<td>MBeanAttributeInfo<br>MBeanParameterInfo</td>

<td>Default value for an attribute or parameter.  See
{@link javax.management.openmbean}.</td>

<tr><td>deprecated</td><td>String</td><td>Any</td>

<td>An indication that this element of the information model is no
longer recommended for use.  A set of MBeans defined by an
application is collectively called an <em>information model</em>.
The convention is for the value of this field to contain a string
that is the version of the model in which the element was first
deprecated, followed by a space, followed by an explanation of the
deprecation, for example {@code \"1.3 Replaced by the Capacity
attribute\"}.</td>

<tr><td id=\"descriptionResourceBundleBaseName\">descriptionResource<br>
BundleBaseName</td><td>String</td><td>Any</td>

<td>The base name for the {@link ResourceBundle} in which the key given in
the {@code descriptionResourceKey} field can be found, for example
{@code \"com.example.myapp.MBeanResources\"}.  The meaning of this
field is defined by this specification but the field is not set or
used by the JMX API itself.</td>

<tr><td id=\"descriptionResourceKey\">descriptionResourceKey</td>
<td>String</td><td>Any</td>

<td>A resource key for the description of this element.  In
conjunction with the {@code descriptionResourceBundleBaseName},
this can be used to find a localized version of the description.
The meaning of this field is defined by this specification but the
field is not set or used by the JMX API itself.</td>

<tr><td>enabled</td><td>String</td>
<td>MBeanAttributeInfo<br>MBeanNotificationInfo<br>MBeanOperationInfo</td>

<td>The string {@code \"true\"} or {@code \"false\"} according as this
item is enabled.  When an attribute or operation is not enabled, it
exists but cannot currently be accessed.  A user interface might
present it as a greyed-out item.  For example, an attribute might
only be meaningful after the {@code start()} method of an MBean has
been called, and is otherwise disabled.  Likewise, a notification
might be disabled if it cannot currently be emitted but could be in
other circumstances.</td>

<tr id=\"exceptions\"><td>exceptions<td>String[]</td>
<td>MBeanAttributeInfo, MBeanConstructorInfo, MBeanOperationInfo</td>

<td>The class names of the exceptions that can be thrown when invoking a
constructor or operation, or getting an attribute. The meaning of this field
is defined by this specification but the field is not set or used by the
JMX API itself. Exceptions thrown when
setting an attribute are specified by the field
<a href=\"#setExceptions\">{@code setExceptions}</a>.

<tr id=\"immutableInfo\"><td><i>immutableInfo</i><td>String</td>
<td>MBeanInfo</td>

<td>The string {@code \"true\"} or {@code \"false\"} according as this
MBean's MBeanInfo is <em>immutable</em>.  When this field is true,
the MBeanInfo for the given MBean is guaranteed not to change over
the lifetime of the MBean.  Hence, a client can read it once and
cache the read value.  When this field is false or absent, there is
no such guarantee, although that does not mean that the MBeanInfo
will necessarily change.  See also the <a
href=\"MBeanInfo.html#info-changed\">{@code \"jmx.mbean.info.changed\"}</a>
notification.</td>

<tr id=\"infoTimeout\"><td>infoTimeout</td><td>String<br>Long</td><td>MBeanInfo</td>

<td>The time in milli-seconds that the MBeanInfo can reasonably be
expected to be unchanged.  The value can be a {@code Long} or a
decimal string.  This provides a hint from a DynamicMBean or any
MBean that does not define {@code immutableInfo} as {@code true}
that the MBeanInfo is not likely to change within this period and
therefore can be cached.  When this field is missing or has the
value zero, it is not recommended to cache the MBeanInfo unless it
has the {@code immutableInfo} set to {@code true} or it has <a
href=\"MBeanInfo.html#info-changed\">{@code \"jmx.mbean.info.changed\"}</a> in
its {@link MBeanNotificationInfo} array.</td></tr>

<tr id=\"interfaceClassName\"><td><i>interfaceClassName</i></td>
<td>String</td><td>MBeanInfo</td>

<td>The Java interface name for a Standard MBean or MXBean, as
returned by {@link Class#getName()}.  A Standard MBean or MXBean
registered directly in the MBean Server or created using the {@link
StandardMBean} class will have this field in its MBeanInfo
Descriptor.</td>

<tr id=\"legalValues\"><td><i>legalValues</i></td>
<td>{@literal Set<?>}</td><td>MBeanAttributeInfo<br>MBeanParameterInfo</td>

<td>Legal values for an attribute or parameter.  See
{@link javax.management.openmbean}.</td>

<tr id=\"locale\"><td>locale</td>
<td>String</td><td>Any</td>

<td>The {@linkplain Locale locale} of the description in this
{@code MBeanInfo}, {@code MBeanAttributeInfo}, etc, as returned
by {@link Locale#toString()}.</td>

<tr id=\"maxValue\"><td><i>maxValue</i><td>Object</td>
<td>MBeanAttributeInfo<br>MBeanParameterInfo</td>

<td>Maximum legal value for an attribute or parameter.  See
{@link javax.management.openmbean}.</td>

<tr id=\"metricType\"><td>metricType</td><td>String</td>
<td>MBeanAttributeInfo<br>MBeanOperationInfo</td>

<td>The type of a metric, one of the strings \"counter\" or \"gauge\".
A metric is a measurement exported by an MBean, usually an
attribute but sometimes the result of an operation.  A metric that
is a <em>counter</em> has a value that never decreases except by
being reset to a starting value.  Counter metrics are almost always
non-negative integers.  An example might be the number of requests
received.  A metric that is a <em>gauge</em> has a numeric value
that can increase or decrease.  Examples might be the number of
open connections or a cache hit rate or a temperature reading.

<tr id=\"minValue\"><td><i>minValue</i><td>Object</td>
<td>MBeanAttributeInfo<br>MBeanParameterInfo</td>

<td>Minimum legal value for an attribute or parameter.  See
{@link javax.management.openmbean}.</td>

<tr id=\"mxbean\"><td><i>mxbean</i><td>String</td>
<td>MBeanInfo</td>

<td>The string {@code \"true\"} or {@code \"false\"} according as this
MBean is an {@link MXBean}.  A Standard MBean or MXBean registered
directly with the MBean Server or created using the {@link
StandardMBean} class will have this field in its MBeanInfo
Descriptor.</td>

<tr id=\"openType\"><td><i>openType</i><td>{@link OpenType}</td>
<td>MBeanAttributeInfo<br>MBeanOperationInfo<br>MBeanParameterInfo</td>

<td><p>The Open Type of this element.  In the case of {@code
MBeanAttributeInfo} and {@code MBeanParameterInfo}, this is the
Open Type of the attribute or parameter.  In the case of {@code
MBeanOperationInfo}, it is the Open Type of the return value.  This
field is set in the Descriptor for all instances of {@link
OpenMBeanAttributeInfoSupport}, {@link
OpenMBeanOperationInfoSupport}, and {@link
OpenMBeanParameterInfoSupport}.  It is also set for attributes,
operations, and parameters of MXBeans.</p>

<p>This field can be set for an {@code MBeanNotificationInfo}, in
which case it indicates the Open Type that the {@link
Notification#getUserData() user data} will have.</td>

<tr id=\"originalType\"><td><i>originalType</i><td>String</td>
<td>MBeanAttributeInfo<br>MBeanOperationInfo<br>MBeanParameterInfo</td>

<td><p>The original Java type of this element as it appeared in the
{@link MXBean} interface method that produced this {@code
MBeanAttributeInfo} (etc).  For example, a method<br> <code>public
</code> {@link MemoryUsage}<code> getHeapMemoryUsage();</code><br>
in an MXBean interface defines an attribute called {@code
HeapMemoryUsage} of type {@link CompositeData}.  The {@code
originalType} field in the Descriptor for this attribute will have
the value {@code \"java.lang.management.MemoryUsage\"}.

<p>The format of this string is described in the section <a
href=\"MXBean.html#type-names\">Type Names</a> of the MXBean
specification.</p>

<tr id=\"setExceptions\"><td><i>setExceptions</i><td>String[]</td>
<td>MBeanAttributeInfo</td>

<td>The class names of the exceptions that can be thrown when setting
an attribute. The meaning of this field
is defined by this specification but the field is not set or used by the
JMX API itself.  Exceptions thrown when getting an attribute are specified
by the field <a href=\"#exceptions\">{@code exceptions}</a>.

<tr><td>severity</td><td>String<br>Integer</td>
<td>MBeanNotificationInfo</td>

<td>The severity of this notification.  It can be 0 to mean
unknown severity or a value from 1 to 6 representing decreasing
levels of severity.  It can be represented as a decimal string or
an {@code Integer}.</td>

<tr><td>since</td><td>String</td><td>Any</td>

<td>The version of the information model in which this element
was introduced.  A set of MBeans defined by an application is
collectively called an <em>information model</em>.  The
application may also define versions of this model, and use the
{@code \"since\"} field to record the version in which an element
first appeared.</td>

<tr><td>units</td><td>String</td>
<td>MBeanAttributeInfo<br>MBeanParameterInfo<br>MBeanOperationInfo</td>

<td>The units in which an attribute, parameter, or operation return
value is measured, for example {@code \"bytes\"} or {@code
\"seconds\"}.</td>

</table>

<p>Some additional fields are defined by Model MBeans.  See the
information for <a href=\"modelmbean/ModelMBeanInfo.html#descriptor\"><!--
-->{@code ModelMBeanInfo}</a>,
<a href=\"modelmbean/ModelMBeanAttributeInfo.html#descriptor\"><!--
-->{@code ModelMBeanAttributeInfo}</a>,
<a href=\"modelmbean/ModelMBeanConstructorInfo.html#descriptor\"><!--
-->{@code ModelMBeanConstructorInfo}</a>,
<a href=\"modelmbean/ModelMBeanNotificationInfo.html#descriptor\"><!--
-->{@code ModelMBeanNotificationInfo}</a>, and
<a href=\"modelmbean/ModelMBeanOperationInfo.html#descriptor\"><!--
-->{@code ModelMBeanOperationInfo}</a>, as
well as the chapter \"Model MBeans\" of the <a
href=\"http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html\">JMX
Specification</a>.  The following table summarizes these fields.  Note
that when the Type in this table is Number, a String that is the decimal
representation of a Long can also be used.</p>

<p>Nothing prevents the use of these fields in MBeans that are not Model
MBeans.  The <a href=\"#displayName\">displayName</a>, <a href=\"#severity\"><!--
-->severity</a>, and <a href=\"#visibility\">visibility</a> fields are of
interest outside Model MBeans, for example.  But only Model MBeans have
a predefined behavior for these fields.</p>

<table border=\"1\" cellpadding=\"5\" summary=\"ModelMBean Fields\">

<tr><th>Name</th><th>Type</th><th>Used in</th><th>Meaning</th></tr>

<tr><td>class</td><td>String</td><td>ModelMBeanOperationInfo</td>
    <td>Class where method is defined (fully qualified).</td></tr>

<tr><td>currencyTimeLimit</td><td>Number</td>
    <td>ModelMBeanInfo<br>ModelMBeanAttributeInfo<br>ModelMBeanOperationInfo</td>
    <td>How long cached value is valid: &lt;0 never, =0 always,
        &gt;0 seconds.</td></tr>

<tr><td>default</td><td>Object</td><td>ModelMBeanAttributeInfo</td>
    <td>Default value for attribute.</td></tr>

<tr><td>descriptorType</td><td>String</td><td>Any</td>
    <td>Type of descriptor, \"mbean\", \"attribute\", \"constructor\", \"operation\",
        or \"notification\".</td></tr>

<tr id=\"displayName\"><td>displayName</td><td>String</td><td>Any</td>
    <td>Human readable name of this item.</td></tr>

<tr><td>export</td><td>String</td><td>ModelMBeanInfo</td>
    <td>Name to be used to export/expose this MBean so that it is
        findable by other JMX Agents.</td></tr>

<tr><td>getMethod</td><td>String</td><td>ModelMBeanAttributeInfo</td>
    <td>Name of operation descriptor for get method.</td></tr>

<tr><td>lastUpdatedTimeStamp</td><td>Number</td>
    <td>ModelMBeanAttributeInfo<br>ModelMBeanOperationInfo</td>
    <td>When <a href=\"#value-field\">value</a> was set.</td></tr>

<tr><td>log</td><td>String</td><td>ModelMBeanInfo<br>ModelMBeanNotificationInfo</td>
    <td>t or T: log all notifications, f or F: log no notifications.</td></tr>

<tr><td>logFile</td><td>String</td><td>ModelMBeanInfo<br>ModelMBeanNotificationInfo</td>
    <td>Fully qualified filename to log events to.</td></tr>

<tr><td>messageID</td><td>String</td><td>ModelMBeanNotificationInfo</td>
    <td>Unique key for message text (to allow translation, analysis).</td></tr>

<tr><td>messageText</td><td>String</td><td>ModelMBeanNotificationInfo</td>
    <td>Text of notification.</td></tr>

<tr><td>name</td><td>String</td><td>Any</td>
    <td>Name of this item.</td></tr>

<tr><td>persistFile</td><td>String</td><td>ModelMBeanInfo</td>
    <td>File name into which the MBean should be persisted.</td></tr>

<tr><td>persistLocation</td><td>String</td><td>ModelMBeanInfo</td>
    <td>The fully qualified directory name where the MBean should be
        persisted (if appropriate).</td></tr>

<tr><td>persistPeriod</td><td>Number</td>
    <td>ModelMBeanInfo<br>ModelMBeanAttributeInfo</td>
    <td>Frequency of persist cycle in seconds. Used when persistPolicy is
        \"OnTimer\" or \"NoMoreOftenThan\".</td></tr>

<tr><td>persistPolicy</td><td>String</td>
    <td>ModelMBeanInfo<br>ModelMBeanAttributeInfo</td>
    <td>One of: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never.
        See the section \"MBean Descriptor Fields\" in the JMX specification
        document.</td></tr>

<tr><td>presentationString</td><td>String</td><td>Any</td>
    <td>XML formatted string to allow presentation of data.</td></tr>

<tr><td>protocolMap</td><td>Descriptor</td><td>ModelMBeanAttributeInfo</td>
    <td>See the section \"Protocol Map Support\" in the JMX specification
        document.  Mappings must be appropriate for the attribute and entries
        can be updated or augmented at runtime.</td></tr>

<tr><td>role</td><td>String</td>
    <td>ModelMBeanConstructorInfo<br>ModelMBeanOperationInfo</td>
    <td>One of \"constructor\", \"operation\", \"getter\", or \"setter\".</td></tr>

<tr><td>setMethod</td><td>String</td><td>ModelMBeanAttributeInfo</td>
    <td>Name of operation descriptor for set method.</td></tr>

<tr id=\"severity\"><td>severity</td><td>Number</td>
    <td>ModelMBeanNotificationInfo</td>
    <td>0-6 where 0: unknown; 1: non-recoverable;
        2: critical, failure; 3: major, severe;
        4: minor, marginal, error; 5: warning;
        6: normal, cleared, informative</td></tr>

<tr><td>targetObject</td><td>Object</td><td>ModelMBeanOperationInfo</td>
    <td>Object on which to execute this method.</td></tr>

<tr><td>targetType</td><td>String</td><td>ModelMBeanOperationInfo</td>
    <td>type of object reference for targetObject. Can be:
        ObjectReference | Handle | EJBHandle | IOR | RMIReference.</td></tr>

<tr id=\"value-field\"><td>value</td><td>Object</td>
    <td>ModelMBeanAttributeInfo<br>ModelMBeanOperationInfo</td>
    <td>Current (cached) value for attribute or operation.</td></tr>

<tr id=\"visibility\"><td>visibility</td><td>Number</td><td>Any</td>
    <td>1-4 where 1: always visible, 4: rarely visible.</td></tr>

</table>

@since 1.5
"
      classrelation 3785346 // <generalisation>
	relation 3785346 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3785346 // <generalisation>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3785474 // <generalisation>
	relation 3785474 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3785474 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      operation 9749634 "getFieldValue"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "fieldName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value for a specific field name, or null if no value
is present for that name.

@param fieldName the field name.

@return the corresponding value, or null if the field is not present.

@exception RuntimeOperationsException if the field name is illegal.
"
      end

      operation 9749762 "setField"
	public explicit_return_type "void"
	nparams 2
	  param inout name "fieldName" type class_ref 128130 // String
	  param inout name "fieldValue" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets the value for a specific field name. This will
modify an existing field or add a new field.</p>

<p>The field value will be validated before it is set.
If it is not valid, then an exception will be thrown.
The meaning of validity is dependent on the descriptor
implementation.</p>

@param fieldName The field name to be set. Cannot be null or empty.
@param fieldValue The field value to be set for the field
name. Can be null if that is a valid value for the field.

@exception RuntimeOperationsException if the field name or field value
is illegal (wrapped exception is {@link IllegalArgumentException}); or
if the descriptor is immutable (wrapped exception is
{@link UnsupportedOperationException}).
"
      end

      operation 9749890 "getFields"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all of the fields contained in this descriptor as a string array.

@return String array of fields in the format <i>fieldName=fieldValue</i>
<br>If the value of a field is not a String, then the toString() method
will be called on it and the returned value, enclosed in parentheses,
used as the value for the field in the returned array. If the value
of a field is null, then the value of the field in the returned array
will be empty.  If the descriptor is empty, you will get
an empty array.

@see #setFields
"
      end

      operation 9750018 "getFieldNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the field names in the descriptor.

@return String array of field names. If the descriptor is empty,
you will get an empty array.
"
      end

      operation 9750146 "getFieldValues"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "String...fieldNames"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the field values in the descriptor as an array of Objects. The
returned values are in the same order as the {@code fieldNames} String array parameter.

@param fieldNames String array of the names of the fields that
the values should be returned for.  If the array is empty then
an empty array will be returned.  If the array is null then all
values will be returned, as if the parameter were the array
returned by {@link #getFieldNames()}.  If a field name in the
array does not exist, including the case where it is null or
the empty string, then null is returned for the matching array
element being returned.

@return Object array of field values. If the list of {@code fieldNames}
is empty, you will get an empty array.
"
      end

      operation 9750274 "removeField"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fieldName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a field from the descriptor.

@param fieldName String name of the field to be removed.
If the field name is illegal or the field is not found,
no exception is thrown.

@exception RuntimeOperationsException if a field of the given name
exists and the descriptor is immutable.  The wrapped exception will
be an {@link UnsupportedOperationException}.
"
      end

      operation 9750402 "setFields"
	public explicit_return_type "void"
	nparams 2
	  param inout name "fieldNames" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "fieldValues" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets all fields in the field names array to the new value with
the same index in the field values array. Array sizes must match.</p>

<p>The field value will be validated before it is set.
If it is not valid, then an exception will be thrown.
If the arrays are empty, then no change will take effect.</p>

@param fieldNames String array of field names. The array and array
elements cannot be null.
@param fieldValues Object array of the corresponding field values.
The array cannot be null. Elements of the array can be null.

@throws RuntimeOperationsException if the change fails for any reason.
Wrapped exception is {@link IllegalArgumentException} if
{@code fieldNames} or {@code fieldValues} is null, or if
the arrays are of different lengths, or if there is an
illegal value in one of them.
Wrapped exception is {@link UnsupportedOperationException}
if the descriptor is immutable, and the call would change
its contents.

@see #getFields
"
      end

      operation 9750530 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a descriptor which is equal to this descriptor.
Changes to the returned descriptor will have no effect on this
descriptor, and vice versa.  If this descriptor is immutable,
it may fulfill this condition by returning itself.</p>
@exception RuntimeOperationsException for illegal value for field names
or field values.
If the descriptor construction fails for any reason, this exception will
be thrown.
@return A descriptor which is equal to this descriptor.
"
      end

      operation 9750658 "isValid"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if all of the fields have legal values given their
names.

@return true if the values are legal.

@exception RuntimeOperationsException If the validity checking fails for
any reason, this exception will be thrown.
The method returns false if the descriptor is not valid, but throws
this exception if the attempt to determine validity fails.
"
      end

      operation 9750786 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Compares this descriptor to the given object.  The objects are equal if
the given object is also a Descriptor, and if the two Descriptors have
the same field names (possibly differing in case) and the same
associated values.  The respective values for a field in the two
Descriptors are equal if the following conditions hold:</p>

<ul>
<li>If one value is null then the other must be too.</li>
<li>If one value is a primitive array then the other must be a primitive
array of the same type with the same elements.</li>
<li>If one value is an object array then the other must be too and
{@link Arrays#deepEquals(Object[],Object[])} must return true.</li>
<li>Otherwise {@link Object#equals(Object)} must return true.</li>
</ul>

@param obj the object to compare with.

@return {@code true} if the objects are the same; {@code false}
otherwise.

@since 1.6
"
      end

      operation 9750914 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the hash code value for this descriptor.  The hash
code is computed as the sum of the hash codes for each field in
the descriptor.  The hash code of a field with name {@code n}
and value {@code v} is {@code n.toLowerCase().hashCode() ^ h}.
Here {@code h} is the hash code of {@code v}, computed as
follows:</p>

<ul>
<li>If {@code v} is null then {@code h} is 0.</li>
<li>If {@code v} is a primitive array then {@code h} is computed using
the appropriate overloading of {@code java.util.Arrays.hashCode}.</li>
<li>If {@code v} is an object array then {@code h} is computed using
{@link Arrays#deepHashCode(Object[])}.</li>
<li>Otherwise {@code h} is {@code v.hashCode()}.</li>
</ul>

@return A hash code value for this object.

@since 1.6
"
      end
    end

    class 493954 "JMX"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Static methods from the JMX API.  There are no instances of this class.

@since 1.6
"
      classrelation 3787906 // proof (<unidirectional association>)
	relation 3787906 --->
	  a role_name "proof" init_value " new JMX()" class_relation const_relation package
	    comment " Code within this package can prove that by providing this instance of
this class.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3787906 // proof (<unidirectional association>)
	  b parent class_ref 493954 // JMX
      end

      operation 9757314 "JMX"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3788034 // DEFAULT_VALUE_FIELD (<unidirectional association>)
	relation 3788034 --->
	  a role_name "DEFAULT_VALUE_FIELD" init_value " \"defaultValue\"" class_relation const_relation public
	    comment "
The name of the <a href=\"Descriptor.html#defaultValue\">{@code
defaultValue}</a> field.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3788034 // DEFAULT_VALUE_FIELD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3788162 // IMMUTABLE_INFO_FIELD (<unidirectional association>)
	relation 3788162 --->
	  a role_name "IMMUTABLE_INFO_FIELD" init_value " \"immutableInfo\"" class_relation const_relation public
	    comment "
The name of the <a href=\"Descriptor.html#immutableInfo\">{@code
immutableInfo}</a> field.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3788162 // IMMUTABLE_INFO_FIELD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3788290 // INTERFACE_CLASS_NAME_FIELD (<unidirectional association>)
	relation 3788290 --->
	  a role_name "INTERFACE_CLASS_NAME_FIELD" init_value " \"interfaceClassName\"" class_relation const_relation public
	    comment "
The name of the <a href=\"Descriptor.html#interfaceClassName\">{@code
interfaceClassName}</a> field.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3788290 // INTERFACE_CLASS_NAME_FIELD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3788418 // LEGAL_VALUES_FIELD (<unidirectional association>)
	relation 3788418 --->
	  a role_name "LEGAL_VALUES_FIELD" init_value " \"legalValues\"" class_relation const_relation public
	    comment "
The name of the <a href=\"Descriptor.html#legalValues\">{@code
legalValues}</a> field.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3788418 // LEGAL_VALUES_FIELD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3788546 // MAX_VALUE_FIELD (<unidirectional association>)
	relation 3788546 --->
	  a role_name "MAX_VALUE_FIELD" init_value " \"maxValue\"" class_relation const_relation public
	    comment "
The name of the <a href=\"Descriptor.html#maxValue\">{@code
maxValue}</a> field.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3788546 // MAX_VALUE_FIELD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3788674 // MIN_VALUE_FIELD (<unidirectional association>)
	relation 3788674 --->
	  a role_name "MIN_VALUE_FIELD" init_value " \"minValue\"" class_relation const_relation public
	    comment "
The name of the <a href=\"Descriptor.html#minValue\">{@code
minValue}</a> field.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3788674 // MIN_VALUE_FIELD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3788802 // MXBEAN_FIELD (<unidirectional association>)
	relation 3788802 --->
	  a role_name "MXBEAN_FIELD" init_value " \"mxbean\"" class_relation const_relation public
	    comment "
The name of the <a href=\"Descriptor.html#mxbean\">{@code
mxbean}</a> field.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3788802 // MXBEAN_FIELD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3788930 // OPEN_TYPE_FIELD (<unidirectional association>)
	relation 3788930 --->
	  a role_name "OPEN_TYPE_FIELD" init_value " \"openType\"" class_relation const_relation public
	    comment "
The name of the <a href=\"Descriptor.html#openType\">{@code
openType}</a> field.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3788930 // OPEN_TYPE_FIELD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3789058 // ORIGINAL_TYPE_FIELD (<unidirectional association>)
	relation 3789058 --->
	  a role_name "ORIGINAL_TYPE_FIELD" init_value " \"originalType\"" class_relation const_relation public
	    comment "
The name of the <a href=\"Descriptor.html#originalType\">{@code
originalType}</a> field.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3789058 // ORIGINAL_TYPE_FIELD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9757442 "newMBeanProxy"
	class_operation public explicit_return_type "T"
	nparams 3
	  param inout name "connection" type class_ref 485250 // MBeanServerConnection
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "interfaceClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Make a proxy for a Standard MBean in a local or remote
MBean Server.</p>

<p>If you have an MBean Server {@code mbs} containing an MBean
with {@link ObjectName} {@code name}, and if the MBean's
management interface is described by the Java interface
{@code MyMBean}, you can construct a proxy for the MBean like
this:</p>

<pre>
MyMBean proxy = JMX.newMBeanProxy(mbs, name, MyMBean.class);
</pre>

<p>Suppose, for example, {@code MyMBean} looks like this:</p>

<pre>
public interface MyMBean {
    public String getSomeAttribute();
    public void setSomeAttribute(String value);
    public void someOperation(String param1, int param2);
}
</pre>

<p>Then you can execute:</p>

<ul>

<li>{@code proxy.getSomeAttribute()} which will result in a
call to {@code mbs.}{@link MBeanServerConnection#getAttribute
getAttribute}{@code (name, \"SomeAttribute\")}.

<li>{@code proxy.setSomeAttribute(\"whatever\")} which will result
in a call to {@code mbs.}{@link MBeanServerConnection#setAttribute
setAttribute}{@code (name, new Attribute(\"SomeAttribute\", \"whatever\"))}.

<li>{@code proxy.someOperation(\"param1\", 2)} which will be
translated into a call to {@code mbs.}{@link
MBeanServerConnection#invoke invoke}{@code (name, \"someOperation\", <etc>)}.

</ul>

<p>The object returned by this method is a
{@link Proxy} whose {@code InvocationHandler} is an
{@link MBeanServerInvocationHandler}.</p>

<p>This method is equivalent to {@link
#newMBeanProxy(MBeanServerConnection, ObjectName, Class,
boolean) newMBeanProxy(connection, objectName, interfaceClass,
false)}.</p>

@param connection the MBean server to forward to.
@param objectName the name of the MBean within
{@code connection} to forward to.
@param interfaceClass the management interface that the MBean
exports, which will also be implemented by the returned proxy.

@param <T> allows the compiler to know that if the {@code
interfaceClass} parameter is {@code MyMBean.class}, for
example, then the return type is {@code MyMBean}.

@return the new proxy instance.

@throws IllegalArgumentException if {@code interfaceClass} is not
a <a href=\"package-summary.html#mgIface\">compliant MBean
interface</a>
"
      end

      operation 9757570 "newMBeanProxy"
	class_operation public explicit_return_type "T"
	nparams 4
	  param inout name "connection" type class_ref 485250 // MBeanServerConnection
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "interfaceClass" type class_ref 130818 // Class
	  param inout name "notificationEmitter" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Make a proxy for a Standard MBean in a local or remote MBean
Server that may also support the methods of {@link
NotificationEmitter}.</p>

<p>This method behaves the same as {@link
#newMBeanProxy(MBeanServerConnection, ObjectName, Class)}, but
additionally, if {@code notificationEmitter} is {@code
true}, then the MBean is assumed to be a {@link
NotificationBroadcaster} or {@link NotificationEmitter} and the
returned proxy will implement {@link NotificationEmitter} as
well as {@code interfaceClass}.  A call to {@link
NotificationBroadcaster#addNotificationListener} on the proxy
will result in a call to {@link
MBeanServerConnection#addNotificationListener(ObjectName,
NotificationListener, NotificationFilter, Object)}, and
likewise for the other methods of {@link
NotificationBroadcaster} and {@link NotificationEmitter}.</p>

@param connection the MBean server to forward to.
@param objectName the name of the MBean within
{@code connection} to forward to.
@param interfaceClass the management interface that the MBean
exports, which will also be implemented by the returned proxy.
@param notificationEmitter make the returned proxy
implement {@link NotificationEmitter} by forwarding its methods
via {@code connection}.

@param <T> allows the compiler to know that if the {@code
interfaceClass} parameter is {@code MyMBean.class}, for
example, then the return type is {@code MyMBean}.

@return the new proxy instance.

@throws IllegalArgumentException if {@code interfaceClass} is not
a <a href=\"package-summary.html#mgIface\">compliant MBean
interface</a>
"
      end

      operation 9757698 "newMXBeanProxy"
	class_operation public explicit_return_type "T"
	nparams 3
	  param inout name "connection" type class_ref 485250 // MBeanServerConnection
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "interfaceClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a proxy for an MXBean in a local or remote MBean Server.

<p>If you have an MBean Server {@code mbs} containing an
MXBean with {@link ObjectName} {@code name}, and if the
MXBean's management interface is described by the Java
interface {@code MyMXBean}, you can construct a proxy for
the MXBean like this:</p>

<pre>
MyMXBean proxy = JMX.newMXBeanProxy(mbs, name, MyMXBean.class);
</pre>

<p>Suppose, for example, {@code MyMXBean} looks like this:</p>

<pre>
public interface MyMXBean {
    public String getSimpleAttribute();
    public void setSimpleAttribute(String value);
    public {@link java.lang.management.MemoryUsage} getMappedAttribute();
    public void setMappedAttribute(MemoryUsage memoryUsage);
    public MemoryUsage someOperation(String param1, MemoryUsage param2);
}
</pre>

<p>Then:</p>

<ul>

<li><p>{@code proxy.getSimpleAttribute()} will result in a
call to {@code mbs.}{@link MBeanServerConnection#getAttribute
getAttribute}{@code (name, \"SimpleAttribute\")}.</p>

<li><p>{@code proxy.setSimpleAttribute(\"whatever\")} will result
in a call to {@code mbs.}{@link
MBeanServerConnection#setAttribute setAttribute}<code>(name,
new Attribute(\"SimpleAttribute\", \"whatever\"))</code>.</p>

    <p>Because {@code String} is a <em>simple type</em>, in the
    sense of {@link javax.management.openmbean.SimpleType}, it
    is not changed in the context of an MXBean.  The MXBean
    proxy behaves the same as a Standard MBean proxy (see
    {@link #newMBeanProxy(MBeanServerConnection, ObjectName,
    Class) newMBeanProxy}) for the attribute {@code
    SimpleAttribute}.</p>

<li><p>{@code proxy.getMappedAttribute()} will result in a call
to {@code mbs.getAttribute(\"MappedAttribute\")}.  The MXBean
mapping rules mean that the actual type of the attribute {@code
MappedAttribute} will be {@link
javax.management.openmbean.CompositeData CompositeData} and
that is what the {@code mbs.getAttribute} call will return.
The proxy will then convert the {@code CompositeData} back into
the expected type {@code MemoryUsage} using the MXBean mapping
rules.</p>

<li><p>Similarly, {@code proxy.setMappedAttribute(memoryUsage)}
will convert the {@code MemoryUsage} argument into a {@code
CompositeData} before calling {@code mbs.setAttribute}.</p>

<li><p>{@code proxy.someOperation(\"whatever\", memoryUsage)}
will convert the {@code MemoryUsage} argument into a {@code
CompositeData} and call {@code mbs.invoke}.  The value returned
by {@code mbs.invoke} will be also be a {@code CompositeData},
and the proxy will convert this into the expected type {@code
MemoryUsage} using the MXBean mapping rules.</p>

</ul>

<p>The object returned by this method is a
{@link Proxy} whose {@code InvocationHandler} is an
{@link MBeanServerInvocationHandler}.</p>

<p>This method is equivalent to {@link
#newMXBeanProxy(MBeanServerConnection, ObjectName, Class,
boolean) newMXBeanProxy(connection, objectName, interfaceClass,
false)}.</p>

@param connection the MBean server to forward to.
@param objectName the name of the MBean within
{@code connection} to forward to.
@param interfaceClass the MXBean interface,
which will also be implemented by the returned proxy.

@param <T> allows the compiler to know that if the {@code
interfaceClass} parameter is {@code MyMXBean.class}, for
example, then the return type is {@code MyMXBean}.

@return the new proxy instance.

@throws IllegalArgumentException if {@code interfaceClass} is not
a {@link javax.management.MXBean compliant MXBean interface}
"
      end

      operation 9757826 "newMXBeanProxy"
	class_operation public explicit_return_type "T"
	nparams 4
	  param inout name "connection" type class_ref 485250 // MBeanServerConnection
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "interfaceClass" type class_ref 130818 // Class
	  param inout name "notificationEmitter" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Make a proxy for an MXBean in a local or remote MBean
Server that may also support the methods of {@link
NotificationEmitter}.</p>

<p>This method behaves the same as {@link
#newMXBeanProxy(MBeanServerConnection, ObjectName, Class)}, but
additionally, if {@code notificationEmitter} is {@code
true}, then the MXBean is assumed to be a {@link
NotificationBroadcaster} or {@link NotificationEmitter} and the
returned proxy will implement {@link NotificationEmitter} as
well as {@code interfaceClass}.  A call to {@link
NotificationBroadcaster#addNotificationListener} on the proxy
will result in a call to {@link
MBeanServerConnection#addNotificationListener(ObjectName,
NotificationListener, NotificationFilter, Object)}, and
likewise for the other methods of {@link
NotificationBroadcaster} and {@link NotificationEmitter}.</p>

@param connection the MBean server to forward to.
@param objectName the name of the MBean within
{@code connection} to forward to.
@param interfaceClass the MXBean interface,
which will also be implemented by the returned proxy.
@param notificationEmitter make the returned proxy
implement {@link NotificationEmitter} by forwarding its methods
via {@code connection}.

@param <T> allows the compiler to know that if the {@code
interfaceClass} parameter is {@code MyMXBean.class}, for
example, then the return type is {@code MyMXBean}.

@return the new proxy instance.

@throws IllegalArgumentException if {@code interfaceClass} is not
a {@link javax.management.MXBean compliant MXBean interface}
"
      end

      operation 9757954 "isMXBeanInterface"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "interfaceClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Test whether an interface is an MXBean interface.
An interface is an MXBean interface if it is public,
annotated {@link MXBean &#64;MXBean} or {@code @MXBean(true)}
or if it does not have an {@code @MXBean} annotation
and its name ends with \"{@code MXBean}\".</p>

@param interfaceClass The candidate interface.

@return true if {@code interfaceClass} is a
{@link javax.management.MXBean compliant MXBean interface}

@throws NullPointerException if {@code interfaceClass} is null.
"
      end

      operation 9758082 "createProxy"
	class_operation private explicit_return_type "T"
	nparams 5
	  param inout name "connection" type class_ref 485250 // MBeanServerConnection
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "interfaceClass" type class_ref 130818 // Class
	  param inout name "notificationEmitter" explicit_type "boolean"
	  param inout name "isMXBean" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Centralised M(X)Bean proxy creation code
@param connection {@linkplain MBeanServerConnection} to use
@param objectName M(X)Bean object name
@param interfaceClass M(X)Bean interface class
@param notificationEmitter Is a notification emitter?
@param isMXBean Is an MXBean?
@return Returns an M(X)Bean proxy generated for the provided interface class
@throws SecurityException
@throws IllegalArgumentException
"
      end
    end

    class 494082 "ImmutableDescriptor"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An immutable descriptor.
@since 1.6
"
      classrelation 3785730 // <realization>
	relation 3785730 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3785730 // <realization>
	  b parent class_ref 489986 // Descriptor
      end

      attribute 2264578 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8853308591080540165L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3785858 // names (<unidirectional association>)
	relation 3785858 --->
	  a role_name "names" multiplicity "[]" const_relation private
	    comment "
The names of the fields in this ImmutableDescriptor with their
original case.  The names must be in alphabetical order as determined
by {@link String#CASE_INSENSITIVE_ORDER}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3785858 // names (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3785986 // values (<unidirectional association>)
	relation 3785986 --->
	  a role_name "values" multiplicity "[]" const_relation private
	    comment "
The values of the fields in this ImmutableDescriptor.  The
elements in this array match the corresponding elements in the
{@code names} array.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3785986 // values (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 2264706 "hashCode"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3786114 // EMPTY_DESCRIPTOR (<unidirectional association>)
	relation 3786114 --->
	  a role_name "EMPTY_DESCRIPTOR" init_value "
            new ImmutableDescriptor()" class_relation const_relation public
	    comment "
An empty descriptor.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3786114 // EMPTY_DESCRIPTOR (<unidirectional association>)
	  b parent class_ref 494082 // ImmutableDescriptor
      end

      operation 9751426 "ImmutableDescriptor"
	public explicit_return_type ""
	nparams 2
	  param inout name "fieldNames" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "fieldValues" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a descriptor containing the given fields and values.

@throws IllegalArgumentException if either array is null, or
if the arrays have different sizes, or
if a field name is null or empty, or if the same field name
appears more than once.
"
      end

      operation 9751554 "ImmutableDescriptor"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "String...fields"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a descriptor containing the given fields.  Each String
must be of the form {@code fieldName=fieldValue}.  The field name
ends at the first {@code =} character; for example if the String
is {@code a=b=c} then the field name is {@code a} and its value
is {@code b=c}.

@throws IllegalArgumentException if the parameter is null, or
if a field name is empty, or if the same field name appears
more than once, or if one of the strings does not contain
an {@code =} character.
"
      end

      operation 9751682 "ImmutableDescriptor"
	public explicit_return_type ""
	nparams 1
	  param inout name "fields" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Construct a descriptor where the names and values of the fields
are the keys and values of the given Map.</p>

@throws IllegalArgumentException if the parameter is null, or
if a field name is null or empty, or if the same field name appears
more than once (which can happen because field names are not case
sensitive).
"
      end

      operation 9751810 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method can replace a deserialized instance of this
class with another instance.  For example, it might replace
a deserialized empty ImmutableDescriptor with
{@link #EMPTY_DESCRIPTOR}.

@return the replacement object, which may be {@code this}.

@throws InvalidObjectException if the read object has invalid fields.
"
      end

      operation 9751938 "makeMap"
	class_operation private return_type class_ref 500354 // SortedMap
	nparams 2
	  param inout name "fieldNames" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "fieldValues" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, ?> ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9752066 "makeMap"
	class_operation private return_type class_ref 500354 // SortedMap
	nparams 1
	  param inout name "fields" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, ?> ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9752194 "union"
	class_operation public return_type class_ref 494082 // ImmutableDescriptor
	nparams 1
	  param inout name "" explicit_type "Descriptor...descriptors"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return an {@code ImmutableDescriptor} whose contents are the union of
the given descriptors.  Every field name that appears in any of
the descriptors will appear in the result with the
value that it has when the method is called.  Subsequent changes
to any of the descriptors do not affect the ImmutableDescriptor
returned here.</p>

<p>In the simplest case, there is only one descriptor and the
returned {@code ImmutableDescriptor} is a copy of its fields at the
time this method is called:</p>

<pre>
Descriptor d = something();
ImmutableDescriptor copy = ImmutableDescriptor.union(d);
</pre>

@param descriptors the descriptors to be combined.  Any of the
descriptors can be null, in which case it is skipped.

@return an {@code ImmutableDescriptor} that is the union of the given
descriptors.  The returned object may be identical to one of the
input descriptors if it is an ImmutableDescriptor that contains all of
the required fields.

@throws IllegalArgumentException if two Descriptors contain the
same field name with different associated values.  Primitive array
values are considered the same if they are of the same type with
the same elements.  Object array values are considered the same if
{@link Arrays#deepEquals(Object[],Object[])} returns true.
"
      end

      operation 9752322 "isEmpty"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "d" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9752450 "findNonEmpty"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "ds" type class_ref 489986 // Descriptor
	multiplicity "[]"
	  param in name "start" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9752578 "fieldIndex"
	private explicit_return_type "int"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9752706 "getFieldValue"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "fieldName" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9752834 "getFields"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9752962 "getFieldValues"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "String...fieldNames"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9753090 "getFieldNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9753218 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares this descriptor to the given object.  The objects are equal if
the given object is also a Descriptor, and if the two Descriptors have
the same field names (possibly differing in case) and the same
associated values.  The respective values for a field in the two
Descriptors are equal if the following conditions hold:

<ul>
<li>If one value is null then the other must be too.</li>
<li>If one value is a primitive array then the other must be a primitive
array of the same type with the same elements.</li>
<li>If one value is an object array then the other must be too and
{@link Arrays#deepEquals(Object[],Object[])} must return true.</li>
<li>Otherwise {@link Object#equals(Object)} must return true.</li>
</ul>

@param o the object to compare with.

@return {@code true} if the objects are the same; {@code false}
otherwise.


 Note: this Javadoc is copied from javax.management.Descriptor
       due to 6369229."
      end

      operation 9753346 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Returns the hash code value for this descriptor.  The hash
code is computed as the sum of the hash codes for each field in
the descriptor.  The hash code of a field with name {@code n}
and value {@code v} is {@code n.toLowerCase().hashCode() ^ h}.
Here {@code h} is the hash code of {@code v}, computed as
follows:</p>

<ul>
<li>If {@code v} is null then {@code h} is 0.</li>
<li>If {@code v} is a primitive array then {@code h} is computed using
the appropriate overloading of {@code java.util.Arrays.hashCode}.</li>
<li>If {@code v} is an object array then {@code h} is computed using
{@link Arrays#deepHashCode(Object[])}.</li>
<li>Otherwise {@code h} is {@code v.hashCode()}.</li>
</ul>

@return A hash code value for this object.


 Note: this Javadoc is copied from javax.management.Descriptor
       due to 6369229."
      end

      operation 9753474 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9753602 "isValid"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if all of the fields have legal values given their
names.  This method always returns true, but a subclass can
override it to return false when appropriate.

@return true if the values are legal.

@exception RuntimeOperationsException if the validity checking fails.
The method returns false if the descriptor is not valid, but throws
this exception if the attempt to determine validity fails.
"
      end

      operation 9753730 "clone"
	public return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Returns a descriptor which is equal to this descriptor.
Changes to the returned descriptor will have no effect on this
descriptor, and vice versa.</p>

<p>This method returns the object on which it is called.
A subclass can override it
to return another object provided the contract is respected.

@exception RuntimeOperationsException for illegal value for field Names
or field Values.
If the descriptor construction fails for any reason, this exception will
be thrown.
"
      end

      operation 9753858 "setFields"
	public explicit_return_type "void"
	nparams 2
	  param inout name "fieldNames" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "fieldValues" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This operation is unsupported since this class is immutable.  If
this call would change a mutable descriptor with the same contents,
then a {@link RuntimeOperationsException} wrapping an
{@link UnsupportedOperationException} is thrown.  Otherwise,
the behavior is the same as it would be for a mutable descriptor:
either an exception is thrown because of illegal parameters, or
there is no effect.
"
      end

      operation 9753986 "setField"
	public explicit_return_type "void"
	nparams 2
	  param inout name "fieldName" type class_ref 128130 // String
	  param inout name "fieldValue" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1187842 // RuntimeOperationsException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This operation is unsupported since this class is immutable.  If
this call would change a mutable descriptor with the same contents,
then a {@link RuntimeOperationsException} wrapping an
{@link UnsupportedOperationException} is thrown.  Otherwise,
the behavior is the same as it would be for a mutable descriptor:
either an exception is thrown because of illegal parameters, or
there is no effect.
"
      end

      operation 9754114 "removeField"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fieldName" type class_ref 128130 // String
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a field from the descriptor.

@param fieldName String name of the field to be removed.
If the field name is illegal or the field is not found,
no exception is thrown.

@exception RuntimeOperationsException if a field of the given name
exists and the descriptor is immutable.  The wrapped exception will
be an {@link UnsupportedOperationException}.
"
      end

      operation 9754242 "nonNullDescriptor"
	class_operation package return_type class_ref 489986 // Descriptor
	nparams 1
	  param inout name "d" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9754370 "checkIllegalFieldName"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9754498 "unsupported"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9754626 "illegal"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 495746 "MBeanServerBuilder"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>This class represents a builder that creates a default
{@link javax.management.MBeanServer} implementation.
The JMX {@link javax.management.MBeanServerFactory} allows
applications to provide their custom MBeanServer
implementation by providing a subclass of this class.</p>

@see MBeanServer
@see MBeanServerFactory

@since 1.5
"
      operation 2968578 "MBeanServerBuilder"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Public default constructor.
"
      end

      operation 2968706 "newMBeanServerDelegate"
	public return_type class_ref 488066 // MBeanServerDelegate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method creates a new MBeanServerDelegate for a new MBeanServer.
When creating a new MBeanServer the
{@link javax.management.MBeanServerFactory} first calls this method
in order to create a new MBeanServerDelegate.
<br>Then it calls
<code>newMBeanServer(defaultDomain,outer,delegate)</code>
passing the <var>delegate</var> that should be used by the MBeanServer
implementation.
<p>Note that the passed <var>delegate</var> might not be directly the
MBeanServerDelegate that was returned by this method. It could
be, for instance, a new object wrapping the previously
returned object.

@return A new {@link javax.management.MBeanServerDelegate}.
"
      end

      operation 2968834 "newMBeanServer"
	public return_type class_ref 485122 // MBeanServer
	nparams 3
	  param inout name "defaultDomain" type class_ref 128130 // String
	  param inout name "outer" type class_ref 485122 // MBeanServer
	  param inout name "delegate" type class_ref 488066 // MBeanServerDelegate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method creates a new MBeanServer implementation object.
When creating a new MBeanServer the
{@link javax.management.MBeanServerFactory} first calls
<code>newMBeanServerDelegate()</code> in order to obtain a new
{@link javax.management.MBeanServerDelegate} for the new
MBeanServer. Then it calls
<code>newMBeanServer(defaultDomain,outer,delegate)</code>
passing the <var>delegate</var> that should be used by the MBeanServer
implementation.
<p>Note that the passed <var>delegate</var> might not be directly the
MBeanServerDelegate that was returned by this implementation. It could
be, for instance, a new object wrapping the previously
returned delegate.
<p>The <var>outer</var> parameter is a pointer to the MBeanServer that
should be passed to the {@link javax.management.MBeanRegistration}
interface when registering MBeans inside the MBeanServer.
If <var>outer</var> is <code>null</code>, then the MBeanServer
implementation must use its own <code>this</code> reference when
invoking the {@link javax.management.MBeanRegistration} interface.
<p>This makes it possible for a MBeanServer implementation to wrap
another MBeanServer implementation, in order to implement, e.g,
security checks, or to prevent access to the actual MBeanServer
implementation by returning a pointer to a wrapping object.

@param defaultDomain Default domain of the new MBeanServer.
@param outer A pointer to the MBeanServer object that must be
       passed to the MBeans when invoking their
       {@link javax.management.MBeanRegistration} interface.
@param delegate A pointer to the MBeanServerDelegate associated
       with the new MBeanServer. The new MBeanServer must register
       this MBean in its MBean repository.

@return A new private implementation of an MBeanServer.
"
      end
    end

    class 496642 "MBeanAttributeInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes an MBean attribute exposed for management.  Instances of
this class are immutable.  Subclasses may be mutable but this is
not recommended.

@since 1.5

 serialVersionUID not constant"
      classrelation 3790594 // <generalisation>
	relation 3790594 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3790594 // <generalisation>
	  b parent class_ref 1188866 // MBeanFeatureInfo
      end

      classrelation 3790722 // <realization>
	relation 3790722 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3790722 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 2266242 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      extra_member 179714 "initialization"
	
	cpp "" ""
	java "  static {
        /* For complicated reasons, the serialVersionUID changed
           between JMX 1.0 and JMX 1.1, even though JMX 1.1 did not
           have compatibility code for this class.  So the
           serialization produced by this class with JMX 1.2 and
           jmx.serial.form=1.0 is not the same as that produced by
           this class with JMX 1.1 and jmx.serial.form=1.0.  However,
           the serialization without that property is the same, and
           that is the only form required by JMX 1.2.
        */
        long uid = 8644704819898565848L;
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            if (\"1.0\".equals(form))
                uid = 7043855487133450673L;
        } catch (Exception e) {
            // OK: exception means no compat with 1.0, too bad
        }
        serialVersionUID = uid;
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3790850 // NO_ATTRIBUTES (<unidirectional association>)
	relation 3790850 --->
	  a role_name "NO_ATTRIBUTES" multiplicity "[]" init_value "
        new MBeanAttributeInfo[0]" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3790850 // NO_ATTRIBUTES (<unidirectional association>)
	  b parent class_ref 496642 // MBeanAttributeInfo
      end

      classrelation 3790978 // attributeType (<unidirectional association>)
	relation 3790978 --->
	  a role_name "attributeType" const_relation private
	    comment "
@serial The actual attribute type.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3790978 // attributeType (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2266370 "isWrite"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial The attribute write right.

"
      end

      attribute 2266498 "isRead"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial The attribute read right.

"
      end

      attribute 2266626 "is"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial Indicates if this method is a \"is\"

"
      end

      operation 9760770 "MBeanAttributeInfo"
	public explicit_return_type ""
	nparams 6
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanAttributeInfo</CODE> object.

@param name The name of the attribute.
@param type The type or class name of the attribute.
@param description A human readable description of the attribute.
@param isReadable True if the attribute has a getter method, false otherwise.
@param isWritable True if the attribute has a setter method, false otherwise.
@param isIs True if this attribute has an \"is\" getter, false otherwise.

@throws IllegalArgumentException if {@code isIs} is true but
{@code isReadable} is not, or if {@code isIs} is true and
{@code type} is not {@code boolean} or {@code java.lang.Boolean}.
(New code should always use {@code boolean} rather than
{@code java.lang.Boolean}.)
"
      end

      operation 9760898 "MBeanAttributeInfo"
	public explicit_return_type ""
	nparams 7
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "isReadable" explicit_type "boolean"
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isIs" explicit_type "boolean"
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanAttributeInfo</CODE> object.

@param name The name of the attribute.
@param type The type or class name of the attribute.
@param description A human readable description of the attribute.
@param isReadable True if the attribute has a getter method, false otherwise.
@param isWritable True if the attribute has a setter method, false otherwise.
@param isIs True if this attribute has an \"is\" getter, false otherwise.
@param descriptor The descriptor for the attribute.  This may be null
which is equivalent to an empty descriptor.

@throws IllegalArgumentException if {@code isIs} is true but
{@code isReadable} is not, or if {@code isIs} is true and
{@code type} is not {@code boolean} or {@code java.lang.Boolean}.
(New code should always use {@code boolean} rather than
{@code java.lang.Boolean}.)

@since 1.6
"
      end

      operation 9761026 "MBeanAttributeInfo"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "getter" type class_ref 137858 // Method
	  param inout name "setter" type class_ref 137858 // Method
	nexceptions 1
	  exception class_ref 487554 // IntrospectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>This constructor takes the name of a simple attribute, and Method
objects for reading and writing the attribute.  The {@link Descriptor}
of the constructed object will include fields contributed by any
annotations on the {@code Method} objects that contain the
{@link DescriptorKey} meta-annotation.

@param name The programmatic name of the attribute.
@param description A human readable description of the attribute.
@param getter The method used for reading the attribute value.
         May be null if the property is write-only.
@param setter The method used for writing the attribute value.
         May be null if the attribute is read-only.
@exception IntrospectionException There is a consistency
problem in the definition of this attribute.
"
      end

      operation 9761154 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a shallow clone of this instance.
The clone is obtained by simply calling <tt>super.clone()</tt>,
thus calling the default native shallow cloning mechanism
implemented by <tt>Object.clone()</tt>.
No deeper cloning of any internal field is made.</p>

<p>Since this class is immutable, cloning is chiefly of
interest to subclasses.</p>
"
      end

      operation 9761282 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class name of the attribute.

@return the class name.
"
      end

      operation 9761410 "isReadable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether the value of the attribute can be read.

@return True if the attribute can be read, false otherwise.
"
      end

      operation 9761538 "isWritable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether new values can be written to the attribute.

@return True if the attribute can be written to, false otherwise.
"
      end

      operation 9761666 "isIs"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if this attribute has an \"is\" getter.

@return true if this attribute has an \"is\" getter.
"
      end

      operation 9761794 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9761922 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this MBeanAttributeInfo to another.

@param o the object to compare to.

@return true if and only if <code>o</code> is an MBeanAttributeInfo such
that its {@link #getName()}, {@link #getType()}, {@link
#getDescription()}, {@link #isReadable()}, {@link
#isWritable()}, and {@link #isIs()} values are equal (not
necessarily identical) to those of this MBeanAttributeInfo.
"
      end

      operation 9762050 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " We do not include everything in the hashcode.  We assume that
if two operations are different they'll probably have different
names or types.  The penalty we pay when this assumption is
wrong should be less than the penalty we would pay if it were
right and we needlessly hashed in the description and parameter
array.  "
      end

      operation 9762178 "isIs"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "getter" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9762306 "attributeType"
	class_operation private return_type class_ref 128130 // String
	nparams 2
	  param inout name "getter" type class_ref 137858 // Method
	  param inout name "setter" type class_ref 137858 // Method
	nexceptions 1
	  exception class_ref 487554 // IntrospectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the type of the attribute.
"
      end
    end

    class 496770 "MBeanOperationInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes a management operation exposed by an MBean.  Instances of
this class are immutable.  Subclasses may be mutable but this is
not recommended.

@since 1.5
"
      classrelation 3794306 // <generalisation>
	relation 3794306 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3794306 // <generalisation>
	  b parent class_ref 1188866 // MBeanFeatureInfo
      end

      classrelation 3794434 // <realization>
	relation 3794434 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3794434 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 2267778 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -6178860474881375330L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3794562 // NO_OPERATIONS (<unidirectional association>)
	relation 3794562 --->
	  a role_name "NO_OPERATIONS" multiplicity "[]" init_value "
        new MBeanOperationInfo[0]" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3794562 // NO_OPERATIONS (<unidirectional association>)
	  b parent class_ref 496770 // MBeanOperationInfo
      end

      attribute 2267906 "INFO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the operation is read-like:
it returns information but does not change any state.

"
      end

      attribute 2268034 "ACTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the operation is write-like: it has an effect but does
not return any information from the MBean.

"
      end

      attribute 2268162 "ACTION_INFO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the operation is both read-like and write-like:
it has an effect, and it also returns information from the MBean.

"
      end

      attribute 2268290 "UNKNOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates that the impact of the operation is unknown or cannot be
expressed using one of the other values.

"
      end

      classrelation 3794690 // type (<unidirectional association>)
	relation 3794690 --->
	  a role_name "type" const_relation private
	    comment "
@serial The method's return value.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3794690 // type (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3794818 // signature (<unidirectional association>)
	relation 3794818 --->
	  a role_name "signature" multiplicity "[]" const_relation private
	    comment "
@serial The signature of the method, that is, the class names
of the arguments.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3794818 // signature (<unidirectional association>)
	  b parent class_ref 1188994 // MBeanParameterInfo
      end

      attribute 2268418 "impact"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial The impact of the method, one of
        <CODE>INFO</CODE>,
        <CODE>ACTION</CODE>,
        <CODE>ACTION_INFO</CODE>,
        <CODE>UNKNOWN</CODE>

"
      end

      attribute 2268546 "arrayGettersSafe"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @see MBeanInfo#arrayGettersSafe 
"
      end

      operation 9768834 "MBeanOperationInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "description" type class_ref 128130 // String
	  param inout name "method" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanOperationInfo</CODE> object.  The
{@link Descriptor} of the constructed object will include
fields contributed by any annotations on the {@code Method}
object that contain the {@link DescriptorKey} meta-annotation.

@param method The <CODE>java.lang.reflect.Method</CODE> object
describing the MBean operation.
@param description A human readable description of the operation.
"
      end

      operation 9768962 "MBeanOperationInfo"
	public explicit_return_type ""
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	  param inout name "type" type class_ref 128130 // String
	  param in name "impact" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanOperationInfo</CODE> object.

@param name The name of the method.
@param description A human readable description of the operation.
@param signature <CODE>MBeanParameterInfo</CODE> objects
describing the parameters(arguments) of the method.  This may be
null with the same effect as a zero-length array.
@param type The type of the method's return value.
@param impact The impact of the method, one of
{@link #INFO}, {@link #ACTION}, {@link #ACTION_INFO},
{@link #UNKNOWN}.
"
      end

      operation 9769090 "MBeanOperationInfo"
	public explicit_return_type ""
	nparams 6
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	  param inout name "type" type class_ref 128130 // String
	  param in name "impact" explicit_type "int"
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanOperationInfo</CODE> object.

@param name The name of the method.
@param description A human readable description of the operation.
@param signature <CODE>MBeanParameterInfo</CODE> objects
describing the parameters(arguments) of the method.  This may be
null with the same effect as a zero-length array.
@param type The type of the method's return value.
@param impact The impact of the method, one of
{@link #INFO}, {@link #ACTION}, {@link #ACTION_INFO},
{@link #UNKNOWN}.
@param descriptor The descriptor for the operation.  This may be null
which is equivalent to an empty descriptor.

@since 1.6
"
      end

      operation 9769218 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Returns a shallow clone of this instance.
The clone is obtained by simply calling <tt>super.clone()</tt>,
thus calling the default native shallow cloning mechanism
implemented by <tt>Object.clone()</tt>.
No deeper cloning of any internal field is made.</p>

<p>Since this class is immutable, cloning is chiefly of interest
to subclasses.</p>
"
      end

      operation 9769346 "getReturnType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of the method's return value.

@return the return type.
"
      end

      operation 9769474 "getSignature"
	public return_type class_ref 1188994 // MBeanParameterInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the list of parameters for this operation.  Each
parameter is described by an <CODE>MBeanParameterInfo</CODE>
object.</p>

<p>The returned array is a shallow copy of the internal array,
which means that it is a copy of the internal array of
references to the <CODE>MBeanParameterInfo</CODE> objects but
that each referenced <CODE>MBeanParameterInfo</CODE> object is
not copied.</p>

@return  An array of <CODE>MBeanParameterInfo</CODE> objects.
"
      end

      operation 9769602 "fastGetSignature"
	private return_type class_ref 1188994 // MBeanParameterInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9769730 "getImpact"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the impact of the method, one of
<CODE>INFO</CODE>, <CODE>ACTION</CODE>, <CODE>ACTION_INFO</CODE>, <CODE>UNKNOWN</CODE>.

@return the impact code.
"
      end

      operation 9769858 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9769986 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compare this MBeanOperationInfo to another.

@param o the object to compare to.

@return true if and only if <code>o</code> is an MBeanOperationInfo such
that its {@link #getName()}, {@link #getReturnType()}, {@link
#getDescription()}, {@link #getImpact()}, {@link #getDescriptor()}
and {@link #getSignature()} values are equal (not necessarily identical)
to those of this MBeanConstructorInfo.  Two signature arrays
are equal if their elements are pairwise equal.
"
      end

      operation 9770114 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " We do not include everything in the hashcode.  We assume that
if two operations are different they'll probably have different
names or types.  The penalty we pay when this assumption is
wrong should be less than the penalty we would pay if it were
right and we needlessly hashed in the description and the
parameter array.  "
      end

      operation 9770242 "methodSignature"
	class_operation private return_type class_ref 1188994 // MBeanParameterInfo
	nparams 1
	  param inout name "method" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9770370 "parameters"
	class_operation package return_type class_ref 1188994 // MBeanParameterInfo
	nparams 2
	  param inout name "classes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "annots" type class_ref 494850 // Annotation
	multiplicity "[][]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<?>[] ${p0}, ${t1}[][] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 497154 "MBeanNotificationInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>The <CODE>MBeanNotificationInfo</CODE> class is used to describe the
characteristics of the different notification instances
emitted by an MBean, for a given Java class of notification.
If an MBean emits notifications that can be instances of different Java classes,
then the metadata for that MBean should provide an <CODE>MBeanNotificationInfo</CODE>
object for each of these notification Java classes.</p>

<p>Instances of this class are immutable.  Subclasses may be
mutable but this is not recommended.</p>

<p>This class extends <CODE>javax.management.MBeanFeatureInfo</CODE>
and thus provides <CODE>name</CODE> and <CODE>description</CODE> fields.
The <CODE>name</CODE> field should be the fully qualified Java class name of
the notification objects described by this class.</p>

<p>The <CODE>getNotifTypes</CODE> method returns an array of
strings containing the notification types that the MBean may
emit. The notification type is a dot-notation string which
describes what the emitted notification is about, not the Java
class of the notification.  A single generic notification class can
be used to send notifications of several types.  All of these types
are returned in the string array result of the
<CODE>getNotifTypes</CODE> method.

@since 1.5
"
      classrelation 3793666 // <generalisation>
	relation 3793666 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3793666 // <generalisation>
	  b parent class_ref 1188866 // MBeanFeatureInfo
      end

      classrelation 3793794 // <realization>
	relation 3793794 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3793794 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 2267522 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -3888371564530107064L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3793922 // NO_TYPES (<unidirectional association>)
	relation 3793922 --->
	  a role_name "NO_TYPES" multiplicity "[]" init_value " new String[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3793922 // NO_TYPES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3794050 // NO_NOTIFICATIONS (<unidirectional association>)
	relation 3794050 --->
	  a role_name "NO_NOTIFICATIONS" multiplicity "[]" init_value "
        new MBeanNotificationInfo[0]" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3794050 // NO_NOTIFICATIONS (<unidirectional association>)
	  b parent class_ref 497154 // MBeanNotificationInfo
      end

      classrelation 3794178 // types (<unidirectional association>)
	relation 3794178 --->
	  a role_name "types" multiplicity "[]" private
	    comment "
@serial The different types of the notification.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3794178 // types (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2267650 "arrayGettersSafe"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @see MBeanInfo#arrayGettersSafe 
"
      end

      operation 9767682 "MBeanNotificationInfo"
	public explicit_return_type ""
	nparams 3
	  param inout name "notifTypes" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanNotificationInfo</CODE> object.

@param notifTypes The array of strings (in dot notation)
containing the notification types that the MBean may emit.
This may be null with the same effect as a zero-length array.
@param name The fully qualified Java class name of the
described notifications.
@param description A human readable description of the data.
"
      end

      operation 9767810 "MBeanNotificationInfo"
	public explicit_return_type ""
	nparams 4
	  param inout name "notifTypes" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanNotificationInfo</CODE> object.

@param notifTypes The array of strings (in dot notation)
containing the notification types that the MBean may emit.
This may be null with the same effect as a zero-length array.
@param name The fully qualified Java class name of the
described notifications.
@param description A human readable description of the data.
@param descriptor The descriptor for the notifications.  This may be null
which is equivalent to an empty descriptor.

@since 1.6
"
      end

      operation 9767938 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow clone of this instance.
The clone is obtained by simply calling <tt>super.clone()</tt>,
thus calling the default native shallow cloning mechanism
implemented by <tt>Object.clone()</tt>.
No deeper cloning of any internal field is made.
"
      end

      operation 9768066 "getNotifTypes"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of strings (in dot notation) containing the
notification types that the MBean may emit.

@return the array of strings.  Changing the returned array has no
effect on this MBeanNotificationInfo.
"
      end

      operation 9768194 "fastGetNotifTypes"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9768322 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9768450 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this MBeanNotificationInfo to another.

@param o the object to compare to.

@return true if and only if <code>o</code> is an MBeanNotificationInfo
such that its {@link #getName()}, {@link #getDescription()},
{@link #getDescriptor()},
and {@link #getNotifTypes()} values are equal (not necessarily
identical) to those of this MBeanNotificationInfo.  Two
notification type arrays are equal if their corresponding
elements are equal.  They are not equal if they have the same
elements but in a different order.
"
      end

      operation 9768578 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9768706 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ois" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 497282 "MBeanConstructorInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes a constructor exposed by an MBean.  Instances of this
class are immutable.  Subclasses may be mutable but this is not
recommended.

@since 1.5
"
      classrelation 3791106 // <generalisation>
	relation 3791106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3791106 // <generalisation>
	  b parent class_ref 1188866 // MBeanFeatureInfo
      end

      classrelation 3791234 // <realization>
	relation 3791234 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3791234 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 2266754 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 4433990064191844427L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3791362 // NO_CONSTRUCTORS (<unidirectional association>)
	relation 3791362 --->
	  a role_name "NO_CONSTRUCTORS" multiplicity "[]" init_value "
        new MBeanConstructorInfo[0]" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3791362 // NO_CONSTRUCTORS (<unidirectional association>)
	  b parent class_ref 497282 // MBeanConstructorInfo
      end

      attribute 2266882 "arrayGettersSafe"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " @see MBeanInfo#arrayGettersSafe 
"
      end

      classrelation 3791490 // signature (<unidirectional association>)
	relation 3791490 --->
	  a role_name "signature" multiplicity "[]" const_relation private
	    comment "
@serial The signature of the method, that is, the class names of the arguments.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3791490 // signature (<unidirectional association>)
	  b parent class_ref 1188994 // MBeanParameterInfo
      end

      operation 9762434 "MBeanConstructorInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "description" type class_ref 128130 // String
	  param inout name "constructor" type class_ref 189186 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanConstructorInfo</CODE> object.  The
{@link Descriptor} of the constructed object will include
fields contributed by any annotations on the {@code
Constructor} object that contain the {@link DescriptorKey}
meta-annotation.

@param description A human readable description of the operation.
@param constructor The <CODE>java.lang.reflect.Constructor</CODE>
object describing the MBean constructor.
"
      end

      operation 9762562 "MBeanConstructorInfo"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanConstructorInfo</CODE> object.

@param name The name of the constructor.
@param signature <CODE>MBeanParameterInfo</CODE> objects
describing the parameters(arguments) of the constructor.  This
may be null with the same effect as a zero-length array.
@param description A human readable description of the constructor.
"
      end

      operation 9762690 "MBeanConstructorInfo"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanConstructorInfo</CODE> object.

@param name The name of the constructor.
@param signature <CODE>MBeanParameterInfo</CODE> objects
describing the parameters(arguments) of the constructor.  This
may be null with the same effect as a zero-length array.
@param description A human readable description of the constructor.
@param descriptor The descriptor for the constructor.  This may be null
which is equivalent to an empty descriptor.

@since 1.6
"
      end

      operation 9762818 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a shallow clone of this instance.  The clone is
obtained by simply calling <tt>super.clone()</tt>, thus calling
the default native shallow cloning mechanism implemented by
<tt>Object.clone()</tt>.  No deeper cloning of any internal
field is made.</p>

<p>Since this class is immutable, cloning is chiefly of
interest to subclasses.</p>
"
      end

      operation 9762946 "getSignature"
	public return_type class_ref 1188994 // MBeanParameterInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the list of parameters for this constructor.  Each
parameter is described by an <CODE>MBeanParameterInfo</CODE>
object.</p>

<p>The returned array is a shallow copy of the internal array,
which means that it is a copy of the internal array of
references to the <CODE>MBeanParameterInfo</CODE> objects but
that each referenced <CODE>MBeanParameterInfo</CODE> object is
not copied.</p>

@return  An array of <CODE>MBeanParameterInfo</CODE> objects.
"
      end

      operation 9763074 "fastGetSignature"
	private return_type class_ref 1188994 // MBeanParameterInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9763202 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9763330 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this MBeanConstructorInfo to another.

@param o the object to compare to.

@return true if and only if <code>o</code> is an MBeanConstructorInfo such
that its {@link #getName()}, {@link #getDescription()},
{@link #getSignature()}, and {@link #getDescriptor()}
values are equal (not necessarily
identical) to those of this MBeanConstructorInfo.  Two
signature arrays are equal if their elements are pairwise
equal.
"
      end

      operation 9763458 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Unlike attributes and operations, it's quite likely we'll have
more than one constructor with the same name and even
description, so we include the parameter array in the hashcode.
We don't include the description, though, because it could be
quite long and yet the same between constructors.  Likewise for
the descriptor.  "
      end

      operation 9763586 "constructorSignature"
	class_operation private return_type class_ref 1188994 // MBeanParameterInfo
	nparams 1
	  param inout name "cn" type class_ref 189186 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 497538 "MBeanServerDelegateMBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the management interface  of an object of class MBeanServerDelegate.

@since 1.5
"
      operation 2977154 "getMBeanServerId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the MBean server agent identity.

@return the agent identity.
"
      end

      operation 2977282 "getSpecificationName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the full name of the JMX specification implemented
by this product.

@return the specification name.
"
      end

      operation 2977410 "getSpecificationVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version of the JMX specification implemented
by this product.

@return the specification version.
"
      end

      operation 2977538 "getSpecificationVendor"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the vendor of the JMX specification implemented
by this product.

@return the specification vendor.
"
      end

      operation 2977666 "getImplementationName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the JMX implementation name (the name of this product).

@return the implementation name.
"
      end

      operation 2977794 "getImplementationVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the JMX implementation version (the version of this product).

@return the implementation version.
"
      end

      operation 2977922 "getImplementationVendor"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the JMX implementation vendor (the vendor of this product).

@return the implementation vendor.
"
      end
    end

    class 497666 "NotificationEmitter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Interface implemented by an MBean that emits Notifications. It
allows a listener to be registered with the MBean as a notification
listener.</p>

<h3>Notification dispatch</h3>

<p>When an MBean emits a notification, it considers each listener that has been
added with {@link #addNotificationListener addNotificationListener} and not
subsequently removed with {@link #removeNotificationListener removeNotificationListener}.
If a filter was provided with that listener, and if the filter's
{@link NotificationFilter#isNotificationEnabled isNotificationEnabled} method returns
false, the listener is ignored.  Otherwise, the listener's
{@link NotificationListener#handleNotification handleNotification} method is called with
the notification, as well as the handback object that was provided to
{@code addNotificationListener}.</p>

<p>If the same listener is added more than once, it is considered as many times as it was
added.  It is often useful to add the same listener with different filters or handback
objects.</p>

<p>Implementations of this interface can differ regarding the thread in which the methods
of filters and listeners are called.</p>

<p>If the method call of a filter or listener throws an {@link Exception}, then that
exception should not prevent other listeners from being invoked.  However, if the method
call throws an {@link Error}, then it is recommended that processing of the notification
stop at that point, and if it is possible to propagate the {@code Error} to the sender of
the notification, this should be done.</p>

<p>This interface should be used by new code in preference to the
{@link NotificationBroadcaster} interface.</p>

<p>Implementations of this interface and of {@code NotificationBroadcaster}
should be careful about synchronization.  In particular, it is not a good
idea for an implementation to hold any locks while it is calling a
listener.  To deal with the possibility that the list of listeners might
change while a notification is being dispatched, a good strategy is to
use a {@link CopyOnWriteArrayList} for this list.

@since 1.5
"
      classrelation 976514 // <generalisation>
	relation 976514 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 976514 // <generalisation>
	  b parent class_ref 497794 // NotificationBroadcaster
      end

      operation 2978434 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Removes a listener from this MBean.  The MBean must have a
listener that exactly matches the given <code>listener</code>,
<code>filter</code>, and <code>handback</code> parameters.  If
there is more than one such listener, only one is removed.</p>

<p>The <code>filter</code> and <code>handback</code> parameters
may be null if and only if they are null in a listener to be
removed.</p>

@param listener A listener that was previously added to this
MBean.
@param filter The filter that was specified when the listener
was added.
@param handback The handback that was specified when the listener was
added.

@exception ListenerNotFoundException The listener is not
registered with the MBean, or it is not registered with the
given filter and handback.
"
      end
    end

    class 497794 "NotificationBroadcaster"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Interface implemented by an MBean that emits Notifications. It
allows a listener to be registered with the MBean as a notification
listener.</p>

<h3>Notification dispatch</h3>

<p>When an MBean emits a notification, it considers each listener that has been
added with {@link #addNotificationListener addNotificationListener} and not
subsequently removed with {@link #removeNotificationListener removeNotificationListener}.
If a filter was provided with that listener, and if the filter's
{@link NotificationFilter#isNotificationEnabled isNotificationEnabled} method returns
false, the listener is ignored.  Otherwise, the listener's
{@link NotificationListener#handleNotification handleNotification} method is called with
the notification, as well as the handback object that was provided to
{@code addNotificationListener}.</p>

<p>If the same listener is added more than once, it is considered as many times as it was
added.  It is often useful to add the same listener with different filters or handback
objects.</p>

<p>Implementations of this interface can differ regarding the thread in which the methods
of filters and listeners are called.</p>

<p>If the method call of a filter or listener throws an {@link Exception}, then that
exception should not prevent other listeners from being invoked.  However, if the method
call throws an {@link Error}, then it is recommended that processing of the notification
stop at that point, and if it is possible to propagate the {@code Error} to the sender of
the notification, this should be done.</p>

<p>New code should use the {@link NotificationEmitter} interface
instead.</p>

<p>Implementations of this interface and of {@code NotificationEmitter}
should be careful about synchronization.  In particular, it is not a good
idea for an implementation to hold any locks while it is calling a
listener.  To deal with the possibility that the list of listeners might
change while a notification is being dispatched, a good strategy is to
use a {@link CopyOnWriteArrayList} for this list.

@since 1.5
"
      operation 2978050 "addNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to this MBean.

@param listener The listener object which will handle the
notifications emitted by the broadcaster.
@param filter The filter object. If filter is null, no
filtering will be performed before handling notifications.
@param handback An opaque object to be sent back to the
listener when a notification is emitted. This object cannot be
used by the Notification broadcaster object. It should be
resent unchanged with the notification to the listener.

@exception IllegalArgumentException Listener parameter is null.

@see #removeNotificationListener
"
      end

      operation 2978178 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 487042 // NotificationListener
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener from this MBean.  If the listener
has been registered with different handback objects or
notification filters, all entries corresponding to the listener
will be removed.

@param listener A listener that was previously added to this
MBean.

@exception ListenerNotFoundException The listener is not
registered with the MBean.

@see #addNotificationListener
@see NotificationEmitter#removeNotificationListener
"
      end

      operation 2978306 "getNotificationInfo"
	public return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns an array indicating, for each notification this
MBean may send, the name of the Java class of the notification
and the notification type.</p>

<p>It is not illegal for the MBean to send notifications not
described in this array.  However, some clients of the MBean
server may depend on the array being complete for their correct
functioning.</p>

@return the array of possible notifications.
"
      end
    end

    class 497922 "NotificationBroadcasterSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Provides an implementation of {@link
javax.management.NotificationEmitter NotificationEmitter}
interface.  This can be used as the super class of an MBean that
sends notifications.</p>

<p>By default, the notification dispatch model is synchronous.
That is, when a thread calls sendNotification, the
<code>NotificationListener.handleNotification</code> method of each listener
is called within that thread. You can override this default
by overriding <code>handleNotification</code> in a subclass, or by passing an
Executor to the constructor.</p>

<p>If the method call of a filter or listener throws an {@link Exception},
then that exception does not prevent other listeners from being invoked.  However,
if the method call of a filter or of {@code Executor.execute} or of
{@code handleNotification} (when no {@code Excecutor} is specified) throws an
{@link Error}, then that {@code Error} is propagated to the caller of
{@link #sendNotification sendNotification}.</p>

<p>Remote listeners added using the JMX Remote API (see JMXConnector) are not
usually called synchronously.  That is, when sendNotification returns, it is
not guaranteed that any remote listeners have yet received the notification.</p>

@since 1.5
"
      classrelation 3798402 // <realization>
	relation 3798402 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3798402 // <realization>
	  b parent class_ref 497666 // NotificationEmitter
      end

      operation 9780610 "NotificationBroadcasterSupport"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a NotificationBroadcasterSupport where each listener is invoked by the
thread sending the notification. This constructor is equivalent to
{@link NotificationBroadcasterSupport#NotificationBroadcasterSupport(Executor,
MBeanNotificationInfo[] info) NotificationBroadcasterSupport(null, null)}.
"
      end

      operation 9780738 "NotificationBroadcasterSupport"
	public explicit_return_type ""
	nparams 1
	  param inout name "executor" type class_ref 503426 // Executor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a NotificationBroadcasterSupport where each listener is invoked using
the given {@link java.util.concurrent.Executor}. When {@link #sendNotification
sendNotification} is called, a listener is selected if it was added with a null
{@link NotificationFilter}, or if {@link NotificationFilter#isNotificationEnabled
isNotificationEnabled} returns true for the notification being sent. The call to
<code>NotificationFilter.isNotificationEnabled</code> takes place in the thread
that called <code>sendNotification</code>. Then, for each selected listener,
{@link Executor#execute executor.execute} is called with a command
that calls the <code>handleNotification</code> method.
This constructor is equivalent to
{@link NotificationBroadcasterSupport#NotificationBroadcasterSupport(Executor,
MBeanNotificationInfo[] info) NotificationBroadcasterSupport(executor, null)}.
@param executor an executor used by the method <code>sendNotification</code> to
send each notification. If it is null, the thread calling <code>sendNotification</code>
will invoke the <code>handleNotification</code> method itself.
@since 1.6
"
      end

      operation 9780866 "NotificationBroadcasterSupport"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "MBeanNotificationInfo...info"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a NotificationBroadcasterSupport with information
about the notifications that may be sent.  Each listener is
invoked by the thread sending the notification.  This
constructor is equivalent to {@link
NotificationBroadcasterSupport#NotificationBroadcasterSupport(Executor,
MBeanNotificationInfo[] info)
NotificationBroadcasterSupport(null, info)}.</p>

<p>If the <code>info</code> array is not empty, then it is
cloned by the constructor as if by {@code info.clone()}, and
each call to {@link #getNotificationInfo()} returns a new
clone.</p>

@param info an array indicating, for each notification this
MBean may send, the name of the Java class of the notification
and the notification type.  Can be null, which is equivalent to
an empty array.

@since 1.6
"
      end

      operation 9780994 "NotificationBroadcasterSupport"
	public explicit_return_type ""
	nparams 2
	  param inout name "executor" type class_ref 503426 // Executor
	  param inout name "" explicit_type "MBeanNotificationInfo...info"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a NotificationBroadcasterSupport with information about the notifications that may be sent,
and where each listener is invoked using the given {@link java.util.concurrent.Executor}.</p>

<p>When {@link #sendNotification sendNotification} is called, a
listener is selected if it was added with a null {@link
NotificationFilter}, or if {@link
NotificationFilter#isNotificationEnabled isNotificationEnabled}
returns true for the notification being sent. The call to
<code>NotificationFilter.isNotificationEnabled</code> takes
place in the thread that called
<code>sendNotification</code>. Then, for each selected
listener, {@link Executor#execute executor.execute} is called
with a command that calls the <code>handleNotification</code>
method.</p>

<p>If the <code>info</code> array is not empty, then it is
cloned by the constructor as if by {@code info.clone()}, and
each call to {@link #getNotificationInfo()} returns a new
clone.</p>

@param executor an executor used by the method
<code>sendNotification</code> to send each notification. If it
is null, the thread calling <code>sendNotification</code> will
invoke the <code>handleNotification</code> method itself.

@param info an array indicating, for each notification this
MBean may send, the name of the Java class of the notification
and the notification type.  Can be null, which is equivalent to
an empty array.

@since 1.6
"
      end

      operation 9781122 "addNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener.

@param listener The listener to receive notifications.
@param filter The filter object. If filter is null, no
filtering will be performed before handling notifications.
@param handback An opaque object to be sent back to the
listener when a notification is emitted. This object cannot be
used by the Notification broadcaster object. It should be
resent unchanged with the notification to the listener.

@exception IllegalArgumentException thrown if the listener is null.

@see #removeNotificationListener
"
      end

      operation 9781250 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 487042 // NotificationListener
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9781378 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9781506 "getNotificationInfo"
	public return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9781634 "sendNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "notification" type class_ref 488706 // Notification
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification.

If an {@code Executor} was specified in the constructor, it will be given one
task per selected listener to deliver the notification to that listener.

@param notification The notification to send.
"
      end

      operation 9781762 "handleNotification"
	protected explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "notif" type class_ref 488706 // Notification
	  param inout name "handback" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>This method is called by {@link #sendNotification
sendNotification} for each listener in order to send the
notification to that listener.  It can be overridden in
subclasses to change the behavior of notification delivery,
for instance to deliver the notification in a separate
thread.</p>

<p>The default implementation of this method is equivalent to
<pre>
listener.handleNotification(notif, handback);
</pre>

@param listener the listener to which the notification is being
delivered.
@param notif the notification being delivered to the listener.
@param handback the handback object that was supplied when the
listener was added.

"
      end

      class 1190146 "ListenerInfo"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3798530 // listener (<unidirectional association>)
	  relation 3798530 --->
	    a role_name "listener" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3798530 // listener (<unidirectional association>)
	    b parent class_ref 487042 // NotificationListener
	end

	classrelation 3798658 // filter (<unidirectional association>)
	  relation 3798658 --->
	    a role_name "filter" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3798658 // filter (<unidirectional association>)
	    b parent class_ref 487170 // NotificationFilter
	end

	classrelation 3798786 // handback (<unidirectional association>)
	  relation 3798786 --->
	    a role_name "handback" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3798786 // handback (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 9781890 "ListenerInfo"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "listener" type class_ref 487042 // NotificationListener
	    param inout name "filter" type class_ref 487170 // NotificationFilter
	    param inout name "handback" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9782018 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9782146 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1190274 "WildcardListenerInfo"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3798914 // <generalisation>
	  relation 3798914 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3798914 // <generalisation>
	    b parent class_ref 1190146 // ListenerInfo
	end

	operation 9782274 "WildcardListenerInfo"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "listener" type class_ref 487042 // NotificationListener
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9782402 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9782530 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 3799042 // listenerList (<unidirectional association>)
	relation 3799042 --->
	  a role_name "listenerList" init_value "
        new CopyOnWriteArrayList<ListenerInfo>()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ListenerInfo> ${name}${value};
"
	    classrelation_ref 3799042 // listenerList (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3799170 // executor (<unidirectional association>)
	relation 3799170 --->
	  a role_name "executor" const_relation private
	    comment " since 1.6
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3799170 // executor (<unidirectional association>)
	  b parent class_ref 503426 // Executor
      end

      classrelation 3799298 // notifInfo (<unidirectional association>)
	relation 3799298 --->
	  a role_name "notifInfo" multiplicity "[]" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3799298 // notifInfo (<unidirectional association>)
	  b parent class_ref 497154 // MBeanNotificationInfo
      end

      classrelation 3799426 // defaultExecutor (<unidirectional association>)
	relation 3799426 --->
	  a role_name "defaultExecutor" init_value " new Executor() {
            // DirectExecutor using caller thread
            public void execute(Runnable r) {
                r.run();
            }
        }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3799426 // defaultExecutor (<unidirectional association>)
	  b parent class_ref 503426 // Executor
      end

      classrelation 3799554 // NO_NOTIFICATION_INFO (<unidirectional association>)
	relation 3799554 --->
	  a role_name "NO_NOTIFICATION_INFO" multiplicity "[]" init_value "
        new MBeanNotificationInfo[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3799554 // NO_NOTIFICATION_INFO (<unidirectional association>)
	  b parent class_ref 497154 // MBeanNotificationInfo
      end

      class 1190402 "SendNotifJob"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3799682 // <realization>
	  relation 3799682 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3799682 // <realization>
	    b parent class_ref 128770 // Runnable
	end

	operation 9782658 "SendNotifJob"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "notif" type class_ref 488706 // Notification
	    param inout name "listenerInfo" type class_ref 1190146 // ListenerInfo
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9782786 "run"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3799810 // notif (<unidirectional association>)
	  relation 3799810 --->
	    a role_name "notif" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3799810 // notif (<unidirectional association>)
	    b parent class_ref 488706 // Notification
	end

	classrelation 3799938 // listenerInfo (<unidirectional association>)
	  relation 3799938 --->
	    a role_name "listenerInfo" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3799938 // listenerInfo (<unidirectional association>)
	    b parent class_ref 1190146 // ListenerInfo
	end
      end

      classrelation 3800066 // logger (<unidirectional association>)
	relation 3800066 --->
	  a role_name "logger" init_value "
        new ClassLogger(\"javax.management\", \"NotificationBroadcasterSupport\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3800066 // logger (<unidirectional association>)
	  b parent class_ref 502402 // ClassLogger
      end
    end

    class 499330 "MalformedObjectNameException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The format of the string does not correspond to a valid ObjectName.

@since 1.5
"
      classrelation 3789314 // <generalisation>
	relation 3789314 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3789314 // <generalisation>
	  b parent class_ref 487682 // OperationsException
      end

      attribute 2265858 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -572689714442915824L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9758466 "MalformedObjectNameException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9758594 "MalformedObjectNameException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param message the detail message.
"
      end
    end

    class 501378 "MBeanServerNotification"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a notification emitted by the MBean Server through the MBeanServerDelegate MBean.
The MBean Server emits the following types of notifications: MBean registration, MBean
unregistration.
<P>
To receive MBeanServerNotifications, you need to register a listener with
the {@link MBeanServerDelegate MBeanServerDelegate} MBean
that represents the MBeanServer. The ObjectName of the MBeanServerDelegate is
{@link MBeanServerDelegate#DELEGATE_NAME}, which is
<CODE>JMImplementation:type=MBeanServerDelegate</CODE>.

<p>The following code prints a message every time an MBean is registered
or unregistered in the MBean Server {@code mbeanServer}:</p>

<pre>
private static final NotificationListener printListener = new NotificationListener() {
    public void handleNotification(Notification n, Object handback) {
        if (!(n instanceof MBeanServerNotification)) {
            System.out.println(\"Ignored notification of class \" + n.getClass().getName());
            return;
        }
        MBeanServerNotification mbsn = (MBeanServerNotification) n;
        String what;
        if (n.getType().equals(MBeanServerNotification.REGISTRATION_NOTIFICATION))
            what = \"MBean registered\";
        else if (n.getType().equals(MBeanServerNotification.UNREGISTRATION_NOTIFICATION))
            what = \"MBean unregistered\";
        else
            what = \"Unknown type \" + n.getType();
        System.out.println(\"Received MBean Server notification: \" + what + \": \" +
                mbsn.getMBeanName());
    }
};

...
    mbeanServer.addNotificationListener(
            MBeanServerDelegate.DELEGATE_NAME, printListener, null, null);
</pre>

<p id=\"group\">
An MBean which is not an {@link MBeanServerDelegate} may also emit
MBeanServerNotifications. In particular, there is a convention for
MBeans to emit an MBeanServerNotification for a group of MBeans.</p>

<p>An MBeanServerNotification emitted to denote the registration or
unregistration of a group of MBeans has the following characteristics:
<ul><li>Its {@linkplain Notification#getType() notification type} is
    {@code \"JMX.mbean.registered.group\"} or
    {@code \"JMX.mbean.unregistered.group\"}, which can also be written {@link
    MBeanServerNotification#REGISTRATION_NOTIFICATION}{@code + \".group\"} or
    {@link
    MBeanServerNotification#UNREGISTRATION_NOTIFICATION}{@code + \".group\"}.
</li>
<li>Its {@linkplain #getMBeanName() MBean name} is an ObjectName pattern
    that selects the set (or a superset) of the MBeans being registered
    or unregistered</li>
<li>Its {@linkplain Notification#getUserData() user data} can optionally
    be set to an array of ObjectNames containing the names of all MBeans
    being registered or unregistered.</li>
</ul>

<p>
MBeans which emit these group registration/unregistration notifications will
declare them in their {@link MBeanInfo#getNotifications()
MBeanNotificationInfo}.
</p>

@since 1.5
"
      classrelation 3796994 // <generalisation>
	relation 3796994 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3796994 // <generalisation>
	  b parent class_ref 488706 // Notification
      end

      attribute 2271874 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2876477500475969677L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3797122 // REGISTRATION_NOTIFICATION (<unidirectional association>)
	relation 3797122 --->
	  a role_name "REGISTRATION_NOTIFICATION" init_value "
            \"JMX.mbean.registered\"" class_relation const_relation public
	    comment "
Notification type denoting that an MBean has been registered.
Value is \"JMX.mbean.registered\".

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3797122 // REGISTRATION_NOTIFICATION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3797250 // UNREGISTRATION_NOTIFICATION (<unidirectional association>)
	relation 3797250 --->
	  a role_name "UNREGISTRATION_NOTIFICATION" init_value "
            \"JMX.mbean.unregistered\"" class_relation const_relation public
	    comment "
Notification type denoting that an MBean has been unregistered.
Value is \"JMX.mbean.unregistered\".

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3797250 // UNREGISTRATION_NOTIFICATION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3797378 // objectName (<unidirectional association>)
	relation 3797378 --->
	  a role_name "objectName" const_relation private
	    comment "
@serial The object names of the MBeans concerned by this notification

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3797378 // objectName (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end

      operation 9777154 "MBeanServerNotification"
	public explicit_return_type ""
	nparams 4
	  param inout name "type" type class_ref 128130 // String
	  param inout name "source" type class_ref 129538 // Object
	  param in name "sequenceNumber" explicit_type "long"
	  param inout name "objectName" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an MBeanServerNotification object specifying object names of
the MBeans that caused the notification and the specified notification
type.

@param type A string denoting the type of the
notification. Set it to one these values: {@link
#REGISTRATION_NOTIFICATION}, {@link
#UNREGISTRATION_NOTIFICATION}.
@param source The MBeanServerNotification object responsible
for forwarding MBean server notification.
@param sequenceNumber A sequence number that can be used to order
received notifications.
@param objectName The object name of the MBean that caused the
notification.

"
      end

      operation 9777282 "getMBeanName"
	public return_type class_ref 485506 // ObjectName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the  object name of the MBean that caused the notification.

@return the object name of the MBean that caused the notification.
"
      end

      operation 9777410 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 501762 "QueryEval"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Allows a query to be performed in the context of a specific MBean server.

@since 1.5
"
      classrelation 985474 // <realization>
	relation 985474 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 985474 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 622338 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2675899265640874796L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 985602 // server (<unidirectional association>)
	relation 985602 --->
	  a role_name "server" init_value "
        new InheritableThreadLocal<MBeanServer>()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MBeanServer> ${name}${value};
"
	    classrelation_ref 985602 // server (<unidirectional association>)
	  b parent class_ref 129282 // ThreadLocal
      end

      operation 3005314 "setMBeanServer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets the MBean server on which the query is to be performed.
The setting is valid for the thread performing the set.
It is copied to any threads created by that thread at the moment
of their creation.</p>

<p>For historical reasons, this method is not static, but its
behavior does not depend on the instance on which it is
called.</p>

@param s The MBean server on which the query is to be performed.

@see #getMBeanServer
"
      end

      operation 3005442 "getMBeanServer"
	class_operation public return_type class_ref 485122 // MBeanServer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the MBean server that was most recently given to the
{@link #setMBeanServer setMBeanServer} method by this thread.
If this thread never called that method, the result is the
value its parent thread would have obtained from
<code>getMBeanServer</code> at the moment of the creation of
this thread, or null if there is no parent thread.</p>

@return the MBean server.

@see #setMBeanServer

"
      end
    end

    class 501890 "BadStringOperationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when an invalid string operation is passed
to a method for constructing a query.

@since 1.5
"
      classrelation 3782914 // <generalisation>
	relation 3782914 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3782914 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2263170 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7802201238441662100L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3783042 // op (<unidirectional association>)
	relation 3783042 --->
	  a role_name "op" private
	    comment "
@serial The description of the operation that originated this exception

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3783042 // op (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9744514 "BadStringOperationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <CODE>BadStringOperationException</CODE> with the specified detail
message.

@param message the detail message.
"
      end

      operation 9744642 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representing the object.
"
      end
    end

    class 502018 "BadBinaryOpValueExpException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when an invalid expression is passed to a method for
constructing a query.  This exception is used internally by JMX
during the evaluation of a query.  User code does not usually see
it.

@since 1.5
"
      classrelation 3782658 // <generalisation>
	relation 3782658 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3782658 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2263042 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5068475589449021227L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3782786 // exp (<unidirectional association>)
	relation 3782786 --->
	  a role_name "exp" private
	    comment "
@serial the {@link ValueExp} that originated this exception

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3782786 // exp (<unidirectional association>)
	  b parent class_ref 1186946 // ValueExp
      end

      operation 9744130 "BadBinaryOpValueExpException"
	public explicit_return_type ""
	nparams 1
	  param inout name "exp" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <CODE>BadBinaryOpValueExpException</CODE> with the specified <CODE>ValueExp</CODE>.

@param exp the expression whose value was inappropriate.
"
      end

      operation 9744258 "getExp"
	public return_type class_ref 1186946 // ValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <CODE>ValueExp</CODE> that originated the exception.

@return the problematic {@link ValueExp}.
"
      end

      operation 9744386 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representing the object.
"
      end
    end

    class 502146 "BadAttributeValueExpException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when an invalid MBean attribute is passed to a query
constructing method.  This exception is used internally by JMX
during the evaluation of a query.  User code does not usually
see it.

@since 1.5
"
      classrelation 3782402 // <generalisation>
	relation 3782402 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3782402 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2262914 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3105272988410493376L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3782530 // val (<unidirectional association>)
	relation 3782530 --->
	  a role_name "val" private
	    comment "
@serial A string representation of the attribute that originated this exception.
for example, the string value can be the return of {@code attribute.toString()}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3782530 // val (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 9743746 "BadAttributeValueExpException"
	public explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a BadAttributeValueExpException using the specified Object to
create the toString() value.

@param val the inappropriate value.
"
      end

      operation 9743874 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representing the object.
"
      end

      operation 9744002 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ois" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 502274 "InvalidApplicationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when an attempt is made to apply either of the following: A
subquery expression to an MBean or a qualified attribute expression
to an MBean of the wrong class.  This exception is used internally
by JMX during the evaluation of a query.  User code does not
usually see it.

@since 1.5
"
      classrelation 3787522 // <generalisation>
	relation 3787522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3787522 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2265474 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3048022274675537269L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3787650 // val (<unidirectional association>)
	relation 3787650 --->
	  a role_name "val" private
	    comment "
@serial The object representing the class of the MBean

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3787650 // val (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 9756930 "InvalidApplicationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>InvalidApplicationException</CODE> with the specified <CODE>Object</CODE>.

@param val the detail message of this exception.
"
      end
    end

    class 522882 "ServiceNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents exceptions raised when a requested service is not supported.

@since 1.5
"
      classrelation 3805442 // <generalisation>
	relation 3805442 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3805442 // <generalisation>
	  b parent class_ref 487682 // OperationsException
      end

      attribute 2278146 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3990675661956646827L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9800194 "ServiceNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9800322 "ServiceNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param message the detail message.
"
      end
    end

    class 526466 "JMRuntimeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Runtime exceptions emitted by JMX implementations.

@since 1.5
"
      classrelation 1033858 // <generalisation>
	relation 1033858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1033858 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 670722 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6573344628407841861L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 3180930 "JMRuntimeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 3181058 "JMRuntimeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param message the detail message.
"
      end

      operation 3181186 "JMRuntimeException"
	package explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with a nested exception.  This constructor is
package-private because it arrived too late for the JMX 1.2
specification.  A later version may make it public.
"
      end
    end

    class 1186306 "AndQueryExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used by the query building mechanism to represent conjunctions
of relational expressions.
@serial include

@since 1.5
"
      classrelation 3779458 // <generalisation>
	relation 3779458 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3779458 // <generalisation>
	  b parent class_ref 501762 // QueryEval
      end

      classrelation 3779586 // <realization>
	relation 3779586 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3779586 // <realization>
	  b parent class_ref 486402 // QueryExp
      end

      attribute 2261506 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1081892073854801359L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3779714 // exp1 (<unidirectional association>)
	relation 3779714 --->
	  a role_name "exp1" private
	    comment "
@serial The first QueryExp of the conjunction

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3779714 // exp1 (<unidirectional association>)
	  b parent class_ref 486402 // QueryExp
      end

      classrelation 3779842 // exp2 (<unidirectional association>)
	relation 3779842 --->
	  a role_name "exp2" private
	    comment "
@serial The second QueryExp of the conjunction

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3779842 // exp2 (<unidirectional association>)
	  b parent class_ref 486402 // QueryExp
      end

      operation 9736706 "AndQueryExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9736834 "AndQueryExp"
	public explicit_return_type ""
	nparams 2
	  param inout name "q1" type class_ref 486402 // QueryExp
	  param inout name "q2" type class_ref 486402 // QueryExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AndQueryExp with q1 and q2 QueryExp.
"
      end

      operation 9736962 "getLeftExp"
	public return_type class_ref 486402 // QueryExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the left query expression.
"
      end

      operation 9737090 "getRightExp"
	public return_type class_ref 486402 // QueryExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the right query expression.
"
      end

      operation 9737218 "apply"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the AndQueryExp on a MBean.

@param name The name of the MBean on which the AndQueryExp will be applied.

@return  True if the query was successfully applied to the MBean, false otherwise.


@exception BadStringOperationException The string passed to the method is invalid.
@exception BadBinaryOpValueExpException The expression passed to the method is invalid.
@exception BadAttributeValueExpException The attribute value passed to the method is invalid.
@exception InvalidApplicationException  An attempt has been made to apply a subquery expression to a
managed object or a qualified attribute expression to a managed object of the wrong class.
"
      end

      operation 9737346 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string representation of this AndQueryExp
"
      end
    end

    class 1186434 "AttributeChangeNotification"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides definitions of the attribute change notifications sent by MBeans.
<P>
It's up to the MBean owning the attribute of interest to create and send
attribute change notifications when the attribute change occurs.
So the <CODE>NotificationBroadcaster</CODE> interface has to be implemented
by any MBean for which an attribute change is of interest.
<P>
Example:
If an MBean called <CODE>myMbean</CODE> needs to notify registered listeners
when its attribute:
<BLOCKQUOTE><CODE>
     String myString
</CODE></BLOCKQUOTE>
is modified, <CODE>myMbean</CODE> creates and emits the following notification:
<BLOCKQUOTE><CODE>
new AttributeChangeNotification(myMbean, sequenceNumber, timeStamp, msg,
                                \"myString\", \"String\", oldValue, newValue);
</CODE></BLOCKQUOTE>

@since 1.5
"
      classrelation 3780354 // <generalisation>
	relation 3780354 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3780354 // <generalisation>
	  b parent class_ref 488706 // Notification
      end

      attribute 2261762 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 535176054565814134L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3780482 // ATTRIBUTE_CHANGE (<unidirectional association>)
	relation 3780482 --->
	  a role_name "ATTRIBUTE_CHANGE" init_value " \"jmx.attribute.change\"" class_relation const_relation public
	    comment "
Notification type which indicates that the observed MBean attribute value has changed.
<BR>The value of this type string is <CODE>jmx.attribute.change</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3780482 // ATTRIBUTE_CHANGE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3780610 // attributeName (<unidirectional association>)
	relation 3780610 --->
	  a role_name "attributeName" init_value " null" private
	    comment "
@serial The MBean attribute name.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3780610 // attributeName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3780738 // attributeType (<unidirectional association>)
	relation 3780738 --->
	  a role_name "attributeType" init_value " null" private
	    comment "
@serial The MBean attribute type.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3780738 // attributeType (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3780866 // oldValue (<unidirectional association>)
	relation 3780866 --->
	  a role_name "oldValue" init_value " null" private
	    comment "
@serial The MBean attribute old value.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3780866 // oldValue (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3780994 // newValue (<unidirectional association>)
	relation 3780994 --->
	  a role_name "newValue" init_value " null" private
	    comment "
@serial The MBean attribute new value.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3780994 // newValue (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 9738242 "AttributeChangeNotification"
	public explicit_return_type ""
	nparams 8
	  param inout name "source" type class_ref 129538 // Object
	  param in name "sequenceNumber" explicit_type "long"
	  param in name "timeStamp" explicit_type "long"
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "attributeName" type class_ref 128130 // String
	  param inout name "attributeType" type class_ref 128130 // String
	  param inout name "oldValue" type class_ref 129538 // Object
	  param inout name "newValue" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an attribute change notification object.
In addition to the information common to all notification, the caller must supply the name and type
of the attribute, as well as its old and new values.

@param source The notification producer, that is, the MBean the attribute belongs to.
@param sequenceNumber The notification sequence number within the source object.
@param timeStamp The date at which the notification is being sent.
@param msg A String containing the message of the notification.
@param attributeName A String giving the name of the attribute.
@param attributeType A String containing the type of the attribute.
@param oldValue An object representing value of the attribute before the change.
@param newValue An object representing value of the attribute after the change.
"
      end

      operation 9738370 "getAttributeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the attribute which has changed.

@return A String containing the name of the attribute.
"
      end

      operation 9738498 "getAttributeType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the type of the attribute which has changed.

@return A String containing the type of the attribute.
"
      end

      operation 9738626 "getOldValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the old value of the attribute which has changed.

@return An Object containing the old value of the attribute.
"
      end

      operation 9738754 "getNewValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the new value of the attribute which has changed.

@return An Object containing the new value of the attribute.
"
      end
    end

    class 1186562 "AttributeChangeNotificationFilter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class implements of the {@link javax.management.NotificationFilter NotificationFilter}
interface for the {@link javax.management.AttributeChangeNotification attribute change notification}.
The filtering is performed on the name of the observed attribute.
<P>
It manages a list of enabled attribute names.
A method allows users to enable/disable as many attribute names as required.

@since 1.5
"
      classrelation 3781250 // <realization>
	relation 3781250 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3781250 // <realization>
	  b parent class_ref 487170 // NotificationFilter
      end

      attribute 2261890 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6347317584796410029L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3781378 // enabledAttributes (<unidirectional association>)
	relation 3781378 --->
	  a role_name "enabledAttributes" init_value " new Vector<String>()" private
	    comment "
@serial {@link Vector} that contains the enabled attribute names.
        The default value is an empty vector.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3781378 // enabledAttributes (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      operation 9739010 "isNotificationEnabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "notification" type class_ref 488706 // Notification
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked before sending the specified notification to the listener.
<BR>This filter compares the attribute name of the specified attribute change notification
with each enabled attribute name.
If the attribute name equals one of the enabled attribute names,
the notification must be sent to the listener and this method returns <CODE>true</CODE>.

@param notification The attribute change notification to be sent.
@return <CODE>true</CODE> if the notification has to be sent to the listener, <CODE>false</CODE> otherwise.
"
      end

      operation 9739138 "enableAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables all the attribute change notifications the attribute name of which equals
the specified name to be sent to the listener.
<BR>If the specified name is already in the list of enabled attribute names,
this method has no effect.

@param name The attribute name.
@exception java.lang.IllegalArgumentException The attribute name parameter is null.
"
      end

      operation 9739266 "disableAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disables all the attribute change notifications the attribute name of which equals
the specified attribute name to be sent to the listener.
<BR>If the specified name is not in the list of enabled attribute names,
this method has no effect.

@param name The attribute name.
"
      end

      operation 9739394 "disableAllAttributes"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disables all the attribute names.
"
      end

      operation 9739522 "getEnabledAttributes"
	public return_type class_ref 141442 // Vector
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the enabled attribute names for this filter.

@return The list containing all the enabled attribute names.
"
      end
    end

    class 1186690 "JMException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exceptions thrown by JMX implementations.
It does not include the runtime exceptions.

@since 1.5
"
      classrelation 3781634 // <generalisation>
	relation 3781634 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3781634 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 2262402 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 350520924977331825L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9741826 "JMException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 9741954 "JMException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param msg the detail message.
"
      end
    end

    class 1186818 "AttributeValueExp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Represents attributes used as arguments to relational constraints.
Instances of this class are usually obtained using {@link Query#attr(String)
Query.attr}.</p>

<p>An <CODE>AttributeValueExp</CODE> may be used anywhere a
<CODE>ValueExp</CODE> is required.

@since 1.5
"
      classrelation 3782146 // <realization>
	relation 3782146 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3782146 // <realization>
	  b parent class_ref 1186946 // ValueExp
      end

      attribute 2262786 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7768025046539163385L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3782274 // attr (<unidirectional association>)
	relation 3782274 --->
	  a role_name "attr" private
	    comment "
@serial The name of the attribute

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3782274 // attr (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9742850 "AttributeValueExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "An <code>AttributeValueExp</code> with a null attribute.
@deprecated An instance created with this constructor cannot be
used in a query.
"
      end

      operation 9742978 "AttributeValueExp"
	public explicit_return_type ""
	nparams 1
	  param inout name "attr" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <CODE>AttributeValueExp</CODE> representing the
specified object attribute, named attr.

@param attr the name of the attribute whose value is the value
of this {@link ValueExp}.
"
      end

      operation 9743106 "getAttributeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the name of the attribute.

@return the attribute name.
"
      end

      operation 9743234 "apply"
	public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Applies the <CODE>AttributeValueExp</CODE> on an MBean.
This method calls {@link #getAttribute getAttribute(name)} and wraps
the result as a {@code ValueExp}.  The value returned by
{@code getAttribute} must be a {@code Number}, {@code String},
or {@code Boolean}; otherwise this method throws a
{@code BadAttributeValueExpException}, which will cause
the containing query to be false for this {@code name}.</p>

@param name The name of the MBean on which the <CODE>AttributeValueExp</CODE> will be applied.

@return  The <CODE>ValueExp</CODE>.

@exception BadAttributeValueExpException
@exception InvalidApplicationException
@exception BadStringOperationException
@exception BadBinaryOpValueExpException

"
      end

      operation 9743362 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the string representing its value.
"
      end

      operation 9743490 "setMBeanServer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
@Override
"
	
	
	
	comment "Sets the MBean server on which the query is to be performed.

@param s The MBean server on which the query is to be performed.

@deprecated This method has no effect.  The MBean Server used to
obtain an attribute value is {@link QueryEval#getMBeanServer()}.

 There is no need for this method, because if a query is being
evaluted an AttributeValueExp can only appear inside a QueryExp,
and that QueryExp will itself have done setMBeanServer.  "
      end

      operation 9743618 "getAttribute"
	protected return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the value of the given attribute in the named MBean.
If the attempt to access the attribute generates an exception,
return null.</p>

<p>The MBean Server used is the one returned by {@link
QueryEval#getMBeanServer()}.</p>

@param name the name of the MBean whose attribute is to be returned.

@return the value of the attribute, or null if it could not be
obtained.
"
      end
    end

    class 1186946 "ValueExp"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents values that can be passed as arguments to
relational expressions. Strings, numbers, attributes are valid values
and should be represented by implementations of <CODE>ValueExp</CODE>.

@since 1.5


We considered generifying this interface as ValueExp<T>, where T is
the Java type that this expression generates.  This allows some additional
checking in the various methods of the Query class, but in practice
not much.  Typically you have something like
Query.lt(Query.attr(\"A\"), Query.value(5)).  We can arrange for Query.value
to have type ValueExp<Integer> (or maybe ValueExp<Long> or ValueExp<Number>)
but for Query.attr we can't do better than ValueExp<?> or plain ValueExp.
So even though we could define Query.lt as:
QueryExp <T> lt(ValueExp<T> v1, ValueExp<T> v2)
and thus prevent comparing a
number against a string, in practice the first ValueExp will almost always
be a Query.attr so this check serves no purpose.  You would have to
write Query.<Number>attr(\"A\"), for example, which would be awful.  And,
if you wrote Query.<Integer>attr(\"A\") you would then discover that you
couldn't compare it against Query.value(5) if the latter is defined as
ValueExp<Number>, or against Query.value(5L) if it is defined as
ValueExp<Integer>.

Worse, for Query.in we would like to define:
QueryExp <T> in(ValueExp<T> val, ValueExp<T>[] valueList)
but this is unusable because you cannot write
\"new ValueExp<Integer>[] {...}\" (the compiler forbids it).

The few mistakes you might catch with this generification certainly
wouldn't justify the hassle of modifying user code to get the checks
to be made and the \"unchecked\" warnings that would arise if it
wasn't so modified.

We could reconsider this if the Query methods were augmented, for example
with:
AttributeValueExp<Number> numberAttr(String name);
AttributeValueExp<String> stringAttr(String name);
AttributeValueExp<Boolean> booleanAttr(String name);
QueryExp <T> in(ValueExp<T> val, Set<ValueExp<T>> valueSet).
But it's not really clear what numberAttr should do if it finds that the
attribute is not in fact a Number.
"
      classrelation 3782018 // <generalisation>
	relation 3782018 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3782018 // <generalisation>
	  b parent class_ref 136578 // Serializable
      end

      operation 9742594 "apply"
	public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the ValueExp on a MBean.

@param name The name of the MBean on which the ValueExp will be applied.

@return  The <CODE>ValueExp</CODE>.

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 9742722 "setMBeanServer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 485122 // MBeanServer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the MBean server on which the query is to be performed.

@param s The MBean server on which the query is to be performed.

@deprecated This method is not needed because a
<code>ValueExp</code> can access the MBean server in which it
is being evaluated by using {@link QueryEval#getMBeanServer()}.
"
      end
    end

    class 1187074 "BetweenQueryExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used by the query-building mechanism to represent binary
relations.
@serial include

@since 1.5
"
      classrelation 3783170 // <generalisation>
	relation 3783170 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3783170 // <generalisation>
	  b parent class_ref 501762 // QueryEval
      end

      classrelation 3783298 // <realization>
	relation 3783298 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3783298 // <realization>
	  b parent class_ref 486402 // QueryExp
      end

      attribute 2263298 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2933597532866307444L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3783426 // exp1 (<unidirectional association>)
	relation 3783426 --->
	  a role_name "exp1" private
	    comment "
@serial The checked value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3783426 // exp1 (<unidirectional association>)
	  b parent class_ref 1186946 // ValueExp
      end

      classrelation 3783554 // exp2 (<unidirectional association>)
	relation 3783554 --->
	  a role_name "exp2" private
	    comment "
@serial The lower bound value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3783554 // exp2 (<unidirectional association>)
	  b parent class_ref 1186946 // ValueExp
      end

      classrelation 3783682 // exp3 (<unidirectional association>)
	relation 3783682 --->
	  a role_name "exp3" private
	    comment "
@serial The upper bound value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3783682 // exp3 (<unidirectional association>)
	  b parent class_ref 1186946 // ValueExp
      end

      operation 9744770 "BetweenQueryExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic Constructor.
"
      end

      operation 9744898 "BetweenQueryExp"
	public explicit_return_type ""
	nparams 3
	  param inout name "v1" type class_ref 1186946 // ValueExp
	  param inout name "v2" type class_ref 1186946 // ValueExp
	  param inout name "v3" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new BetweenQueryExp with v1 checked value, v2 lower bound
and v3 upper bound values.
"
      end

      operation 9745026 "getCheckedValue"
	public return_type class_ref 1186946 // ValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the checked value of the query.
"
      end

      operation 9745154 "getLowerBound"
	public return_type class_ref 1186946 // ValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lower bound value of the query.
"
      end

      operation 9745282 "getUpperBound"
	public return_type class_ref 1186946 // ValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the upper bound value of the query.
"
      end

      operation 9745410 "apply"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the BetweenQueryExp on an MBean.

@param name The name of the MBean on which the BetweenQueryExp will be applied.

@return  True if the query was successfully applied to the MBean, false otherwise.

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 9745538 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the string representing the object.
"
      end
    end

    class 1187202 "BinaryOpValueExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used by the query-building mechanism to represent binary
operations.
@serial include

@since 1.5
"
      classrelation 3783810 // <generalisation>
	relation 3783810 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3783810 // <generalisation>
	  b parent class_ref 501762 // QueryEval
      end

      classrelation 3783938 // <realization>
	relation 3783938 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3783938 // <realization>
	  b parent class_ref 1186946 // ValueExp
      end

      attribute 2263426 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1216286847881456786L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      attribute 2263554 "op"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial The operator

"
      end

      classrelation 3784066 // exp1 (<unidirectional association>)
	relation 3784066 --->
	  a role_name "exp1" private
	    comment "
@serial The first value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3784066 // exp1 (<unidirectional association>)
	  b parent class_ref 1186946 // ValueExp
      end

      classrelation 3784194 // exp2 (<unidirectional association>)
	relation 3784194 --->
	  a role_name "exp2" private
	    comment "
@serial The second value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3784194 // exp2 (<unidirectional association>)
	  b parent class_ref 1186946 // ValueExp
      end

      operation 9745666 "BinaryOpValueExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic Constructor.
"
      end

      operation 9745794 "BinaryOpValueExp"
	public explicit_return_type ""
	nparams 3
	  param in name "o" explicit_type "int"
	  param inout name "v1" type class_ref 1186946 // ValueExp
	  param inout name "v2" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new BinaryOpValueExp using operator o applied on v1 and
v2 values.
"
      end

      operation 9745922 "getOperator"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the operator of the value expression.
"
      end

      operation 9746050 "getLeftValue"
	public return_type class_ref 1186946 // ValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the left value of the value expression.
"
      end

      operation 9746178 "getRightValue"
	public return_type class_ref 1186946 // ValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the right value of the value expression.
"
      end

      operation 9746306 "apply"
	public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the BinaryOpValueExp on a MBean.

@param name The name of the MBean on which the BinaryOpValueExp will be applied.

@return  The ValueExp.

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 9746434 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representing the object
"
      end

      operation 9746562 "parens"
	private return_type class_ref 128130 // String
	nparams 2
	  param inout name "subexp" type class_ref 1186946 // ValueExp
	  param inout name "left" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 502018 // BadBinaryOpValueExpException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add parentheses to the given subexpression if necessary to
preserve meaning.  Suppose this BinaryOpValueExp is
Query.times(Query.plus(Query.attr(\"A\"), Query.attr(\"B\")), Query.attr(\"C\")).
Then the original toString() logic would return A + B * C.
We check precedences in order to return (A + B) * C, which is the
meaning of the ValueExp.

We need to add parentheses if the unparenthesized expression would
be parsed as a different ValueExp from the original.
We cannot omit parentheses even when mathematically
the result would be equivalent, because we do not know whether the
numeric values will be integer or floating-point.  Addition and
multiplication are associative for integers but not always for
floating-point.

So the rule is that we omit parentheses if the ValueExp
is (A op1 B) op2 C and the precedence of op1 is greater than or
equal to that of op2; or if the ValueExp is A op1 (B op2 C) and
the precedence of op2 is greater than that of op1.  (There are two
precedences: that of * and / is greater than that of + and -.)
The case of (A op1 B) op2 (C op3 D) applies each rule in turn.

The following examples show the rules in action.  On the left,
the original ValueExp.  On the right, the string representation.

(A + B) + C     A + B + C
(A * B) + C     A * B + C
(A + B) * C     (A + B) * C
(A * B) * C     A * B * C
A + (B + C)     A + (B + C)
A + (B * C)     A + B * C
A * (B + C)     A * (B + C)
A * (B * C)     A * (B * C)
"
      end

      operation 9746690 "precedence"
	private explicit_return_type "int"
	nparams 1
	  param in name "xop" explicit_type "int"
	nexceptions 1
	  exception class_ref 502018 // BadBinaryOpValueExpException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9746818 "opString"
	private return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 502018 // BadBinaryOpValueExpException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9746946 "setMBeanServer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
      end
    end

    class 1187330 "BinaryRelQueryExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used by the query-building mechanism to represent binary
operations.
@serial include

@since 1.5
"
      classrelation 3784322 // <generalisation>
	relation 3784322 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3784322 // <generalisation>
	  b parent class_ref 501762 // QueryEval
      end

      classrelation 3784450 // <realization>
	relation 3784450 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3784450 // <realization>
	  b parent class_ref 486402 // QueryExp
      end

      attribute 2263682 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5690656271650491000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      attribute 2263810 "relOp"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial The operator

"
      end

      classrelation 3784578 // exp1 (<unidirectional association>)
	relation 3784578 --->
	  a role_name "exp1" private
	    comment "
@serial The first value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3784578 // exp1 (<unidirectional association>)
	  b parent class_ref 1186946 // ValueExp
      end

      classrelation 3784706 // exp2 (<unidirectional association>)
	relation 3784706 --->
	  a role_name "exp2" private
	    comment "
@serial The second value

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3784706 // exp2 (<unidirectional association>)
	  b parent class_ref 1186946 // ValueExp
      end

      operation 9747074 "BinaryRelQueryExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic Constructor.
"
      end

      operation 9747202 "BinaryRelQueryExp"
	public explicit_return_type ""
	nparams 3
	  param in name "op" explicit_type "int"
	  param inout name "v1" type class_ref 1186946 // ValueExp
	  param inout name "v2" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new BinaryRelQueryExp with operator op applied on v1 and
v2 values.
"
      end

      operation 9747330 "getOperator"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the operator of the query.
"
      end

      operation 9747458 "getLeftValue"
	public return_type class_ref 1186946 // ValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the left value of the query.
"
      end

      operation 9747586 "getRightValue"
	public return_type class_ref 1186946 // ValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the right value of the query.
"
      end

      operation 9747714 "apply"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the BinaryRelQueryExp on an MBean.

@param name The name of the MBean on which the BinaryRelQueryExp will be applied.

@return  True if the query was successfully applied to the MBean, false otherwise.

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 9747842 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the string representing the object.
"
      end

      operation 9747970 "relOpString"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1187458 "BooleanValueExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a boolean value. A BooleanValueExp may be
used anywhere a ValueExp is required.
@serial include

@since 1.5
"
      classrelation 3784834 // <generalisation>
	relation 3784834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3784834 // <generalisation>
	  b parent class_ref 501762 // QueryEval
      end

      classrelation 3784962 // <realization>
	relation 3784962 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3784962 // <realization>
	  b parent class_ref 1186946 // ValueExp
      end

      attribute 2263938 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7754922052666594581L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      attribute 2264066 "val"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial The boolean value

"
      end

      operation 9748098 "BooleanValueExp"
	package explicit_return_type ""
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a new BooleanValueExp representing the boolean literal {@code val}."
      end

      operation 9748226 "BooleanValueExp"
	package explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 315010 // Boolean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new BooleanValueExp representing the Boolean object {@code val}."
      end

      operation 9748354 "getValue"
	public return_type class_ref 315010 // Boolean
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the  Boolean object representing the value of the BooleanValueExp object."
      end

      operation 9748482 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representing the object.
"
      end

      operation 9748610 "apply"
	public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the ValueExp on a MBean.

@param name The name of the MBean on which the ValueExp will be applied.

@return  The <CODE>ValueExp</CODE>.

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 9748738 "setMBeanServer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
      end
    end

    class 1187586 "ClassAttributeValueExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents the name of the Java implementation class of
the MBean. It is used for performing queries based on the class of
the MBean.
@serial include

<p>The <b>serialVersionUID</b> of this class is <code>-1081892073854801359L</code>.

@since 1.5

 serialVersionUID is not constant"
      classrelation 3785090 // <generalisation>
	relation 3785090 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3785090 // <generalisation>
	  b parent class_ref 1186818 // AttributeValueExp
      end

      attribute 2264194 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2212731951078526753L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2264322 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1081892073854801359L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      attribute 2264450 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 179586 "initialization"
	
	cpp "" ""
	java "  static {
        boolean compat = false;
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK: exception means no compat with 1.0, too bad
        }
        if (compat)
            serialVersionUID = oldSerialVersionUID;
        else
            serialVersionUID = newSerialVersionUID;
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3785218 // attr (<unidirectional association>)
	relation 3785218 --->
	  a role_name "attr" private
	    comment "
@serial The name of the attribute

<p>The <b>serialVersionUID</b> of this class is <code>-1081892073854801359L</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3785218 // attr (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9748866 "ClassAttributeValueExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic Constructor.
"
      end

      operation 9748994 "apply"
	public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the ClassAttributeValueExp on an MBean. Returns the name of
the Java implementation class of the MBean.

@param name The name of the MBean on which the ClassAttributeValueExp will be applied.

@return  The ValueExp.

@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 9749122 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string \"Class\" representing its value
"
      end

      operation 9749250 "getValue"
	protected return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1187714 "DefaultLoaderRepository"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Keeps the list of Class Loaders registered in the MBean Server.
It provides the necessary methods to load classes using the registered
Class Loaders.</p>

<p>This deprecated class is maintained for compatibility.  In
previous versions of the JMX API, there was one
<code>DefaultLoaderRepository</code> shared by all MBean servers.
As of version 1.2 of the JMX API, that functionality is
approximated by using {@link MBeanServerFactory#findMBeanServer} to
find all known MBean servers, and consulting the {@link
ClassLoaderRepository} of each one.  It is strongly recommended
that code referencing <code>DefaultLoaderRepository</code> be
rewritten.</p>

@deprecated Use
{@link javax.management.MBeanServer#getClassLoaderRepository()}
instead.

@since 1.5
"
      operation 9749378 "loadClass"
	class_operation public return_type class_ref 130818 // Class
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Go through the list of class loaders and try to load the requested class.
The method will stop as soon as the class is found. If the class
is not found the method will throw a <CODE>ClassNotFoundException</CODE>
exception.

@param className The name of the class to be loaded.

@return the loaded class.

@exception ClassNotFoundException The specified class could not be found.
"
      end

      operation 9749506 "loadClassWithout"
	class_operation public return_type class_ref 130818 // Class
	nparams 2
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Go through the list of class loaders but exclude the given class loader, then try to load
the requested class.
The method will stop as soon as the class is found. If the class
is not found the method will throw a <CODE>ClassNotFoundException</CODE>
exception.

@param className The name of the class to be loaded.
@param loader The class loader to be excluded.

@return the loaded class.

@exception ClassNotFoundException The specified class could not be found.
"
      end
    end

    class 1187842 "RuntimeOperationsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents runtime exceptions thrown in the agent when performing operations on MBeans.
It wraps the actual <CODE>java.lang.RuntimeException</CODE> thrown.

@since 1.5
"
      classrelation 3805186 // <generalisation>
	relation 3805186 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3805186 // <generalisation>
	  b parent class_ref 526466 // JMRuntimeException
      end

      attribute 2278018 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8408923047489133588L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3805314 // runtimeException (<unidirectional association>)
	relation 3805314 --->
	  a role_name "runtimeException" private
	    comment "
@serial The encapsulated {@link RuntimeException}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3805314 // runtimeException (<unidirectional association>)
	  b parent class_ref 214786 // RuntimeException
      end

      operation 9799682 "RuntimeOperationsException"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 214786 // RuntimeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <CODE>RuntimeOperationsException</CODE> that wraps the actual <CODE>java.lang.RuntimeException</CODE>.

@param e the wrapped exception.
"
      end

      operation 9799810 "RuntimeOperationsException"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 214786 // RuntimeException
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <CODE>RuntimeOperationsException</CODE> that wraps the actual <CODE>java.lang.RuntimeException</CODE>
with a detailed message.

@param e the wrapped exception.
@param message the detail message.
"
      end

      operation 9799938 "getTargetException"
	public return_type class_ref 214786 // RuntimeException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the actual {@link RuntimeException} thrown.

@return the wrapped {@link RuntimeException}.
"
      end

      operation 9800066 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the actual {@link RuntimeException} thrown.

@return the wrapped {@link RuntimeException}.
"
      end
    end

    class 1187970 "DescriptorAccess"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface is used to gain access to descriptors of the Descriptor class
which are associated with a JMX component, i.e. MBean, MBeanInfo,
MBeanAttributeInfo, MBeanNotificationInfo,
MBeanOperationInfo, MBeanParameterInfo.
<P>
ModelMBeans make extensive use of this interface in ModelMBeanInfo classes.

@since 1.5
"
      classrelation 3785602 // <generalisation>
	relation 3785602 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3785602 // <generalisation>
	  b parent class_ref 1188098 // DescriptorRead
      end

      operation 9751170 "setDescriptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inDescriptor" type class_ref 489986 // Descriptor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets Descriptor (full replace).

@param inDescriptor replaces the Descriptor associated with the
component implementing this interface. If the inDescriptor is invalid for the
type of Info object it is being set for, an exception is thrown.  If the
inDescriptor is null, then the Descriptor will revert to its default value
which should contain, at a minimum, the descriptor name and descriptorType.

@see #getDescriptor
"
      end
    end

    class 1188098 "DescriptorRead"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface to read the Descriptor of a management interface element
such as an MBeanInfo.
@since 1.6
"
      operation 9751042 "getDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of Descriptor.

@return Descriptor associated with the component implementing this interface.
The return value is never null, but the returned descriptor may be empty.
"
      end
    end

    class 1188226 "DescriptorKey"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Meta-annotation that describes how an annotation element relates
to a field in a {@link Descriptor}.  This can be the Descriptor for
an MBean, or for an attribute, operation, or constructor in an
MBean, or for a parameter of an operation or constructor.</p>

<p>Consider this annotation for example:</p>

<pre>
&#64;Documented
&#64;Target(ElementType.METHOD)
&#64;Retention(RetentionPolicy.RUNTIME)
public &#64;interface Units {
    <b>&#64;DescriptorKey(\"units\")</b>
    String value();
}
</pre>

<p>and this use of the annotation:</p>

<pre>
public interface CacheControlMBean {
    <b>&#64;Units(\"bytes\")</b>
    public long getCacheSize();
}
</pre>

<p>When a Standard MBean is made from the {@code CacheControlMBean},
the usual rules mean that it will have an attribute called
{@code CacheSize} of type {@code long}.  The {@code @Units}
annotation, given the above definition, will ensure that the
{@link MBeanAttributeInfo} for this attribute will have a
{@code Descriptor} that has a field called {@code units} with
corresponding value {@code bytes}.</p>

<p>Similarly, if the annotation looks like this:</p>

<pre>
&#64;Documented
&#64;Target(ElementType.METHOD)
&#64;Retention(RetentionPolicy.RUNTIME)
public &#64;interface Units {
    <b>&#64;DescriptorKey(\"units\")</b>
    String value();

    <b>&#64;DescriptorKey(\"descriptionResourceKey\")</b>
    String resourceKey() default \"\";

    <b>&#64;DescriptorKey(\"descriptionResourceBundleBaseName\")</b>
    String resourceBundleBaseName() default \"\";
}
</pre>

<p>and it is used like this:</p>

<pre>
public interface CacheControlMBean {
    <b>&#64;Units(\"bytes\",
           resourceKey=\"bytes.key\",
           resourceBundleBaseName=\"com.example.foo.MBeanResources\")</b>
    public long getCacheSize();
}
</pre>

<p>then the resulting {@code Descriptor} will contain the following
fields:</p>

<table border=\"2\" summary=\"Descriptor Fields\">
<tr><th>Name</th><th>Value</th></tr>
<tr><td>units</td><td>\"bytes\"</td></tr>
<tr><td>descriptionResourceKey</td><td>\"bytes.key\"</td></tr>
<tr><td>descriptionResourceBundleBaseName</td>
    <td>\"com.example.foo.MBeanResources\"</td></tr>
</table>

<p>An annotation such as {@code @Units} can be applied to:</p>

<ul>
<li>a Standard MBean or MXBean interface;
<li>a method in such an interface;
<li>a parameter of a method in a Standard MBean or MXBean interface
when that method is an operation (not a getter or setter for an attribute);
<li>a public constructor in the class that implements a Standard MBean
or MXBean;
<li>a parameter in such a constructor.
</ul>

<p>Other uses of the annotation are ignored.</p>

<p>Interface annotations are checked only on the exact interface
that defines the management interface of a Standard MBean or an
MXBean, not on its parent interfaces.  Method annotations are
checked only in the most specific interface in which the method
appears; in other words, if a child interface overrides a method
from a parent interface, only {@code @DescriptorKey} annotations in
the method in the child interface are considered.

<p>The Descriptor fields contributed in this way by different
annotations on the same program element must be consistent.  That
is, two different annotations, or two members of the same
annotation, must not define a different value for the same
Descriptor field.  Fields from annotations on a getter method must
also be consistent with fields from annotations on the
corresponding setter method.</p>

<p>The Descriptor resulting from these annotations will be merged
with any Descriptor fields provided by the implementation, such as
the <a href=\"Descriptor.html#immutableInfo\">{@code
immutableInfo}</a> field for an MBean.  The fields from the annotations
must be consistent with these fields provided by the implementation.</p>

<p>An annotation element to be converted into a descriptor field
can be of any type allowed by the Java language, except an annotation
or an array of annotations.  The value of the field is derived from
the value of the annotation element as follows:</p>

<table border=\"2\" summary=\"Descriptor Field Types\">
<tr><th>Annotation element</th><th>Descriptor field</th></tr>
<tr><td>Primitive value ({@code 5}, {@code false}, etc)</td>
    <td>Wrapped value ({@code Integer.valueOf(5)},
        {@code Boolean.FALSE}, etc)</td></tr>
<tr><td>Class constant (e.g. {@code Thread.class})</td>
    <td>Class name from {@link Class#getName()}
        (e.g. {@code \"java.lang.Thread\"})</td></tr>
<tr><td>Enum constant (e.g. {@link ElementType#FIELD})</td>
    <td>Constant name from {@link Enum#name()}
        (e.g. {@code \"FIELD\"})</td></tr>
<tr><td>Array of class constants or enum constants</td>
    <td>String array derived by applying these rules to each
        element</td></tr>
<tr><td>Value of any other type<br>
        ({@code String}, {@code String[]}, {@code int[]}, etc)</td>
    <td>The same value</td></tr>
</table>

@since 1.6
"
      operation 9751298 "value"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1188354 "InQueryExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used by the query-building mechanism to represent binary
operations.
@serial include

@since 1.5
"
      classrelation 3786242 // <generalisation>
	relation 3786242 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3786242 // <generalisation>
	  b parent class_ref 501762 // QueryEval
      end

      classrelation 3786370 // <realization>
	relation 3786370 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3786370 // <realization>
	  b parent class_ref 486402 // QueryExp
      end

      attribute 2264834 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5801329450358952434L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3786498 // val (<unidirectional association>)
	relation 3786498 --->
	  a role_name "val" private
	    comment "
@serial The {@link ValueExp} to be found

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3786498 // val (<unidirectional association>)
	  b parent class_ref 1186946 // ValueExp
      end

      classrelation 3786626 // valueList (<unidirectional association>)
	relation 3786626 --->
	  a role_name "valueList" multiplicity "[]" private
	    comment "
@serial The array of {@link ValueExp} to be searched

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3786626 // valueList (<unidirectional association>)
	  b parent class_ref 1186946 // ValueExp
      end

      operation 9754754 "InQueryExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic Constructor.
"
      end

      operation 9754882 "InQueryExp"
	public explicit_return_type ""
	nparams 2
	  param inout name "v1" type class_ref 1186946 // ValueExp
	  param inout name "items" type class_ref 1186946 // ValueExp
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new InQueryExp with the specified ValueExp to be found in
a specified array of ValueExp.
"
      end

      operation 9755010 "getCheckedValue"
	public return_type class_ref 1186946 // ValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the checked value of the query.
"
      end

      operation 9755138 "getExplicitValues"
	public return_type class_ref 1186946 // ValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the array of values of the query.
"
      end

      operation 9755266 "apply"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the InQueryExp on a MBean.

@param name The name of the MBean on which the InQueryExp will be applied.

@return  True if the query was successfully applied to the MBean, false otherwise.

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 9755394 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representing the object.
"
      end

      operation 9755522 "generateValueList"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1188482 "InstanceOfQueryExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used by the query building mechanism for isInstanceOf expressions.
@serial include

@since 1.6
"
      classrelation 3787010 // <generalisation>
	relation 3787010 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3787010 // <generalisation>
	  b parent class_ref 501762 // QueryEval
      end

      classrelation 3787138 // <realization>
	relation 3787138 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3787138 // <realization>
	  b parent class_ref 486402 // QueryExp
      end

      attribute 2265218 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1081892073854801359L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3787266 // classNameValue (<unidirectional association>)
	relation 3787266 --->
	  a role_name "classNameValue" private
	    comment "
@serial The {@link StringValueExp} returning the name of the class
        of which selected MBeans should be instances.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3787266 // classNameValue (<unidirectional association>)
	  b parent class_ref 1188610 // StringValueExp
      end

      operation 9756162 "InstanceOfQueryExp"
	public explicit_return_type ""
	nparams 1
	  param inout name "classNameValue" type class_ref 1188610 // StringValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new InstanceOfExp with a specific class name.
@param classNameValue The {@link StringValueExp} returning the name of
       the class of which selected MBeans should be instances.

 We are using StringValueExp here to be consistent with other queries,
 although we should actually either use a simple string (the classname)
 or a ValueExp - which would allow more complex queries - like for
 instance evaluating the class name from an AttributeValueExp.
 As it stands - using StringValueExp instead of a simple constant string
 doesn't serve any useful purpose besides offering a consistent
 look & feel."
      end

      operation 9756290 "getClassNameValue"
	public return_type class_ref 1188610 // StringValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class name.
@returns The {@link StringValueExp} returning the name of
       the class of which selected MBeans should be instances.
"
      end

      operation 9756418 "apply"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the InstanceOf on a MBean.

@param name The name of the MBean on which the InstanceOf will be applied.

@return  True if the MBean specified by the name is instance of the class.
@exception BadAttributeValueExpException
@exception InvalidApplicationException
@exception BadStringOperationException
@exception BadBinaryOpValueExpException
"
      end

      operation 9756546 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this InstanceOfQueryExp.
@return a string representation of this InstanceOfQueryExp.
"
      end
    end

    class 1188610 "StringValueExp"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents strings that are arguments to relational constraints.
A <CODE>StringValueExp</CODE> may be used anywhere a <CODE>ValueExp</CODE> is required.

@since 1.5
"
      classrelation 3807234 // <realization>
	relation 3807234 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3807234 // <realization>
	  b parent class_ref 1186946 // ValueExp
      end

      attribute 2278274 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3256390509806284044L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3807362 // val (<unidirectional association>)
	relation 3807362 --->
	  a role_name "val" private
	    comment "
@serial The string literal

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3807362 // val (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9808130 "StringValueExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic constructor.
"
      end

      operation 9808258 "StringValueExp"
	public explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <CODE>StringValueExp</CODE> representing the
given string.

@param val the string that will be the value of this expression
"
      end

      operation 9808386 "getValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string represented by the
<CODE>StringValueExp</CODE> instance.

@return the string.
"
      end

      operation 9808514 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representing the object.
"
      end

      operation 9808642 "setMBeanServer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the MBean server on which the query is to be performed.

@param s The MBean server on which the query is to be performed.

 There is no need for this method, because if a query is being
evaluated a StringValueExp can only appear inside a QueryExp,
and that QueryExp will itself have done setMBeanServer.  "
      end

      operation 9808770 "apply"
	public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the ValueExp on a MBean.

@param name The name of the MBean on which the ValueExp will be applied.

@return  The <CODE>ValueExp</CODE>.

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end
    end

    class 1188738 "MatchQueryExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used by the query-building mechanism to represent binary
relations.
@serial include

@since 1.5
"
      classrelation 3789442 // <generalisation>
	relation 3789442 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3789442 // <generalisation>
	  b parent class_ref 501762 // QueryEval
      end

      classrelation 3789570 // <realization>
	relation 3789570 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3789570 // <realization>
	  b parent class_ref 486402 // QueryExp
      end

      attribute 2265986 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7156603696948215014L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3789698 // exp (<unidirectional association>)
	relation 3789698 --->
	  a role_name "exp" private
	    comment "
@serial The attribute value to be matched

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3789698 // exp (<unidirectional association>)
	  b parent class_ref 1186818 // AttributeValueExp
      end

      classrelation 3789826 // pattern (<unidirectional association>)
	relation 3789826 --->
	  a role_name "pattern" private
	    comment "
@serial The pattern to be matched

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3789826 // pattern (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9758722 "MatchQueryExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic Constructor.
"
      end

      operation 9758850 "MatchQueryExp"
	public explicit_return_type ""
	nparams 2
	  param inout name "a" type class_ref 1186818 // AttributeValueExp
	  param inout name "s" type class_ref 1188610 // StringValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new MatchQueryExp where the specified AttributeValueExp matches
the specified pattern StringValueExp.
"
      end

      operation 9758978 "getAttribute"
	public return_type class_ref 1186818 // AttributeValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the attribute of the query.
"
      end

      operation 9759106 "getPattern"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pattern of the query.
"
      end

      operation 9759234 "apply"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the MatchQueryExp on a MBean.

@param name The name of the MBean on which the MatchQueryExp will be applied.

@return  True if the query was successfully applied to the MBean, false otherwise.

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 9759362 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representing the object
"
      end

      operation 9759490 "wildmatch"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "p" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether string s is matched by pattern p.
Supports \"?\", \"*\", \"[\", each of which may be escaped with \"\\\";
character classes may use \"!\" for negation and \"-\" for range.
Not yet supported: internationalization; \"\\\" inside brackets.<P>
Wildcard matching routine by Karl Heuer.  Public Domain.<P>
"
      end
    end

    class 1188866 "MBeanFeatureInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Provides general information for an MBean descriptor object.
The feature described can be an attribute, an operation, a
parameter, or a notification.  Instances of this class are
immutable.  Subclasses may be mutable but this is not
recommended.</p>

@since 1.5
"
      classrelation 3789954 // <realization>
	relation 3789954 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3789954 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3790082 // <realization>
	relation 3790082 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3790082 // <realization>
	  b parent class_ref 1188098 // DescriptorRead
      end

      attribute 2266114 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 3952882688968447265L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3790210 // name (<unidirectional association>)
	relation 3790210 --->
	  a role_name "name" protected
	    comment "
The name of the feature.  It is recommended that subclasses call
{@link #getName} rather than reading this field, and that they
not change it.

@serial The name of the feature.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3790210 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3790338 // description (<unidirectional association>)
	relation 3790338 --->
	  a role_name "description" protected
	    comment "
The human-readable description of the feature.  It is
recommended that subclasses call {@link #getDescription} rather
than reading this field, and that they not change it.

@serial The human-readable description of the feature.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3790338 // description (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3790466 // descriptor (<unidirectional association>)
	relation 3790466 --->
	  a role_name "descriptor" private
	    comment "
@serial The Descriptor for this MBeanFeatureInfo.  This field
can be null, which is equivalent to an empty Descriptor.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3790466 // descriptor (<unidirectional association>)
	  b parent class_ref 489986 // Descriptor
      end

      operation 9759618 "MBeanFeatureInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanFeatureInfo</CODE> object.  This
constructor is equivalent to {@code MBeanFeatureInfo(name,
description, (Descriptor) null}.

@param name The name of the feature.
@param description A human readable description of the feature.
"
      end

      operation 9759746 "MBeanFeatureInfo"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanFeatureInfo</CODE> object.

@param name The name of the feature.
@param description A human readable description of the feature.
@param descriptor The descriptor for the feature.  This may be null
which is equivalent to an empty descriptor.

@since 1.6
"
      end

      operation 9759874 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the feature.

@return the name of the feature.
"
      end

      operation 9760002 "getDescription"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the human-readable description of the feature.

@return the human-readable description of the feature.
"
      end

      operation 9760130 "getDescriptor"
	public return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the descriptor for the feature.  Changing the returned value
will have no affect on the original descriptor.

@return a descriptor that is either immutable or a copy of the original.

@since 1.6
"
      end

      operation 9760258 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this MBeanFeatureInfo to another.

@param o the object to compare to.

@return true if and only if <code>o</code> is an MBeanFeatureInfo such
that its {@link #getName()}, {@link #getDescription()}, and
{@link #getDescriptor()}
values are equal (not necessarily identical) to those of this
MBeanFeatureInfo.
"
      end

      operation 9760386 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9760514 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes an {@link MBeanFeatureInfo} to an {@link ObjectOutputStream}.
@serialData
For compatibility reasons, an object of this class is serialized as follows.
<p>
The method {@link ObjectOutputStream#defaultWriteObject defaultWriteObject()}
is called first to serialize the object except the field {@code descriptor}
which is declared as transient. The field {@code descriptor} is serialized
as follows:
    <ul>
    <li>If {@code descriptor} is an instance of the class
       {@link ImmutableDescriptor}, the method {@link ObjectOutputStream#write
       write(int val)} is called to write a byte with the value {@code 1},
       then the method {@link ObjectOutputStream#writeObject writeObject(Object obj)}
       is called twice to serialize the field names and the field values of the
       {@code descriptor}, respectively as a {@code String[]} and an
       {@code Object[]};</li>
    <li>Otherwise, the method {@link ObjectOutputStream#write write(int val)}
is called to write a byte with the value {@code 0}, then the method
{@link ObjectOutputStream#writeObject writeObject(Object obj)} is called
to serialize directly the field {@code descriptor}.
    </ul>

@since 1.6
"
      end

      operation 9760642 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes an {@link MBeanFeatureInfo} from an {@link ObjectInputStream}.
@serialData
For compatibility reasons, an object of this class is deserialized as follows.
<p>
The method {@link ObjectInputStream#defaultReadObject defaultReadObject()}
is called first to deserialize the object except the field
{@code descriptor}, which is not serialized in the default way. Then the method
{@link ObjectInputStream#read read()} is called to read a byte, the field
{@code descriptor} is deserialized according to the value of the byte value:
   <ul>
   <li>1. The method {@link ObjectInputStream#readObject readObject()}
      is called twice to obtain the field names (a {@code String[]}) and
      the field values (a {@code Object[]}) of the {@code descriptor}.
      The two obtained values then are used to construct
      an {@link ImmutableDescriptor} instance for the field
      {@code descriptor};</li>
   <li>0. The value for the field {@code descriptor} is obtained directly
      by calling the method {@link ObjectInputStream#readObject readObject()}.
      If the obtained value is null, the field {@code descriptor} is set to
      {@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR};</li>
   <li>-1. This means that there is no byte to read and that the object is from
      an earlier version of the JMX API. The field {@code descriptor} is set
      to {@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR}</li>
   <li>Any other value. A {@link StreamCorruptedException} is thrown.</li>
   </ul>

@since 1.6
"
      end
    end

    class 1188994 "MBeanParameterInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Describes an argument of an operation exposed by an MBean.
Instances of this class are immutable.  Subclasses may be mutable
but this is not recommended.

@since 1.5
"
      classrelation 3794946 // <generalisation>
	relation 3794946 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3794946 // <generalisation>
	  b parent class_ref 1188866 // MBeanFeatureInfo
      end

      classrelation 3795074 // <realization>
	relation 3795074 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3795074 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 2268674 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 7432616882776782338L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3795202 // NO_PARAMS (<unidirectional association>)
	relation 3795202 --->
	  a role_name "NO_PARAMS" multiplicity "[]" init_value " new MBeanParameterInfo[0]" class_relation const_relation package
	    comment " All zero-length arrays are interchangeable. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3795202 // NO_PARAMS (<unidirectional association>)
	  b parent class_ref 1188994 // MBeanParameterInfo
      end

      classrelation 3795330 // type (<unidirectional association>)
	relation 3795330 --->
	  a role_name "type" const_relation private
	    comment "
@serial The type or class name of the data.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3795330 // type (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9770498 "MBeanParameterInfo"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanParameterInfo</CODE> object.

@param name The name of the data
@param type The type or class name of the data
@param description A human readable description of the data. Optional.
"
      end

      operation 9770626 "MBeanParameterInfo"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	  param inout name "descriptor" type class_ref 489986 // Descriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <CODE>MBeanParameterInfo</CODE> object.

@param name The name of the data
@param type The type or class name of the data
@param description A human readable description of the data. Optional.
@param descriptor The descriptor for the operation.  This may be null
which is equivalent to an empty descriptor.

@since 1.6
"
      end

      operation 9770754 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a shallow clone of this instance.
The clone is obtained by simply calling <tt>super.clone()</tt>,
thus calling the default native shallow cloning mechanism
implemented by <tt>Object.clone()</tt>.
No deeper cloning of any internal field is made.</p>

<p>Since this class is immutable, cloning is chiefly of
interest to subclasses.</p>
"
      end

      operation 9770882 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type or class name of the data.

@return the type string.
"
      end

      operation 9771010 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9771138 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this MBeanParameterInfo to another.

@param o the object to compare to.

@return true if and only if <code>o</code> is an MBeanParameterInfo such
that its {@link #getName()}, {@link #getType()},
{@link #getDescriptor()}, and {@link
#getDescription()} values are equal (not necessarily identical)
to those of this MBeanParameterInfo.
"
      end

      operation 9771266 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1189250 "MBeanPermission"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Permission controlling access to MBeanServer operations.  If a
security manager has been set using {@link
System#setSecurityManager}, most operations on the MBean Server
require that the caller's permissions imply an MBeanPermission
appropriate for the operation.  This is described in detail in the
documentation for the {@link MBeanServer} interface.</p>

<p>As with other {@link Permission} objects, an MBeanPermission can
represent either a permission that you <em>have</em> or a
permission that you <em>need</em>.  When a sensitive operation is
being checked for permission, an MBeanPermission is constructed
representing the permission you need.  The operation is only
allowed if the permissions you have {@linkplain #implies imply} the
permission you need.</p>

<p>An MBeanPermission contains four items of information:</p>

<ul>

<li><p>The <em>action</em>.  For a permission you need,
this is one of the actions in the list <a
href=\"#action-list\">below</a>.  For a permission you have, this is
a comma-separated list of those actions, or <code>*</code>,
representing all actions.</p>

<p>The action is returned by {@link #getActions()}.</p>

<li><p>The <em>class name</em>.</p>

<p>For a permission you need, this is the class name of an MBean
you are accessing, as returned by {@link
MBeanServer#getMBeanInfo(ObjectName)
MBeanServer.getMBeanInfo(name)}.{@link MBeanInfo#getClassName()
getClassName()}.  Certain operations do not reference a class name,
in which case the class name is null.</p>

<p>For a permission you have, this is either empty or a <em>class
name pattern</em>.  A class name pattern is a string following the
Java conventions for dot-separated class names.  It may end with
\"<code>.*</code>\" meaning that the permission grants access to any
class that begins with the string preceding \"<code>.*</code>\".  For
instance, \"<code>javax.management.*</code>\" grants access to
<code>javax.management.MBeanServerDelegate</code> and
<code>javax.management.timer.Timer</code>, among other classes.</p>

<p>A class name pattern can also be empty or the single character
\"<code>*</code>\", both of which grant access to any class.</p>

<li><p>The <em>member</em>.</p>

<p>For a permission you need, this is the name of the attribute or
operation you are accessing.  For operations that do not reference
an attribute or operation, the member is null.</p>

<p>For a permission you have, this is either the name of an attribute
or operation you can access, or it is empty or the single character
\"<code>*</code>\", both of which grant access to any member.</p>

<li id=\"MBeanName\"><p>The <em>object name</em>.</p>

<p>For a permission you need, this is the {@link ObjectName} of the
MBean you are accessing.  For operations that do not reference a
single MBean, it is null.  It is never an object name pattern.</p>

<p>For a permission you have, this is the {@link ObjectName} of the
MBean or MBeans you can access.  It may be an object name pattern
to grant access to all MBeans whose names match the pattern.  It
may also be empty, which grants access to all MBeans whatever their
name.</p>

</ul>

<p>If you have an MBeanPermission, it allows operations only if all
four of the items match.</p>

<p>The class name, member, and object name can be written together
as a single string, which is the <em>name</em> of this permission.
The name of the permission is the string returned by {@link
Permission#getName() getName()}.  The format of the string is:</p>

<blockquote>
<code>className#member[objectName]</code>
</blockquote>

<p>The object name is written using the usual syntax for {@link
ObjectName}.  It may contain any legal characters, including
<code>]</code>.  It is terminated by a <code>]</code> character
that is the last character in the string.</p>

<p>One or more of the <code>className</code>, <code>member</code>,
or <code>objectName</code> may be omitted.  If the
<code>member</code> is omitted, the <code>#</code> may be too (but
does not have to be).  If the <code>objectName</code> is omitted,
the <code>[]</code> may be too (but does not have to be).  It is
not legal to omit all three items, that is to have a <em>name</em>
that is the empty string.</p>

<p>One or more of the <code>className</code>, <code>member</code>,
or <code>objectName</code> may be the character \"<code>-</code>\",
which is equivalent to a null value.  A null value is implied by
any value (including another null value) but does not imply any
other value.</p>

<p><a name=\"action-list\">The possible actions are these:</a></p>

<ul>
<li>addNotificationListener</li>
<li>getAttribute</li>
<li>getClassLoader</li>
<li>getClassLoaderFor</li>
<li>getClassLoaderRepository</li>
<li>getDomains</li>
<li>getMBeanInfo</li>
<li>getObjectInstance</li>
<li>instantiate</li>
<li>invoke</li>
<li>isInstanceOf</li>
<li>queryMBeans</li>
<li>queryNames</li>
<li>registerMBean</li>
<li>removeNotificationListener</li>
<li>setAttribute</li>
<li>unregisterMBean</li>
</ul>

<p>In a comma-separated list of actions, spaces are allowed before
and after each action.</p>

@since 1.5
"
      classrelation 3795458 // <generalisation>
	relation 3795458 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3795458 // <generalisation>
	  b parent class_ref 257538 // Permission
      end

      attribute 2268802 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2416928705275160661L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2268930 "AddNotificationListener"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Actions list.

"
      end

      attribute 2269058 "GetAttribute"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2269186 "GetClassLoader"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2269314 "GetClassLoaderFor"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00008"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2269442 "GetClassLoaderRepository"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00010"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2269570 "GetDomains"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00020"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2269698 "GetMBeanInfo"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00040"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2269826 "GetObjectInstance"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00080"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2269954 "Instantiate"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2270082 "Invoke"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00200"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2270210 "IsInstanceOf"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00400"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2270338 "QueryMBeans"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00800"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2270466 "QueryNames"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x01000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2270594 "RegisterMBean"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x02000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2270722 "RemoveNotificationListener"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x04000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2270850 "SetAttribute"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x08000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2270978 "UnregisterMBean"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x10000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2271106 "NONE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x00000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "No actions.

"
      end

      attribute 2271234 "ALL"
	class_attribute const_attribute private explicit_type "int"
	init_value "
        AddNotificationListener    |
        GetAttribute               |
        GetClassLoader             |
        GetClassLoaderFor          |
        GetClassLoaderRepository   |
        GetDomains                 |
        GetMBeanInfo               |
        GetObjectInstance          |
        Instantiate                |
        Invoke                     |
        IsInstanceOf               |
        QueryMBeans                |
        QueryNames                 |
        RegisterMBean              |
        RemoveNotificationListener |
        SetAttribute               |
        UnregisterMBean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "All actions.

"
      end

      classrelation 3795586 // actions (<unidirectional association>)
	relation 3795586 --->
	  a role_name "actions" private
	    comment "
The actions string.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3795586 // actions (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2271362 "mask"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The actions mask.

"
      end

      classrelation 3795714 // classNamePrefix (<unidirectional association>)
	relation 3795714 --->
	  a role_name "classNamePrefix" private
	    comment "
The classname prefix that must match.  If null, is implied by any
classNamePrefix but does not imply any non-null classNamePrefix.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3795714 // classNamePrefix (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2271490 "classNameExactMatch"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if classNamePrefix must match exactly.  Otherwise, the
className being matched must start with classNamePrefix.

"
      end

      classrelation 3795842 // member (<unidirectional association>)
	relation 3795842 --->
	  a role_name "member" private
	    comment "
The member that must match.  If null, is implied by any member
but does not imply any non-null member.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3795842 // member (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3795970 // objectName (<unidirectional association>)
	relation 3795970 --->
	  a role_name "objectName" private
	    comment "
The objectName that must match.  If null, is implied by any
objectName but does not imply any non-null objectName.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3795970 // objectName (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end

      operation 9771394 "parseActions"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse <code>actions</code> parameter.
"
      end

      operation 9771522 "parseName"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse <code>name</code> parameter.
"
      end

      operation 9771650 "initName"
	private explicit_return_type "void"
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "member" type class_ref 128130 // String
	  param inout name "objectName" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assign fields based on className, member, and objectName
parameters.
"
      end

      operation 9771778 "setClassName"
	private explicit_return_type "void"
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9771906 "setMember"
	private explicit_return_type "void"
	nparams 1
	  param inout name "member" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9772034 "MBeanPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Create a new MBeanPermission object with the specified target name
and actions.</p>

<p>The target name is of the form
\"<code>className#member[objectName]</code>\" where each part is
optional.  It must not be empty or null.</p>

<p>The actions parameter contains a comma-separated list of the
desired actions granted on the target name.  It must not be
empty or null.</p>

@param name the triplet \"className#member[objectName]\".
@param actions the action string.

@exception IllegalArgumentException if the <code>name</code> or
<code>actions</code> is invalid.
"
      end

      operation 9772162 "MBeanPermission"
	public explicit_return_type ""
	nparams 4
	  param inout name "className" type class_ref 128130 // String
	  param inout name "member" type class_ref 128130 // String
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Create a new MBeanPermission object with the specified target name
(class name, member, object name) and actions.</p>

<p>The class name, member and object name parameters define a
target name of the form
\"<code>className#member[objectName]</code>\" where each part is
optional.  This will be the result of {@link #getName()} on the
resultant MBeanPermission.</p>

<p>The actions parameter contains a comma-separated list of the
desired actions granted on the target name.  It must not be
empty or null.</p>

@param className the class name to which this permission applies.
May be null or <code>\"-\"</code>, which represents a class name
that is implied by any class name but does not imply any other
class name.
@param member the member to which this permission applies.  May
be null or <code>\"-\"</code>, which represents a member that is
implied by any member but does not imply any other member.
@param objectName the object name to which this permission
applies.  May be null, which represents an object name that is
implied by any object name but does not imply any other object
name.
@param actions the action string.
"
      end

      operation 9772290 "makeName"
	class_operation private return_type class_ref 128130 // String
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "member" type class_ref 128130 // String
	  param inout name "objectName" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9772418 "getActions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"canonical string representation\" of the actions. That is,
this method always returns present actions in alphabetical order.

@return the canonical string representation of the actions.
"
      end

      operation 9772546 "getActions"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"canonical string representation\"
of the actions from the mask.
"
      end

      operation 9772674 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this object.

@return a hash code value for this object.
"
      end

      operation 9772802 "getMask"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "action" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an action String to an integer action mask.

@param action the action string.
@return the action mask.
"
      end

      operation 9772930 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Checks if this MBeanPermission object \"implies\" the
specified permission.</p>

<p>More specifically, this method returns true if:</p>

<ul>

<li> <i>p</i> is an instance of MBeanPermission; and</li>

<li> <i>p</i> has a null className or <i>p</i>'s className
matches this object's className; and</li>

<li> <i>p</i> has a null member or <i>p</i>'s member matches this
object's member; and</li>

<li> <i>p</i> has a null object name or <i>p</i>'s
object name matches this object's object name; and</li>

<li> <i>p</i>'s actions are a subset of this object's actions</li>

</ul>

<p>If this object's className is \"<code>*</code>\", <i>p</i>'s
className always matches it.  If it is \"<code>a.*</code>\", <i>p</i>'s
className matches it if it begins with \"<code>a.</code>\".</p>

<p>If this object's member is \"<code>*</code>\", <i>p</i>'s
member always matches it.</p>

<p>If this object's objectName <i>n1</i> is an object name pattern,
<i>p</i>'s objectName <i>n2</i> matches it if
{@link ObjectName#equals <i>n1</i>.equals(<i>n2</i>)} or if
{@link ObjectName#apply <i>n1</i>.apply(<i>n2</i>)}.</p>

<p>A permission that includes the <code>queryMBeans</code> action
is considered to include <code>queryNames</code> as well.</p>

@param p the permission to check against.
@return true if the specified permission is implied by this object,
false if not.
"
      end

      operation 9773058 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks two MBeanPermission objects for equality. Checks
that <i>obj</i> is an MBeanPermission, and has the same
name and actions as this object.
<P>
@param obj the object we are testing for equality with this object.
@return true if obj is an MBeanPermission, and has the
same name and actions as this MBeanPermission object.
"
      end

      operation 9773186 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserialize this object based on its name and actions.
"
      end
    end

    class 1189378 "MBeanServerFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Provides MBean server references.  There are no instances of
this class.</p>

<p>Since JMX 1.2 this class makes it possible to replace the default
MBeanServer implementation. This is done using the
{@link javax.management.MBeanServerBuilder} class.
The class of the initial MBeanServerBuilder to be
instantiated can be specified through the
<b>javax.management.builder.initial</b> system property.
The specified class must be a public subclass of
{@link javax.management.MBeanServerBuilder}, and must have a public
empty constructor.
<p>By default, if no value for that property is specified, an instance of
{@link
javax.management.MBeanServerBuilder javax.management.MBeanServerBuilder}
is created. Otherwise, the MBeanServerFactory attempts to load the
specified class using
{@link java.lang.Thread#getContextClassLoader()
  Thread.currentThread().getContextClassLoader()}, or if that is null,
{@link java.lang.Class#forName(java.lang.String) Class.forName()}. Then
it creates an initial instance of that Class using
{@link java.lang.Class#newInstance()}. If any checked exception
is raised during this process (e.g.
{@link java.lang.ClassNotFoundException},
{@link java.lang.InstantiationException}) the MBeanServerFactory
will propagate this exception from within a RuntimeException.</p>

<p>The <b>javax.management.builder.initial</b> system property is
consulted every time a new MBeanServer needs to be created, and the
class pointed to by that property is loaded. If that class is different
from that of the current MBeanServerBuilder, then a new MBeanServerBuilder
is created. Otherwise, the MBeanServerFactory may create a new
MBeanServerBuilder or reuse the current one.</p>

<p>If the class pointed to by the property cannot be
loaded, or does not correspond to a valid subclass of MBeanServerBuilder
then an exception is propagated, and no MBeanServer can be created until
the <b>javax.management.builder.initial</b> system property is reset to
valid value.</p>

<p>The MBeanServerBuilder makes it possible to wrap the MBeanServers
returned by the default MBeanServerBuilder implementation, for the purpose
of e.g. adding an additional security layer.</p>

@since 1.5
"
      operation 9773570 "MBeanServerFactory"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "There are no instances of this class so don't generate the
default public constructor.
"
      end

      classrelation 3796226 // builder (<unidirectional association>)
	relation 3796226 --->
	  a role_name "builder" init_value " null" class_relation private
	    comment "
The builder that will be used to construct MBeanServers.


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3796226 // builder (<unidirectional association>)
	  b parent class_ref 495746 // MBeanServerBuilder
      end

      operation 9773698 "releaseMBeanServer"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "mbeanServer" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provide a new {@link javax.management.MBeanServerBuilder}.
@param builder The new MBeanServerBuilder that will be used to
       create {@link javax.management.MBeanServer}s.
@exception IllegalArgumentException if the given builder is null.

@exception SecurityException if there is a SecurityManager and
the caller's permissions do not include or imply <code>{@link
MBeanServerPermission}(\"setMBeanServerBuilder\")</code>.


 public static synchronized void
    setMBeanServerBuilder(MBeanServerBuilder builder) {
    checkPermission(\"setMBeanServerBuilder\");
    MBeanServerFactory.builder = builder;
 }

Get the current {@link javax.management.MBeanServerBuilder}.

@return the current {@link javax.management.MBeanServerBuilder}.

@exception SecurityException if there is a SecurityManager and
the caller's permissions do not include or imply <code>{@link
MBeanServerPermission}(\"getMBeanServerBuilder\")</code>.


 public static synchronized MBeanServerBuilder getMBeanServerBuilder() {
     checkPermission(\"getMBeanServerBuilder\");
     return builder;
 }

Remove internal MBeanServerFactory references to a created
MBeanServer. This allows the garbage collector to remove the
MBeanServer object.

@param mbeanServer the MBeanServer object to remove.

@exception java.lang.IllegalArgumentException if
<code>mbeanServer</code> was not generated by one of the
<code>createMBeanServer</code> methods, or if
<code>releaseMBeanServer</code> was already called on it.

@exception SecurityException if there is a SecurityManager and
the caller's permissions do not include or imply <code>{@link
MBeanServerPermission}(\"releaseMBeanServer\")</code>.
"
      end

      operation 9773826 "createMBeanServer"
	class_operation public return_type class_ref 485122 // MBeanServer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return a new object implementing the MBeanServer interface
with a standard default domain name.  The default domain name
is used as the domain part in the ObjectName of MBeans when the
domain is specified by the user is null.</p>

<p>The standard default domain name is
<code>DefaultDomain</code>.</p>

<p>The MBeanServer reference is internally kept. This will
allow <CODE>findMBeanServer</CODE> to return a reference to
this MBeanServer object.</p>

<p>This method is equivalent to <code>createMBeanServer(null)</code>.

@return the newly created MBeanServer.

@exception SecurityException if there is a SecurityManager and the
caller's permissions do not include or imply <code>{@link
MBeanServerPermission}(\"createMBeanServer\")</code>.

@exception JMRuntimeException if the property
<code>javax.management.builder.initial</code> exists but the
class it names cannot be instantiated through a public
no-argument constructor; or if the instantiated builder returns
null from its {@link MBeanServerBuilder#newMBeanServerDelegate
newMBeanServerDelegate} or {@link
MBeanServerBuilder#newMBeanServer newMBeanServer} methods.

@exception ClassCastException if the property
<code>javax.management.builder.initial</code> exists and can be
instantiated but is not assignment compatible with {@link
MBeanServerBuilder}.
"
      end

      operation 9773954 "createMBeanServer"
	class_operation public return_type class_ref 485122 // MBeanServer
	nparams 1
	  param inout name "domain" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return a new object implementing the {@link MBeanServer}
interface with the specified default domain name.  The given
domain name is used as the domain part in the ObjectName of
MBeans when the domain is specified by the user is null.</p>

<p>The MBeanServer reference is internally kept. This will
allow <CODE>findMBeanServer</CODE> to return a reference to
this MBeanServer object.</p>

@param domain the default domain name for the created
MBeanServer.  This is the value that will be returned by {@link
MBeanServer#getDefaultDomain}.

@return the newly created MBeanServer.

@exception SecurityException if there is a SecurityManager and
the caller's permissions do not include or imply <code>{@link
MBeanServerPermission}(\"createMBeanServer\")</code>.

@exception JMRuntimeException if the property
<code>javax.management.builder.initial</code> exists but the
class it names cannot be instantiated through a public
no-argument constructor; or if the instantiated builder returns
null from its {@link MBeanServerBuilder#newMBeanServerDelegate
newMBeanServerDelegate} or {@link
MBeanServerBuilder#newMBeanServer newMBeanServer} methods.

@exception ClassCastException if the property
<code>javax.management.builder.initial</code> exists and can be
instantiated but is not assignment compatible with {@link
MBeanServerBuilder}.
"
      end

      operation 9774082 "newMBeanServer"
	class_operation public return_type class_ref 485122 // MBeanServer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return a new object implementing the MBeanServer interface
with a standard default domain name, without keeping an
internal reference to this new object.  The default domain name
is used as the domain part in the ObjectName of MBeans when the
domain is specified by the user is null.</p>

<p>The standard default domain name is
<code>DefaultDomain</code>.</p>

<p>No reference is kept. <CODE>findMBeanServer</CODE> will not
be able to return a reference to this MBeanServer object, but
the garbage collector will be able to remove the MBeanServer
object when it is no longer referenced.</p>

<p>This method is equivalent to <code>newMBeanServer(null)</code>.</p>

@return the newly created MBeanServer.

@exception SecurityException if there is a SecurityManager and the
caller's permissions do not include or imply <code>{@link
MBeanServerPermission}(\"newMBeanServer\")</code>.

@exception JMRuntimeException if the property
<code>javax.management.builder.initial</code> exists but the
class it names cannot be instantiated through a public
no-argument constructor; or if the instantiated builder returns
null from its {@link MBeanServerBuilder#newMBeanServerDelegate
newMBeanServerDelegate} or {@link
MBeanServerBuilder#newMBeanServer newMBeanServer} methods.

@exception ClassCastException if the property
<code>javax.management.builder.initial</code> exists and can be
instantiated but is not assignment compatible with {@link
MBeanServerBuilder}.
"
      end

      operation 9774210 "newMBeanServer"
	class_operation public return_type class_ref 485122 // MBeanServer
	nparams 1
	  param inout name "domain" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return a new object implementing the MBeanServer interface
with the specified default domain name, without keeping an
internal reference to this new object.  The given domain name
is used as the domain part in the ObjectName of MBeans when the
domain is specified by the user is null.</p>

<p>No reference is kept. <CODE>findMBeanServer</CODE> will not
be able to return a reference to this MBeanServer object, but
the garbage collector will be able to remove the MBeanServer
object when it is no longer referenced.</p>

@param domain the default domain name for the created
MBeanServer.  This is the value that will be returned by {@link
MBeanServer#getDefaultDomain}.

@return the newly created MBeanServer.

@exception SecurityException if there is a SecurityManager and the
caller's permissions do not include or imply <code>{@link
MBeanServerPermission}(\"newMBeanServer\")</code>.

@exception JMRuntimeException if the property
<code>javax.management.builder.initial</code> exists but the
class it names cannot be instantiated through a public
no-argument constructor; or if the instantiated builder returns
null from its {@link MBeanServerBuilder#newMBeanServerDelegate
newMBeanServerDelegate} or {@link
MBeanServerBuilder#newMBeanServer newMBeanServer} methods.

@exception ClassCastException if the property
<code>javax.management.builder.initial</code> exists and can be
instantiated but is not assignment compatible with {@link
MBeanServerBuilder}.
"
      end

      operation 9774338 "findMBeanServer"
	class_operation public return_type class_ref 186498 // ArrayList
	nparams 1
	  param inout name "agentId" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MBeanServer> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return a list of registered MBeanServer objects.  A
registered MBeanServer object is one that was created by one of
the <code>createMBeanServer</code> methods and not subsequently
released with <code>releaseMBeanServer</code>.</p>

@param agentId The agent identifier of the MBeanServer to
retrieve.  If this parameter is null, all registered
MBeanServers in this JVM are returned.  Otherwise, only
MBeanServers whose id is equal to <code>agentId</code> are
returned.  The id of an MBeanServer is the
<code>MBeanServerId</code> attribute of its delegate MBean.

@return A list of MBeanServer objects.

@exception SecurityException if there is a SecurityManager and the
caller's permissions do not include or imply <code>{@link
MBeanServerPermission}(\"findMBeanServer\")</code>.
"
      end

      operation 9774466 "getClassLoaderRepository"
	class_operation public return_type class_ref 487810 // ClassLoaderRepository
	nparams 1
	  param inout name "server" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the ClassLoaderRepository used by the given MBeanServer.
This method is equivalent to {@link
MBeanServer#getClassLoaderRepository() server.getClassLoaderRepository()}.
@param server The MBeanServer under examination. Since JMX 1.2,
if <code>server</code> is <code>null</code>, the result is a
{@link NullPointerException}.  This behavior differs from what
was implemented in JMX 1.1 - where the possibility to use
<code>null</code> was deprecated.
@return The Class Loader Repository used by the given MBeanServer.
@exception SecurityException if there is a SecurityManager and
the caller's permissions do not include or imply <code>{@link
MBeanPermission}(\"getClassLoaderRepository\")</code>.

@exception NullPointerException if <code>server</code> is null.

"
      end

      operation 9774594 "mBeanServerId"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "mbs" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9774722 "checkPermission"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9774850 "addMBeanServer"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "mbs" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9774978 "removeMBeanServer"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "mbs" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3796354 // mBeanServerList (<unidirectional association>)
	relation 3796354 --->
	  a role_name "mBeanServerList" init_value "
            new ArrayList<MBeanServer>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MBeanServer> ${name}${value};
"
	    classrelation_ref 3796354 // mBeanServerList (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      operation 9775106 "loadBuilderClass"
	class_operation private return_type class_ref 130818 // Class
	nparams 1
	  param inout name "builderClassName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the builder class through the context class loader.
@param builderClassName The name of the builder class.
"
      end

      operation 9775234 "newBuilder"
	class_operation private return_type class_ref 495746 // MBeanServerBuilder
	nparams 1
	  param inout name "builderClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the initial builder according to the
javax.management.builder.initial System property - if specified.
If any checked exception needs to be thrown, it is embedded in
a JMRuntimeException.
"
      end

      operation 9775362 "checkMBeanServerBuilder"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiate a new builder according to the
javax.management.builder.initial System property - if needed.
"
      end

      operation 9775490 "getNewMBeanServerBuilder"
	class_operation private return_type class_ref 495746 // MBeanServerBuilder
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current {@link javax.management.MBeanServerBuilder},
as specified by the current value of the
javax.management.builder.initial property.

This method consults the property and instantiates a new builder
if needed.

@return the new current {@link javax.management.MBeanServerBuilder}.

@exception SecurityException if there is a SecurityManager and
the caller's permissions do not make it possible to instantiate
a new builder.
@exception JMRuntimeException if the builder instantiation
  fails with a checked exception -
  {@link java.lang.ClassNotFoundException} etc...

"
      end
    end

    class 1189506 "MBeanServerInvocationHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>{@link InvocationHandler} that forwards methods in an MBean's
management interface through the MBean server to the MBean.</p>

<p>Given an {@link MBeanServerConnection}, the {@link ObjectName}
of an MBean within that MBean server, and a Java interface
<code>Intf</code> that describes the management interface of the
MBean using the patterns for a Standard MBean or an MXBean, this
class can be used to construct a proxy for the MBean.  The proxy
implements the interface <code>Intf</code> such that all of its
methods are forwarded through the MBean server to the MBean.</p>

<p>If the {@code InvocationHandler} is for an MXBean, then the parameters of
a method are converted from the type declared in the MXBean
interface into the corresponding mapped type, and the return value
is converted from the mapped type into the declared type.  For
example, with the method<br>

{@code public List<String> reverse(List<String> list);}<br>

and given that the mapped type for {@code List<String>} is {@code
String[]}, a call to {@code proxy.reverse(someList)} will convert
{@code someList} from a {@code List<String>} to a {@code String[]},
call the MBean operation {@code reverse}, then convert the returned
{@code String[]} into a {@code List<String>}.</p>

<p>The method Object.toString(), Object.hashCode(), or
Object.equals(Object), when invoked on a proxy using this
invocation handler, is forwarded to the MBean server as a method on
the proxied MBean only if it appears in one of the proxy's
interfaces.  For a proxy created with {@link
JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class)
JMX.newMBeanProxy} or {@link
JMX#newMXBeanProxy(MBeanServerConnection, ObjectName, Class)
JMX.newMXBeanProxy}, this means that the method must appear in the
Standard MBean or MXBean interface.  Otherwise these methods have
the following behavior:
<ul>
<li>toString() returns a string representation of the proxy
<li>hashCode() returns a hash code for the proxy such
that two equal proxies have the same hash code
<li>equals(Object)
returns true if and only if the Object argument is of the same
proxy class as this proxy, with an MBeanServerInvocationHandler
that has the same MBeanServerConnection and ObjectName; if one
of the {@code MBeanServerInvocationHandler}s was constructed with
a {@code Class} argument then the other must have been constructed
with the same {@code Class} for {@code equals} to return true.
</ul>

@since 1.5
"
      classrelation 3796482 // <realization>
	relation 3796482 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3796482 // <realization>
	  b parent class_ref 260610 // InvocationHandler
      end

      operation 9775618 "MBeanServerInvocationHandler"
	public explicit_return_type ""
	nparams 2
	  param inout name "connection" type class_ref 485250 // MBeanServerConnection
	  param inout name "objectName" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Invocation handler that forwards methods through an MBean
server to a Standard MBean.  This constructor may be called
instead of relying on {@link
JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class)
JMX.newMBeanProxy}, for instance if you need to supply a
different {@link ClassLoader} to {@link Proxy#newProxyInstance
Proxy.newProxyInstance}.</p>

<p>This constructor is not appropriate for an MXBean.  Use
{@link #MBeanServerInvocationHandler(MBeanServerConnection,
ObjectName, boolean)} for that.  This constructor is equivalent
to {@code new MBeanServerInvocationHandler(connection,
objectName, false)}.</p>

@param connection the MBean server connection through which all
methods of a proxy using this handler will be forwarded.

@param objectName the name of the MBean within the MBean server
to which methods will be forwarded.
"
      end

      operation 9775746 "MBeanServerInvocationHandler"
	public explicit_return_type ""
	nparams 3
	  param inout name "connection" type class_ref 485250 // MBeanServerConnection
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "isMXBean" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Invocation handler that can forward methods through an MBean
server to a Standard MBean or MXBean.  This constructor may be called
instead of relying on {@link
JMX#newMXBeanProxy(MBeanServerConnection, ObjectName, Class)
JMX.newMXBeanProxy}, for instance if you need to supply a
different {@link ClassLoader} to {@link Proxy#newProxyInstance
Proxy.newProxyInstance}.</p>

@param connection the MBean server connection through which all
methods of a proxy using this handler will be forwarded.

@param objectName the name of the MBean within the MBean server
to which methods will be forwarded.

@param isMXBean if true, the proxy is for an {@link MXBean}, and
appropriate mappings will be applied to method parameters and return
values.

@since 1.6
"
      end

      operation 9775874 "getMBeanServerConnection"
	public return_type class_ref 485250 // MBeanServerConnection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The MBean server connection through which the methods of
a proxy using this handler are forwarded.</p>

@return the MBean server connection.

@since 1.6
"
      end

      operation 9776002 "getObjectName"
	public return_type class_ref 485506 // ObjectName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The name of the MBean within the MBean server to which methods
are forwarded.

@return the object name.

@since 1.6
"
      end

      operation 9776130 "isMXBean"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>If true, the proxy is for an MXBean, and appropriate mappings
are applied to method parameters and return values.

@return whether the proxy is for an MXBean.

@since 1.6
"
      end

      operation 9776258 "newProxyInstance"
	class_operation public explicit_return_type "T"
	nparams 4
	  param inout name "connection" type class_ref 485250 // MBeanServerConnection
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "interfaceClass" type class_ref 130818 // Class
	  param inout name "notificationBroadcaster" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return a proxy that implements the given interface by
forwarding its methods through the given MBean server to the
named MBean.  As of 1.6, the methods {@link
JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class)} and
{@link JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class,
boolean)} are preferred to this method.</p>

<p>This method is equivalent to {@link Proxy#newProxyInstance
Proxy.newProxyInstance}<code>(interfaceClass.getClassLoader(),
interfaces, handler)</code>.  Here <code>handler</code> is the
result of {@link #MBeanServerInvocationHandler new
MBeanServerInvocationHandler(connection, objectName)}, and
<code>interfaces</code> is an array that has one element if
<code>notificationBroadcaster</code> is false and two if it is
true.  The first element of <code>interfaces</code> is
<code>interfaceClass</code> and the second, if present, is
<code>NotificationEmitter.class</code>.

@param connection the MBean server to forward to.
@param objectName the name of the MBean within
<code>connection</code> to forward to.
@param interfaceClass the management interface that the MBean
exports, which will also be implemented by the returned proxy.
@param notificationBroadcaster make the returned proxy
implement {@link NotificationEmitter} by forwarding its methods
via <code>connection</code>. A call to {@link
NotificationBroadcaster#addNotificationListener} on the proxy will
result in a call to {@link
MBeanServerConnection#addNotificationListener(ObjectName,
NotificationListener, NotificationFilter, Object)}, and likewise
for the other methods of {@link NotificationBroadcaster} and {@link
NotificationEmitter}.

@param <T> allows the compiler to know that if the {@code
interfaceClass} parameter is {@code MyMBean.class}, for example,
then the return type is {@code MyMBean}.

@return the new proxy instance.

@see JMX#newMBeanProxy(MBeanServerConnection, ObjectName, Class, boolean)
"
      end

      operation 9776386 "invoke"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "proxy" type class_ref 129538 // Object
	  param inout name "method" type class_ref 137858 // Method
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9776514 "findMXBeanProxy"
	class_operation private return_type class_ref 498434 // MXBeanProxy
	nparams 1
	  param inout name "mxbeanInterface" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3796610 // mxbeanProxies (<unidirectional association>)
	relation 3796610 --->
	  a role_name "mxbeanProxies" init_value " new WeakHashMap<Class<?>, WeakReference<MXBeanProxy>>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>, WeakReference<MXBeanProxy>> ${name}${value};
"
	    classrelation_ref 3796610 // mxbeanProxies (<unidirectional association>)
	  b parent class_ref 192002 // WeakHashMap
      end

      operation 9776642 "invokeBroadcasterMethod"
	private return_type class_ref 129538 // Object
	nparams 3
	  param inout name "proxy" type class_ref 129538 // Object
	  param inout name "method" type class_ref 137858 // Method
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9776770 "shouldDoLocally"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "proxy" type class_ref 129538 // Object
	  param inout name "method" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9776898 "doLocally"
	private return_type class_ref 129538 // Object
	nparams 3
	  param inout name "proxy" type class_ref 129538 // Object
	  param inout name "method" type class_ref 137858 // Method
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9777026 "isLocal"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "proxy" type class_ref 129538 // Object
	  param inout name "method" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3796738 // connection (<unidirectional association>)
	relation 3796738 --->
	  a role_name "connection" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3796738 // connection (<unidirectional association>)
	  b parent class_ref 485250 // MBeanServerConnection
      end

      classrelation 3796866 // objectName (<unidirectional association>)
	relation 3796866 --->
	  a role_name "objectName" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3796866 // objectName (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end

      attribute 2271746 "isMXBean"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 1189634 "MBeanServerPermission"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " A Permission to perform actions related to MBeanServers.
The <em>name</em> of the permission specifies the operation requested
or granted by the permission.  For a granted permission, it can be
<code>*</code> to allow all of the MBeanServer operations specified below.
Otherwise, for a granted or requested permission, it must be one of the
following:
<dl>
<dt>createMBeanServer</dt>
<dd>Create a new MBeanServer object using the method
{@link MBeanServerFactory#createMBeanServer()} or
{@link MBeanServerFactory#createMBeanServer(java.lang.String)}.
<dt>findMBeanServer</dt>
<dd>Find an MBeanServer with a given name, or all MBeanServers in this
JVM, using the method {@link MBeanServerFactory#findMBeanServer}.
<dt>newMBeanServer</dt>
<dd>Create a new MBeanServer object without keeping a reference to it,
using the method {@link MBeanServerFactory#newMBeanServer()} or
{@link MBeanServerFactory#newMBeanServer(java.lang.String)}.
<dt>releaseMBeanServer</dt>
<dd>Remove the MBeanServerFactory's reference to an MBeanServer,
using the method {@link MBeanServerFactory#releaseMBeanServer}.
</dl>
The <em>name</em> of the permission can also denote a list of one or more
comma-separated operations.  Spaces are allowed at the beginning and
end of the <em>name</em> and before and after commas.
<p>
<code>MBeanServerPermission(\"createMBeanServer\")</code> implies
<code>MBeanServerPermission(\"newMBeanServer\")</code>.

@since 1.5
"
      classrelation 3797506 // <generalisation>
	relation 3797506 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3797506 // <generalisation>
	  b parent class_ref 257410 // BasicPermission
      end

      attribute 2272002 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5661980843569388590L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2272130 "CREATE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2272258 "FIND"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2272386 "NEW"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2272514 "RELEASE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2272642 "N_NAMES"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3797634 // names (<unidirectional association>)
	relation 3797634 --->
	  a role_name "names" multiplicity "[]" init_value " {
        \"createMBeanServer\",
        \"findMBeanServer\",
        \"newMBeanServer\",
        \"releaseMBeanServer\",
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3797634 // names (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2272770 "CREATE_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1<<CREATE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2272898 "FIND_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1<<FIND"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2273026 "NEW_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1<<NEW"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2273154 "RELEASE_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1<<RELEASE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2273282 "ALL_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " CREATE_MASK|FIND_MASK|NEW_MASK|RELEASE_MASK"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3797762 // canonicalNames (<unidirectional association>)
	relation 3797762 --->
	  a role_name "canonicalNames" multiplicity "[]" init_value " new String[1 << N_NAMES]" class_relation const_relation private
	    comment "
Map from permission masks to canonical names.  This array is
filled in on demand.

This isn't very scalable.  If we have more than five or six
permissions, we should consider doing this differently,
e.g. with a Map.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3797762 // canonicalNames (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2273410 "mask"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The target names mask.  This is not private to avoid having to
generate accessor methods for accesses from the collection class.

This mask includes implied bits.  So if it has CREATE_MASK then
it necessarily has NEW_MASK too.

"
      end

      operation 9777538 "MBeanServerPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <p>Create a new MBeanServerPermission with the given name.</p>
<p>This constructor is equivalent to
<code>MBeanServerPermission(name,null)</code>.</p>
@param name the name of the granted permission.  It must
respect the constraints spelt out in the description of the
{@link MBeanServerPermission} class.
@exception NullPointerException if the name is null.
@exception IllegalArgumentException if the name is not
<code>*</code> or one of the allowed names or a comma-separated
list of the allowed names.
"
      end

      operation 9777666 "MBeanServerPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <p>Create a new MBeanServerPermission with the given name.</p>
@param name the name of the granted permission.  It must
respect the constraints spelt out in the description of the
{@link MBeanServerPermission} class.
@param actions the associated actions.  This parameter is not
currently used and must be null or the empty string.
@exception NullPointerException if the name is null.
@exception IllegalArgumentException if the name is not
<code>*</code> or one of the allowed names or a comma-separated
list of the allowed names, or if <code>actions</code> is a non-null
non-empty string.

@throws NullPointerException if <code>name</code> is <code>null</code>.
@throws IllegalArgumentException if <code>name</code> is empty or
if arguments are invalid.
"
      end

      operation 9777794 "MBeanServerPermission"
	package explicit_return_type ""
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9777922 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9778050 "simplifyMask"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9778178 "impliedMask"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9778306 "getCanonicalName"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9778434 "makeCanonicalName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9778562 "parseMask"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert the string into a bitmask, including bits that
are implied by the permissions in the string.  "
      end

      operation 9778690 "nameIndex"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9778818 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9778946 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Checks if this MBeanServerPermission object \"implies\" the specified
permission.</p>

<p>More specifically, this method returns true if:</p>

<ul>
<li> <i>p</i> is an instance of MBeanServerPermission,</li>
<li> <i>p</i>'s target names are a subset of this object's target
names</li>
</ul>

<p>The <code>createMBeanServer</code> permission implies the
<code>newMBeanServer</code> permission.</p>

@param p the permission to check against.
@return true if the specified permission is implied by this object,
false if not.
"
      end

      operation 9779074 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks two MBeanServerPermission objects for equality. Checks that
<i>obj</i> is an MBeanServerPermission, and represents the same
list of allowable actions as this object.
<P>
@param obj the object we are testing for equality with this object.
@return true if the objects are equal.
"
      end

      operation 9779202 "newPermissionCollection"
	public return_type class_ref 257794 // PermissionCollection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1189762 "MBeanServerPermissionCollection"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Class returned by {@link MBeanServerPermission#newPermissionCollection()}.

@serial include


Since every collection of MBSP can be represented by a single MBSP,
that is what our PermissionCollection does.  We need to define a
PermissionCollection because the one inherited from BasicPermission
doesn't know that createMBeanServer implies newMBeanServer.

Though the serial form is defined, the TCK does not check it.  We do
not require independent implementations to duplicate it.  Even though
PermissionCollection is Serializable, instances of this class will
hardly ever be serialized, and different implementations do not
typically exchange serialized permission collections.

If we did require that a particular form be respected here, we would
logically also have to require it for
MBeanPermission.newPermissionCollection, which would preclude an
implementation from defining a PermissionCollection there with an
optimized \"implies\" method.
"
      classrelation 3797890 // <generalisation>
	relation 3797890 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3797890 // <generalisation>
	  b parent class_ref 257794 // PermissionCollection
      end

      classrelation 3798018 // collectionPermission (<unidirectional association>)
	relation 3798018 --->
	  a role_name "collectionPermission" private
	    comment " @serial Null if no permissions in collection, otherwise a
single permission that is the union of all permissions that
have been added.  
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3798018 // collectionPermission (<unidirectional association>)
	  b parent class_ref 1189634 // MBeanServerPermission
      end

      attribute 2273538 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5661980843569388590L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9779330 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9779458 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9779586 "elements"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1189890 "MBeanTrustPermission"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This permission represents \"trust\" in a signer or codebase.
<p>
MBeanTrustPermission contains a target name but no actions list.
A single target name, \"register\", is defined for this permission.
The target \"*\" is also allowed, permitting \"register\" and any future
targets that may be defined.
Only the null value or the empty string are allowed for the action
to allow the policy object to create the permissions specified in
the policy file.
<p>
If a signer, or codesource is granted this permission, then it is
considered a trusted source for MBeans. Only MBeans from trusted
sources may be registered in the MBeanServer.

@since 1.5
"
      classrelation 3798146 // <generalisation>
	relation 3798146 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3798146 // <generalisation>
	  b parent class_ref 257410 // BasicPermission
      end

      attribute 2273666 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2952178077029018140L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9779714 "MBeanTrustPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <p>Create a new MBeanTrustPermission with the given name.</p>
<p>This constructor is equivalent to
<code>MBeanTrustPermission(name,null)</code>.</p>
@param name the name of the permission. It must be
\"register\" or \"*\" for this permission.

@throws NullPointerException if <code>name</code> is <code>null</code>.
@throws IllegalArgumentException if <code>name</code> is neither
\"register\" nor \"*\".
"
      end

      operation 9779842 "MBeanTrustPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <p>Create a new MBeanTrustPermission with the given name.</p>
@param name the name of the permission. It must be
\"register\" or \"*\" for this permission.
@param actions the actions for the permission.  It must be
null or <code>\"\"</code>.

@throws NullPointerException if <code>name</code> is <code>null</code>.
@throws IllegalArgumentException if <code>name</code> is neither
\"register\" nor \"*\"; or if <code>actions</code> is a non-null
non-empty string.
"
      end

      operation 9779970 "validate"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9780098 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1190018 "MXBean"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Annotation to mark an interface explicitly as being an MXBean
interface, or as not being an MXBean interface.  By default, an
interface is an MXBean interface if it is public and its name ends
with {@code MXBean}, as in {@code SomethingMXBean}.  The following
interfaces are MXBean interfaces:</p>

<pre>
public interface WhatsitMXBean {}

&#64;MXBean
public interface Whatsit1Interface {}

&#64;MXBean(true)
public interface Whatsit2Interface {}
</pre>

<p>The following interfaces are not MXBean interfaces:</p>

<pre>
interface NonPublicInterfaceNotMXBean{}

public interface Whatsit3Interface{}

&#64;MXBean(false)
public interface MisleadingMXBean {}
</pre>

<h3 id=\"MXBean-spec\">MXBean specification</h3>

<p>The MXBean concept provides a simple way to code an MBean
that only references a predefined set of types, the ones defined
by {@link javax.management.openmbean}.  In this way, you can be
sure that your MBean will be usable by any client, including
remote clients, without any requirement that the client have
access to <em>model-specific classes</em> representing the types
of your MBeans.</p>

<p>The concepts are easier to understand by comparison with the
Standard MBean concept.  Here is how a managed object might be
represented as a Standard MBean, and as an MXBean:</p>

<table border=\"1\" cellpadding=\"5\" summary=\"Standard Bean vs. MXBean\">
<tr>
<th>Standard MBean</th><th>MXBean</th>
</tr>
<tr>
<td><pre>
public interface MemoryPool<b>MBean</b> {
String getName();
MemoryUsage getUsage();
// ...
}
</pre></td>
<td><pre>
public interface MemoryPool<b>MXBean</b> {
String getName();
MemoryUsage getUsage();
// ...
}
</pre></td>
</tr>
</table>

<p>As you can see, the definitions are very similar.  The only
difference is that the convention for naming the interface is to use
<code><em>Something</em>MXBean</code> for MXBeans, rather than
<code><em>Something</em>MBean</code> for Standard MBeans.</p>

<p>In this managed object, there is an attribute called
<code>Usage</code> of type {@link MemoryUsage}.  The point of an
attribute like this is that it gives a coherent snapshot of a set
of data items.  For example, it might include the current amount
of used memory in the memory pool, and the current maximum of the
memory pool.  If these were separate items, obtained with separate
{@link MBeanServer#getAttribute getAttribute} calls, then we could
get values seen at different times that were not consistent.  We
might get a <code>used</code> value that was greater than the
<code>max</code> value.</p>

<p>So, we might define <code>MemoryUsage</code> like this:</p>

<table border=\"1\" cellpadding=\"5\" summary=\"Standard Bean vs. MXBean\">
<tr>
<th>Standard MBean</th><th>MXBean</th>
</tr>
<tr>
<td><pre>
public class MemoryUsage <b>implements Serializable</b> {
// standard JavaBean conventions with getters

public MemoryUsage(long init, long used,
long committed, long max) {...}
long getInit() {...}
long getUsed() {...}
long getCommitted() {...}
long getMax() {...}
}
</pre></td>
<td><pre>
public class MemoryUsage {
// standard JavaBean conventions with getters
<b>&#64;ConstructorProperties({\"init\", \"used\", \"committed\", \"max\"})</b>
public MemoryUsage(long init, long used,
long committed, long max) {...}
long getInit() {...}
long getUsed() {...}
long getCommitted() {...}
long getMax() {...}
}
</pre></td>
</tr>
</table>

<p>The definitions are the same in the two cases, except
that with the MXBean, <code>MemoryUsage</code> no longer needs to
be marked <code>Serializable</code> (though it can be).  On
the other hand, we have added a {@code @ConstructorProperties} annotation
to link the constructor parameters to the corresponding getters.
We will see more about this below.</p>

<p><code>MemoryUsage</code> is a <em>model-specific class</em>.
With Standard MBeans, a client of the MBean Server cannot access the
<code>Usage</code> attribute if it does not know the class
<code>MemoryUsage</code>.  Suppose the client is a generic console
based on JMX technology.  Then the console would have to be
configured with the model-specific classes of every application it
might connect to.  The problem is even worse for clients that are
not written in the Java language.  Then there may not be any way
to tell the client what a <code>MemoryUsage</code> looks like.</p>

<p>This is where MXBeans differ from Standard MBeans.  Although we
define the management interface in almost exactly the same way,
the MXBean framework <em>converts</em> model-specific classes into
standard classes from the Java platform.  Using arrays and the
{@link javax.management.openmbean.CompositeData CompositeData} and
{@link javax.management.openmbean.TabularData TabularData} classes
from the standard {@link javax.management.openmbean} package, it
is possible to build data structures of arbitrary complexity
using only standard classes.</p>

<p>This becomes clearer if we compare what the clients of the two
models might look like:</p>

<table border=\"1\" cellpadding=\"5\" summary=\"Standard Bean vs. MXBean\">
<tr>
<th>Standard MBean</th><th>MXBean</th>
</tr>
<tr>
<td><pre>
String name = (String)
mbeanServer.{@link MBeanServer#getAttribute
getAttribute}(objectName, \"Name\");
<b>MemoryUsage</b> usage = (<b>MemoryUsage</b>)
mbeanServer.getAttribute(objectName, \"Usage\");
<b>long used = usage.getUsed();</b>
</pre></td>
<td><pre>
String name = (String)
mbeanServer.{@link MBeanServer#getAttribute
getAttribute}(objectName, \"Name\");
<b>{@link CompositeData}</b> usage = (<b>CompositeData</b>)
mbeanServer.getAttribute(objectName, \"Usage\");
<b>long used = (Long) usage.{@link CompositeData#get get}(\"used\");</b>
</pre></td>
</table>

<p>For attributes with simple types like <code>String</code>, the
code is the same.  But for attributes with complex types, the
Standard MBean code requires the client to know the model-specific
class <code>MemoryUsage</code>, while the MXBean code requires no
non-standard classes.</p>

<p>The client code shown here is slightly more complicated for the
MXBean client.  But, if the client does in fact know the model,
here the interface <code>MemoryPoolMXBean</code> and the
class <code>MemoryUsage</code>, then it can construct a
<em>proxy</em>.  This is the recommended way to interact with
managed objects when you know the model beforehand, regardless
of whether you are using Standard MBeans or MXBeans:</p>

<table border=\"1\" cellpadding=\"5\" summary=\"Standard Bean vs. MXBean\">
<tr>
<th>Standard MBean</th><th>MXBean</th>
</tr>
<tr>
<td><pre>
MemoryPool<b>MBean</b> proxy =
JMX.<b>{@link JMX#newMBeanProxy(MBeanServerConnection, ObjectName,
Class) newMBeanProxy}</b>(
mbeanServer,
objectName,
MemoryPool<b>MBean</b>.class);
String name = proxy.getName();
MemoryUsage usage = proxy.getUsage();
long used = usage.getUsed();
</pre></td>
<td><pre>
MemoryPool<b>MXBean</b> proxy =
JMX.<b>{@link JMX#newMXBeanProxy(MBeanServerConnection, ObjectName,
Class) newMXBeanProxy}</b>(
mbeanServer,
objectName,
MemoryPool<b>MXBean</b>.class);
String name = proxy.getName();
MemoryUsage usage = proxy.getUsage();
long used = usage.getUsed();
</pre></td>
</tr>
</table>

<p>Implementing the MemoryPool object works similarly for both
Standard MBeans and MXBeans.</p>

<table border=\"1\" cellpadding=\"5\" summary=\"Standard Bean vs. MXBean\">
<tr>
<th>Standard MBean</th><th>MXBean</th>
</tr>
<tr>
<td><pre>
public class MemoryPool
implements MemoryPool<b>MBean</b> {
public String getName() {...}
public MemoryUsage getUsage() {...}
// ...
}
</pre></td>
<td><pre>
public class MemoryPool
implements MemoryPool<b>MXBean</b> {
public String getName() {...}
public MemoryUsage getUsage() {...}
// ...
}
</pre></td>
</tr>
</table>

<p>Registering the MBean in the MBean Server works in the same way
in both cases:</p>

<table border=\"1\" cellpadding=\"5\" summary=\"Standard Bean vs. MXBean\">
<tr>
<th>Standard MBean</th><th>MXBean</th>
</tr>
<tr>
<td><pre>
{
MemoryPool<b>MBean</b> pool = new MemoryPool();
mbeanServer.{@link MBeanServer#registerMBean
registerMBean}(pool, objectName);
}
</pre></td>
<td><pre>
{
MemoryPool<b>MXBean</b> pool = new MemoryPool();
mbeanServer.{@link MBeanServer#registerMBean
registerMBean}(pool, objectName);
}
</pre></td>
</tr>
</table>


<h2 id=\"mxbean-def\">Definition of an MXBean</h2>

<p>An MXBean is a kind of MBean.  An MXBean object can be
registered directly in the MBean Server, or it can be used as an
argument to {@link StandardMBean} and the resultant MBean
registered in the MBean Server.</p>

<p>When an object is registered in the MBean Server using the
{@code registerMBean} or {@code createMBean} methods of the
{@link MBeanServer} interface, the object's class is examined
to determine what type of MBean it is:</p>

<ul>
<li>If the class implements the interface {@link DynamicMBean}
then the MBean is a Dynamic MBean.  Note that the class
{@code StandardMBean} implements this interface, so this
case applies to a Standard MBean or MXBean created using
the class {@code StandardMBean}.</li>

<li>Otherwise, if the class matches the Standard MBean naming
conventions, then the MBean is a Standard MBean.</li>

<li>Otherwise, it may be an MXBean.  The set of interfaces
implemented by the object is examined for interfaces that:

<ul>
<li>have a class name <code><em>S</em>MXBean</code> where
<code><em>S</em></code> is any non-empty string, and
do not have an annotation {@code @MXBean(false)}; and/or</li>
<li>have an annotation {@code @MXBean(true)}
or just {@code @MXBean}.</li>
</ul>

If there is exactly one such interface, or if there is one
such interface that is a subinterface of all the others, then
the object is an MXBean.  The interface in question is the
<em>MXBean interface</em>.  In the example above, the MXBean
interface is {@code MemoryPoolMXBean}.

<li>If none of these conditions is met, the MBean is invalid and
the attempt to register it will generate {@link
NotCompliantMBeanException}.
</ul>

<p>Every Java type that appears as the parameter or return type of a
method in an MXBean interface must be <em>convertible</em> using
the rules below.  Additionally, parameters must be
<em>reconstructible</em> as defined below.</p>

<p>An attempt to construct an MXBean that does not conform to the
above rules will produce an exception.</p>


<h2 id=\"naming-conv\">Naming conventions</h2>

<p>The same naming conventions are applied to the methods in an
MXBean as in a Standard MBean:</p>

<ol>
<li>A method <code><em>T</em> get<em>N</em>()</code>, where
<code><em>T</em></code> is a Java type (not <code>void</code>)
and <code><em>N</em></code> is a non-empty string, specifies
that there is a readable attribute called
<code><em>N</em></code>.  The Java type and Open type of the
attribute are determined by the mapping rules below.
The method {@code final Class getClass()} inherited from {@code
Object} is ignored when looking for getters.</li>

<li>A method <code>boolean is<em>N</em>()</code> specifies that
there is a readable attribute called <code><em>N</em></code>
with Java type <code>boolean</code> and Open type
<code>SimpleType.Boolean</code>.</li>

<li>A method <code>void set<em>N</em>(<em>T</em> x)</code>
specifies that there is a writeable attribute called
<code><em>N</em></code>.  The Java type and Open type of the
attribute are determined by the mapping rules below.  (Of
course, the name <code>x</code> of the parameter is
irrelevant.)</li>

<li>Every other method specifies that there is an operation with
the same name as the method.  The Java type and Open type of the
return value and of each parameter are determined by the mapping
rules below.</li>
</ol>

<p>The rules for <code>get<em>N</em></code> and
<code>is<em>N</em></code> collectively define the notion of a
<em>getter</em>.  The rule for <code>set<em>N</em></code> defines
the notion of a <em>setter</em>.</p>

<p>It is an error for there to be two getters with the same name, or
two setters with the same name.  If there is a getter and a setter
for the same name, then the type <code><em>T</em></code> in both
must be the same.  In this case the attribute is read/write.  If
there is only a getter or only a setter, the attribute is
read-only or write-only respectively.</p>


<h2 id=\"mapping-rules\">Type mapping rules</h2>

<p>An MXBean is a kind of Open MBean, as defined by the {@link
javax.management.openmbean} package.  This means that the types of
attributes, operation parameters, and operation return values must
all be describable using <em>Open Types</em>, that is the four
standard subclasses of {@link javax.management.openmbean.OpenType}.
MXBeans achieve this by mapping Java types into Open Types.</p>

<p>For every Java type <em>J</em>, the MXBean mapping is described
by the following information:</p>

<ul>
<li>The corresponding Open Type, <em>opentype(J)</em>.  This is
an instance of a subclass of {@link
javax.management.openmbean.OpenType}.</li>
<li>The <em>mapped</em> Java type, <em>opendata(J)</em>, which is
always the same for any given <em>opentype(J)</em>.  This is a Java
class.</li>
<li>How a value is converted from type <em>J</em> to type
<em>opendata(J)</em>.</li>
<li>How a value is converted from type <em>opendata(J)</em> to
type <em>J</em>, if it can be.</li>
</ul>

<p>For example, for the Java type {@code List<String>}:</p>

<ul>
<li>The Open Type, <em>opentype(</em>{@code
List<String>}<em>)</em>, is {@link ArrayType}<code>(1, </code>{@link
SimpleType#STRING}<code>)</code>, representing a 1-dimensional
array of <code>String</code>s.</li>
<li>The mapped Java type, <em>opendata(</em>{@code
List<String>}<em>)</em>, is {@code String[]}.</li>
<li>A {@code List<String>} can be converted to a {@code String[]}
using {@link List#toArray(Object[]) List.toArray(new
String[0])}.</li>
<li>A {@code String[]} can be converted to a {@code List<String>}
using {@link Arrays#asList Arrays.asList}.</li>
</ul>

<p>If no mapping rules exist to derive <em>opentype(J)</em> from
<em>J</em>, then <em>J</em> cannot be the type of a method
parameter or return value in an MXBean interface.</p>

<p id=\"reconstructible-def\">If there is a way to convert
<em>opendata(J)</em> back to <em>J</em> then we say that <em>J</em> is
<em>reconstructible</em>.  All method parameters in an MXBean
interface must be reconstructible, because when the MXBean
framework is invoking a method it will need to convert those
parameters from <em>opendata(J)</em> to <em>J</em>.  In a proxy
generated by {@link JMX#newMXBeanProxy(MBeanServerConnection,
ObjectName, Class) JMX.newMXBeanProxy}, it is the return values
of the methods in the MXBean interface that must be
reconstructible.</p>

<p>Null values are allowed for all Java types and Open Types,
except primitive Java types where they are not possible.  When
converting from type <em>J</em> to type <em>opendata(J)</em> or
from type <em>opendata(J)</em> to type <em>J</em>, a null value is
mapped to a null value.</p>

<p>The following table summarizes the type mapping rules.</p>

<table border=\"1\" cellpadding=\"5\" summary=\"Type Mapping Rules\">
<tr>
<th>Java type <em>J</em></th>
<th><em>opentype(J)</em></th>
<th><em>opendata(J)</em></th>
</tr>
<tbody valign=\"top\">
<tr>
<td>{@code int}, {@code boolean}, etc<br>
(the 8 primitive Java types)</td>
<td>{@code SimpleType.INTEGER},<br>
{@code SimpleType.BOOLEAN}, etc</td>
<td>{@code Integer}, {@code Boolean}, etc<br>
(the corresponding boxed types)</td>
</tr>
<tr>
<td>{@code Integer}, {@code ObjectName}, etc<br>
(the types covered by {@link SimpleType})</td>
<td>the corresponding {@code SimpleType}</td>
<td><em>J</em>, the same type</td>
</tr>
<tr>
<td>{@code int[]} etc<br>
(a one-dimensional array with<br>
primitive element type)</td>
<td>{@code ArrayType.getPrimitiveArrayType(int[].class)} etc</td>
<td><em>J</em>, the same type</td>
<tr>
<td><em>E</em>{@code []}<br>
(an array with non-primitive element type <em>E</em>;
this includes {@code int[][]}, where <em>E</em> is {@code int[]})</td>
<td>{@code ArrayType.getArrayType(}<em>opentype(E)</em>{@code )}</td>
<td><em>opendata(E)</em>{@code []}</td>
</tr>
<tr>
<td>{@code List<}<em>E</em>{@code >}<br>
{@code Set<}<em>E</em>{@code >}<br>
{@code SortedSet<}<em>E</em>{@code >} (see below)</td>
<td>same as for <em>E</em>{@code []}</td>
<td>same as for <em>E</em>{@code []}</td>
</tr>
<tr>
<td>An enumeration <em>E</em><br>
(declared in Java as {@code enum }<em>E</em>
{@code {...}})</td>
<td>{@code SimpleType.STRING}</td>
<td>{@code String}</td>
</tr>
<tr>
<td>{@code Map<}<em>K</em>,<em>V</em>{@code >}<br>
{@code SortedMap<}<em>K</em>,<em>V</em>{@code >}</td>
<td>{@link TabularType}<br>
(see below)</td>
<td>{@link TabularData}<br>
(see below)</td>
</tr>
<tr>
<td>An MXBean interface</td>
<td>{@code SimpleType.OBJECTNAME}<br>
(see below)</td>
<td>{@link ObjectName}<br>
(see below)</td>
</tr>
<tr>
<td>Any other type</td>
<td>{@link CompositeType},
if possible<br>
(see below)</td>
<td>{@link CompositeData}</td>
</tbody>
</table>

<p>The following sections give further details of these rules.</p>


<h3>Mappings for primitive types</h3>

<p>The 8 primitive Java types
({@code boolean}, {@code byte}, {@code short}, {@code int}, {@code
long}, {@code float}, {@code double}, {@code char}) are mapped to the
corresponding boxed types from {@code java.lang}, namely {@code
Boolean}, {@code Byte}, etc.  The Open Type is the corresponding
{@code SimpleType}.  Thus, <em>opentype(</em>{@code
long}<em>)</em> is {@code SimpleType.LONG}, and
<em>opendata(</em>{@code long}<em>)</em> is {@code
java.lang.Long}.</p>

<p>An array of primitive type such as {@code long[]} can be represented
directly as an Open Type.  Thus, <em>openType(</em>{@code
long[]}<em>)</em> is {@code
ArrayType.getPrimitiveArrayType(long[].class)}, and
<em>opendata(</em>{@code long[]}<em>)</em> is {@code
long[]}.</p>

<p>In practice, the difference between a plain {@code int} and {@code
Integer}, etc, does not show up because operations in the JMX API
are always on Java objects, not primitives.  However, the
difference <em>does</em> show up with arrays.</p>


<h3>Mappings for collections ({@code List<}<em>E</em>{@code >} etc)</h3>

<p>A {@code List<}<em>E</em>{@code >} or {@code
Set<}<em>E</em>{@code >}, such as {@code List<String>} or {@code
Set<ObjectName>}, is mapped in the same way as an array of the
same element type, such as {@code String[]} or {@code
ObjectName[]}.</p>

<p>A {@code SortedSet<}<em>E</em>{@code >} is also mapped in the
same way as an <em>E</em>{@code []}, but it is only convertible if
<em>E</em> is a class or interface that implements {@link
java.lang.Comparable}.  Thus, a {@code SortedSet<String>} or
{@code SortedSet<Integer>} is convertible, but a {@code
SortedSet<int[]>} or {@code SortedSet<List<String>>} is not.  The
conversion of a {@code SortedSet} instance will fail with an
{@code IllegalArgumentException} if it has a
non-null {@link java.util.SortedSet#comparator()
comparator()}.</p>

<p>A {@code List<}<em>E</em>{@code >} is reconstructed as a
{@code java.util.ArrayList<}<em>E</em>{@code >};
a {@code Set<}<em>E</em>{@code >} as a
{@code java.util.HashSet<}<em>E</em>{@code >};
a {@code SortedSet<}<em>E</em>{@code >} as a
{@code java.util.TreeSet<}<em>E</em>{@code >}.</p>


<h3>Mappings for maps ({@code Map<}<em>K</em>,<em>V</em>{@code >} etc)</h3>

<p>A {@code Map<}<em>K</em>,<em>V</em>{@code >} or {@code
SortedMap<}<em>K</em>,<em>V</em>{@code >}, for example {@code
Map<String,ObjectName>}, has Open Type {@link TabularType} and is mapped
to a {@link TabularData}.
The {@code TabularType} has two items called {@code key} and
{@code value}.  The Open Type of {@code key} is
<em>opentype(K)</em>, and the Open Type of {@code value} is
<em>opentype(V)</em>.  The index of the {@code TabularType} is the
single item {@code key}.</p>

<p>For example, the {@code TabularType} for a {@code
Map<String,ObjectName>} might be constructed with code like
this:</p>

<pre>
String typeName =
\"java.util.Map&lt;java.lang.String, javax.management.ObjectName&gt;\";
String[] keyValue =
new String[] {\"key\", \"value\"};
OpenType[] openTypes =
new OpenType[] {SimpleType.STRING, SimpleType.OBJECTNAME};
CompositeType rowType =
new CompositeType(typeName, typeName, keyValue, keyValue, openTypes);
TabularType tabularType =
new TabularType(typeName, typeName, rowType, new String[] {\"key\"});
</pre>

<p>The {@code typeName} here is determined by the <a href=\"#type-names\">
type name rules</a> detailed below.

<p>A {@code SortedMap<}<em>K</em>,<em>V</em>{@code >} is mapped in the
same way, but it is only convertible if
<em>K</em> is a class or interface that implements {@link
java.lang.Comparable}.  Thus, a {@code SortedMap<String,int[]>}
is convertible, but a
{@code SortedMap<int[],String>} is not.  The conversion of a
{@code SortedMap} instance will fail with an {@code
IllegalArgumentException} if it has a non-null {@link
java.util.SortedMap#comparator() comparator()}.</p>

<p>A {@code Map<}<em>K</em>,<em>V</em>{@code >} is reconstructed as
a {@code java.util.HashMap<}<em>K</em>,<em>V</em>{@code >};
a {@code SortedMap<}<em>K</em>,<em>V</em>{@code >} as
a {@code java.util.TreeMap<}<em>K</em>,<em>V</em>{@code >}.</p>

<p>{@code TabularData} is an interface.  The concrete class that is
used to represent a {@code Map<}<em>K</em>,<em>V</em>{@code >} as
Open Data is {@link TabularDataSupport},
or another class implementing {@code
TabularData} that serializes as {@code TabularDataSupport}.</p>


<h3 id=\"mxbean-map\">Mappings for MXBean interfaces</h3>

<p>An MXBean interface, or a type referenced within an MXBean
interface, can reference another MXBean interface, <em>J</em>.
Then <em>opentype(J)</em> is {@code SimpleType.OBJECTNAME} and
<em>opendata(J)</em> is {@code ObjectName}.</p>

<p>For example, suppose you have two MXBean interfaces like this:</p>

<pre>
public interface ProductMXBean {
public ModuleMXBean[] getModules();
}

public interface ModuleMXBean {
public ProductMXBean getProduct();
}
</pre>

<p>The object implementing the {@code ModuleMXBean} interface
returns from its {@code getProduct} method an object
implementing the {@code ProductMXBean} interface.  The
{@code ModuleMXBean} object and the returned {@code
ProductMXBean} objects must both be registered as MXBeans in the
same MBean Server.</p>

<p>The method {@code ModuleMXBean.getProduct()} defines an
attribute called {@code Product}.  The Open Type for this
attribute is {@code SimpleType.OBJECTNAME}, and the corresponding
{@code ObjectName} value will be the name under which the
referenced {@code ProductMXBean} is registered in the MBean
Server.</p>

<p>If you make an MXBean proxy for a {@code ModuleMXBean} and
call its {@code getProduct()} method, the proxy will map the
{@code ObjectName} back into a {@code ProductMXBean} by making
another MXBean proxy.  More formally, when a proxy made with
{@link JMX#newMXBeanProxy(MBeanServerConnection, ObjectName,
Class)
JMX.newMXBeanProxy(mbeanServerConnection, objectNameX,
interfaceX)} needs to map {@code objectNameY} back into {@code
interfaceY}, another MXBean interface, it does so with {@code
JMX.newMXBeanProxy(mbeanServerConnection, objectNameY,
interfaceY)}.  The implementation may return a proxy that was
previously created by a call to {@code JMX.newMXBeanProxy}
with the same parameters, or it may create a new proxy.</p>

<p>The reverse mapping is illustrated by the following change to the
{@code ModuleMXBean} interface:</p>

<pre>
public interface ModuleMXBean {
public ProductMXBean getProduct();
public void setProduct(ProductMXBean c);
}
</pre>

<p>The presence of the {@code setProduct} method now means that the
{@code Product} attribute is read/write.  As before, the value
of this attribute is an {@code ObjectName}.  When the attribute is
set, the {@code ObjectName} must be converted into the
{@code ProductMXBean} object that the {@code setProduct} method
expects.  This object will be an MXBean proxy for the given
{@code ObjectName} in the same MBean Server.</p>

<p>If you make an MXBean proxy for a {@code ModuleMXBean} and
call its {@code setProduct} method, the proxy will map its
{@code ProductMXBean} argument back into an {@code ObjectName}.
This will only work if the argument is in fact another proxy,
for a {@code ProductMXBean} in the same {@code
MBeanServerConnection}.  The proxy can have been returned from
another proxy (like {@code ModuleMXBean.getProduct()} which
returns a proxy for a {@code ProductMXBean}); or it can have
been created by {@link
JMX#newMXBeanProxy(MBeanServerConnection, ObjectName, Class)
JMX.newMXBeanProxy}; or it can have been created using {@link
java.lang.reflect.Proxy Proxy} with an invocation handler that
is {@link MBeanServerInvocationHandler} or a subclass.</p>

<p>If the same MXBean were registered under two different
{@code ObjectName}s, a reference to that MXBean from another
MXBean would be ambiguous.  Therefore, if an MXBean object is
already registered in an MBean Server and an attempt is made to
register it in the same MBean Server under another name, the
result is an {@link InstanceAlreadyExistsException}.  Registering
the same MBean object under more than one name is discouraged in
general, notably because it does not work well for MBeans that are
{@link NotificationBroadcaster}s.</p>

<h3 id=\"composite-map\">Mappings for other types</h3>

<p>Given a Java class or interface <em>J</em> that does not match the other
rules in the table above, the MXBean framework will attempt to map
it to a {@link CompositeType} as follows.  The type name of this
{@code CompositeType} is determined by the <a href=\"#type-names\">
type name rules</a> below.</p>

<p>The class is examined for getters using the conventions
<a href=\"#naming-conv\">above</a>.  (Getters must be public
instance methods.)  If there are no getters, or if
any getter has a type that is not convertible, then <em>J</em> is
not convertible.</p>

<p>If there is at least one getter and every getter has a
convertible type, then <em>opentype(J)</em> is a {@code
CompositeType} with one item for every getter.  If the getter is

<blockquote>
<code><em>T</em> get<em>Name</em>()</code>
</blockquote>

then the item in the {@code CompositeType} is called {@code name}
and has type <em>opentype(T)</em>.  For example, if the item is

<blockquote>
<code>String getOwner()</code>
</blockquote>

then the item is called {@code owner} and has Open Type {@code
SimpleType.STRING}.  If the getter is

<blockquote>
<code>boolean is<em>Name</em>()</code>
</blockquote>

then the item in the {@code CompositeType} is called {@code name}
and has type {@code SimpleType.BOOLEAN}.

<p>Notice that the first character (or code point) is converted to
lower case.  This follows the Java Beans convention, which for
historical reasons is different from the Standard MBean
convention.  In a Standard MBean or MXBean interface, a method
{@code getOwner} defines an attribute called {@code Owner}, while
in a Java Bean or mapped {@code CompositeType}, a method {@code
getOwner} defines a property or item called {@code owner}.</p>

<p>If two methods produce the same item name (for example, {@code
getOwner} and {@code isOwner}, or {@code getOwner} and {@code
getowner}) then the type is not convertible.</p>

<p>When the Open Type is {@code CompositeType}, the corresponding
mapped Java type (<em>opendata(J)</em>) is {@link
CompositeData}.  The mapping from an instance of <em>J</em> to a
{@code CompositeData} corresponding to the {@code CompositeType}
just described is done as follows.  First, if <em>J</em>
implements the interface {@link CompositeDataView}, then that
interface's {@link CompositeDataView#toCompositeData
toCompositeData} method is called to do the conversion.
Otherwise, the {@code CompositeData} is constructed by calling
the getter for each item and converting it to the corresponding
Open Data type.  Thus, a getter such as</p>

<blockquote>
{@code List<String> getNames()}
</blockquote>

<p>will have been mapped to an item with name \"{@code names}\" and
Open Type {@code ArrayType(1, SimpleType.STRING)}.  The conversion
to {@code CompositeData} will call {@code getNames()} and convert
the resultant {@code List<String>} into a {@code String[]} for the
item \"{@code names}\".</p>

<p>{@code CompositeData} is an interface.  The concrete class that is
used to represent a type as Open Data is {@link
CompositeDataSupport}, or another class implementing {@code
CompositeData} that serializes as {@code
CompositeDataSupport}.</p>


<h4>Reconstructing an instance of Java type <em>J</em> from
a {@code CompositeData}</h4>

<p>If <em>opendata(J)</em> is {@code CompositeData} for a Java type
<em>J</em>, then either an instance of <em>J</em> can be
reconstructed from a {@code CompositeData}, or <em>J</em> is not
reconstructible.  If any item in the {@code CompositeData} is not
reconstructible, then <em>J</em> is not reconstructible either.</p>

<p>For any given <em>J</em>, the following rules are consulted to
determine how to reconstruct instances of <em>J</em> from
{@code CompositeData}.  The first applicable rule in the list is
the one that will be used.</p>

<ol>

<li><p>If <em>J</em> has a method<br>
{@code public static }<em>J </em>{@code from(CompositeData cd)}<br>
then that method is called to reconstruct an instance of
<em>J</em>.</p></li>

<li><p>Otherwise, if <em>J</em> has at least one public
constructor with a {@link java.beans.ConstructorProperties
ConstructorProperties} annotation, then one
of those constructors (not necessarily always the same one)
will be called to reconstruct an instance of <em>J</em>.
Every such annotation must list as many strings as the
constructor has parameters; each string must name a property
corresponding to a getter of <em>J</em>; and the type of this
getter must be the same as the corresponding constructor
parameter.  It is not an error for there to be getters that
are not mentioned in the {@code ConstructorProperties} annotation
(these may correspond to information that is not needed to
reconstruct the object).</p>

<p>An instance of <em>J</em> is reconstructed by calling a
constructor with the appropriate reconstructed items from the
{@code CompositeData}.  The constructor to be called will be
determined at runtime based on the items actually present in
the {@code CompositeData}, given that this {@code
CompositeData} might come from an earlier version of
<em>J</em> where not all the items were present.  A
constructor is <em>applicable</em> if all the properties named
in its {@code ConstructorProperties} annotation are present as items
in the {@code CompositeData}.  If no constructor is
applicable, then the attempt to reconstruct <em>J</em> fails.</p>

<p>For any possible combination of properties, it must be the
case that either (a) there are no applicable constructors, or
(b) there is exactly one applicable constructor, or (c) one of
the applicable constructors names a proper superset of the
properties named by each other applicable constructor.  (In
other words, there should never be ambiguity over which
constructor to choose.)  If this condition is not true, then
<em>J</em> is not reconstructible.</p></li>

<li><p>Otherwise, if <em>J</em> has a public no-arg constructor, and
for every getter in <em>J</em> with type
<em>T</em> and name <em>N</em> there is a corresponding setter
with the same name and type, then an instance of <em>J</em> is
constructed with the no-arg constructor and the setters are
called with the reconstructed items from the {@code CompositeData}
to restore the values.  For example, if there is a method<br>
{@code public List<String> getNames()}<br>
then there must also be a method<br>
{@code public void setNames(List<String> names)}<br>
for this rule to apply.</p>

<p>If the {@code CompositeData} came from an earlier version of
<em>J</em>, some items might not be present.  In this case,
the corresponding setters will not be called.</p></li>

<li><p>Otherwise, if <em>J</em> is an interface that has no methods
other than getters, an instance of <em>J</em> is constructed
using a {@link java.lang.reflect.Proxy} with a {@link
CompositeDataInvocationHandler} backed by the {@code
CompositeData} being converted.</p></li>

<li><p>Otherwise, <em>J</em> is not reconstructible.</p></li>
</ol>

<p>Rule 2 is not applicable to subset Profiles of Java SE that do not
include the {@code java.beans} package. When targeting a runtime that does
not include the {@code java.beans} package, and where there is a mismatch
between the compile-time and runtime environment whereby <em>J</em> is
compiled with a public constructor and the {@code ConstructorProperties}
annotation, then <em>J</em> is not reconstructible unless another rule
applies.</p>

<p>Here are examples showing different ways to code a type {@code
NamedNumber} that consists of an {@code int} and a {@code
String}.  In each case, the {@code CompositeType} looks like this:</p>

<blockquote>
<pre>
{@link CompositeType}(
\"NamedNumber\",                      // typeName
\"NamedNumber\",                      // description
new String[] {\"number\", \"name\"},    // itemNames
new String[] {\"number\", \"name\"},    // itemDescriptions
new OpenType[] {SimpleType.INTEGER,
SimpleType.STRING}  // itemTypes
);
</pre>
</blockquote>

<ol>
<li>Static {@code from} method:

<blockquote>
<pre>
public class NamedNumber {
public int getNumber() {return number;}
public String getName() {return name;}
private NamedNumber(int number, String name) {
this.number = number;
this.name = name;
}
<b>public static NamedNumber from(CompositeData cd)</b> {
return new NamedNumber((Integer) cd.get(\"number\"),
(String) cd.get(\"name\"));
}
private final int number;
private final String name;
}
</pre>
</blockquote>
</li>

<li>Public constructor with <code>&#64;ConstructorProperties</code> annotation:

<blockquote>
<pre>
public class NamedNumber {
public int getNumber() {return number;}
public String getName() {return name;}
<b>&#64;ConstructorProperties({\"number\", \"name\"})
public NamedNumber(int number, String name)</b> {
this.number = number;
this.name = name;
}
private final int number;
private final String name;
}
</pre>
</blockquote>
</li>

<li>Setter for every getter:

<blockquote>
<pre>
public class NamedNumber {
public int getNumber() {return number;}
public void <b>setNumber</b>(int number) {this.number = number;}
public String getName() {return name;}
public void <b>setName</b>(String name) {this.name = name;}
<b>public NamedNumber()</b> {}
private int number;
private String name;
}
</pre>
</blockquote>
</li>

<li>Interface with only getters:

<blockquote>
<pre>
public interface NamedNumber {
public int getNumber();
public String getName();
}
</pre>
</blockquote>
</li>
</ol>

<p>It is usually better for classes that simply represent a
collection of data to be <em>immutable</em>.  An instance of an
immutable class cannot be changed after it has been constructed.
Notice that {@code CompositeData} itself is immutable.
Immutability has many advantages, notably with regard to
thread-safety and security.  So the approach using setters should
generally be avoided if possible.</p>


<h3>Recursive types</h3>

<p>Recursive (self-referential) types cannot be used in MXBean
interfaces.  This is a consequence of the immutability of {@link
CompositeType}.  For example, the following type could not be the
type of an attribute, because it refers to itself:</p>

<pre>
public interface <b>Node</b> {
public String getName();
public int getPriority();
public <b>Node</b> getNext();
}
</pre>

<p>It is always possible to rewrite recursive types like this so
they are no longer recursive.  Doing so may require introducing
new types.  For example:</p>

<pre>
public interface <b>NodeList</b> {
public List&lt;Node&gt; getNodes();
}

public interface Node {
public String getName();
public int getPriority();
}
</pre>

<h3>MBeanInfo contents for an MXBean</h3>

<p>An MXBean is a type of Open MBean.  However, for compatibility
reasons, its {@link MBeanInfo} is not an {@link OpenMBeanInfo}.
In particular, when the type of an attribute, parameter, or
operation return value is a primitive type such as {@code int},
or is {@code void} (for a return type), then the attribute,
parameter, or operation will be represented respectively by an
{@link MBeanAttributeInfo}, {@link MBeanParameterInfo}, or
{@link MBeanOperationInfo} whose {@code getType()} or {@code
getReturnType()} returns the primitive name (\"{@code int}\" etc).
This is so even though the mapping rules above specify that the
<em>opendata</em> mapping is the wrapped type ({@code Integer}
etc).</p>

<p>The array of public constructors returned by {@link
MBeanInfo#getConstructors()} for an MXBean that is directly
registered in the MBean Server will contain all of the public
constructors of that MXBean.  If the class of the MXBean is not
public then its constructors are not considered public either.
The list returned for an MXBean that is constructed using the
{@link StandardMBean} class is derived in the same way as for
Standard MBeans.  Regardless of how the MXBean was constructed,
its constructor parameters are not subject to MXBean mapping
rules and do not have a corresponding {@code OpenType}.</p>

<p>The array of notification types returned by {@link
MBeanInfo#getNotifications()} for an MXBean that is directly
registered in the MBean Server will be empty if the MXBean does
not implement the {@link NotificationBroadcaster} interface.
Otherwise, it will be the result of calling {@link
NotificationBroadcaster#getNotificationInfo()} at the time the MXBean
was registered.  Even if the result of this method changes
subsequently, the result of {@code MBeanInfo.getNotifications()}
will not.  The list returned for an MXBean that is constructed
using the {@link StandardMBean} or {@link StandardEmitterMBean}
class is derived in the same way as for Standard MBeans.</p>

<p>The {@link Descriptor} for all of the
{@code MBeanAttributeInfo}, {@code MBeanParameterInfo}, and
{@code MBeanOperationInfo} objects contained in the {@code MBeanInfo}
will have a field {@code openType} whose value is the {@link OpenType}
specified by the mapping rules above.  So even when {@code getType()}
is \"{@code int}\", {@code getDescriptor().getField(\"openType\")} will
be {@link SimpleType#INTEGER}.</p>

<p>The {@code Descriptor} for each of these objects will also have a
field {@code originalType} that is a string representing the Java type
that appeared in the MXBean interface.  The format of this string
is described in the section <a href=\"#type-names\">Type Names</a>
below.</p>

<p>The {@code Descriptor} for the {@code MBeanInfo} will have a field
{@code mxbean} whose value is the string \"{@code true}\".</p>


<h3 id=\"type-names\">Type Names</h3>

<p>Sometimes the unmapped type <em>T</em> of a method parameter or
return value in an MXBean must be represented as a string.  If
<em>T</em> is a non-generic type, this string is the value
returned by {@link Class#getName()}.  Otherwise it is the value of
<em>genericstring(T)</em>, defined as follows:

<ul>

<li>If <em>T</em> is a non-generic non-array type,
<em>genericstring(T)</em> is the value returned by {@link
Class#getName()}, for example {@code \"int\"} or {@code
\"java.lang.String\"}.

<li>If <em>T</em> is an array <em>E[]</em>,
<em>genericstring(T)</em> is <em>genericstring(E)</em> followed
by {@code \"[]\"}.  For example, <em>genericstring({@code int[]})</em>
is {@code \"int[]\"}, and <em>genericstring({@code
List<String>[][]})</em> is {@code
\"java.util.List<java.lang.String>[][]\"}.

<li>Otherwise, <em>T</em> is a parameterized type such as {@code
List<String>} and <em>genericstring(T)</em> consists of the
following: the fully-qualified name of the parameterized type as
returned by {@code Class.getName()}; a left angle bracket ({@code
\"<\"}); <em>genericstring(A)</em> where <em>A</em> is the first
type parameter; if there is a second type parameter <em>B</em>
then {@code \", \"} (a comma and a single space) followed by
<em>genericstring(B)</em>; a right angle bracket ({@code \">\"}).

</ul>

<p>Note that if a method returns {@code int[]}, this will be
represented by the string {@code \"[I\"} returned by {@code
Class.getName()}, but if a method returns {@code List<int[]>},
this will be represented by the string {@code
\"java.util.List<int[]>\"}.

<h3>Exceptions</h3>

<p>A problem with mapping <em>from</em> Java types <em>to</em>
Open types is signaled with an {@link OpenDataException}.  This
can happen when an MXBean interface is being analyzed, for
example if it references a type like {@link java.util.Random
java.util.Random} that has no getters.  Or it can happen when an
instance is being converted (a return value from a method in an
MXBean or a parameter to a method in an MXBean proxy), for
example when converting from {@code SortedSet<String>} to {@code
String[]} if the {@code SortedSet} has a non-null {@code
Comparator}.</p>

<p>A problem with mapping <em>to</em> Java types <em>from</em>
Open types is signaled with an {@link InvalidObjectException}.
This can happen when an MXBean interface is being analyzed, for
example if it references a type that is not
<em>reconstructible</em> according to the rules above, in a
context where a reconstructible type is required.  Or it can
happen when an instance is being converted (a parameter to a
method in an MXBean or a return value from a method in an MXBean
proxy), for example from a String to an Enum if there is no Enum
constant with that name.</p>

<p>Depending on the context, the {@code OpenDataException} or
{@code InvalidObjectException} may be wrapped in another
exception such as {@link RuntimeMBeanException} or {@link
UndeclaredThrowableException}.  For every thrown exception,
the condition <em>C</em> will be true: \"<em>e</em> is {@code
OpenDataException} or {@code InvalidObjectException} (as
appropriate), or <em>C</em> is true of <em>e</em>.{@link
Throwable#getCause() getCause()}\".</p>

@since 1.6
"
      operation 9780226 "value"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)} default true;"
	
	
	
	comment "True if the annotated interface is an MXBean interface.
@return true if the annotated interface is an MXBean interface.
"
      end
    end

    class 1190530 "NotificationFilterSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides an implementation of the {@link javax.management.NotificationFilter} interface.
The filtering is performed on the notification type attribute.
<P>
Manages a list of enabled notification types.
A method allows users to enable/disable as many notification types as required.
<P>
Then, before sending a notification to a listener registered with a filter,
the notification broadcaster compares this notification type with all notification types
enabled by the filter. The notification will be sent to the listener
only if its filter enables this notification type.
<P>
Example:
<BLOCKQUOTE>
<PRE>
NotificationFilterSupport myFilter = new NotificationFilterSupport();
myFilter.enableType(\"my_example.my_type\");
myBroadcaster.addListener(myListener, myFilter, null);
</PRE>
</BLOCKQUOTE>
The listener <CODE>myListener</CODE> will only receive notifications the type of which equals/starts with \"my_example.my_type\".

@see javax.management.NotificationBroadcaster#addNotificationListener

@since 1.5
"
      classrelation 3800194 // <realization>
	relation 3800194 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3800194 // <realization>
	  b parent class_ref 487170 // NotificationFilter
      end

      attribute 2273922 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6579080007561786969L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3800322 // enabledTypes (<unidirectional association>)
	relation 3800322 --->
	  a role_name "enabledTypes" init_value " new Vector<String>()" private
	    comment "
@serial {@link Vector} that contains the enabled notification types.
        The default value is an empty vector.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3800322 // enabledTypes (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      operation 9782914 "isNotificationEnabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "notification" type class_ref 488706 // Notification
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked before sending the specified notification to the listener.
<BR>This filter compares the type of the specified notification with each enabled type.
If the notification type matches one of the enabled types,
the notification should be sent to the listener and this method returns <CODE>true</CODE>.

@param notification The notification to be sent.
@return <CODE>true</CODE> if the notification should be sent to the listener, <CODE>false</CODE> otherwise.
"
      end

      operation 9783042 "enableType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables all the notifications the type of which starts with the specified prefix
to be sent to the listener.
<BR>If the specified prefix is already in the list of enabled notification types,
this method has no effect.
<P>
Example:
<BLOCKQUOTE>
<PRE>
// Enables all notifications the type of which starts with \"my_example\" to be sent.
myFilter.enableType(\"my_example\");
// Enables all notifications the type of which is \"my_example.my_type\" to be sent.
myFilter.enableType(\"my_example.my_type\");
</PRE>
</BLOCKQUOTE>

Note that:
<BLOCKQUOTE><CODE>
myFilter.enableType(\"my_example.*\");
</CODE></BLOCKQUOTE>
will no match any notification type.

@param prefix The prefix.
@exception java.lang.IllegalArgumentException The prefix parameter is null.
"
      end

      operation 9783170 "disableType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given prefix from the prefix list.
<BR>If the specified prefix is not in the list of enabled notification types,
this method has no effect.

@param prefix The prefix.
"
      end

      operation 9783298 "disableAllTypes"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disables all notification types.
"
      end

      operation 9783426 "getEnabledTypes"
	public return_type class_ref 141442 // Vector
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the enabled notification types for this filter.

@return The list containing all the enabled notification types.
"
      end
    end

    class 1190658 "NotQueryExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used by the query-building mechanism to represent negations
of relational expressions.
@serial include

@since 1.5
"
      classrelation 3800450 // <generalisation>
	relation 3800450 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3800450 // <generalisation>
	  b parent class_ref 501762 // QueryEval
      end

      classrelation 3800578 // <realization>
	relation 3800578 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3800578 // <realization>
	  b parent class_ref 486402 // QueryExp
      end

      attribute 2274050 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5269643775896723397L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3800706 // exp (<unidirectional association>)
	relation 3800706 --->
	  a role_name "exp" private
	    comment "
@serial The negated {@link QueryExp}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3800706 // exp (<unidirectional association>)
	  b parent class_ref 486402 // QueryExp
      end

      operation 9783554 "NotQueryExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic Constructor.
"
      end

      operation 9783682 "NotQueryExp"
	public explicit_return_type ""
	nparams 1
	  param inout name "q" type class_ref 486402 // QueryExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new NotQueryExp for negating the specified QueryExp.
"
      end

      operation 9783810 "getNegatedExp"
	public return_type class_ref 486402 // QueryExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the negated query expression of the query.
"
      end

      operation 9783938 "apply"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the NotQueryExp on a MBean.

@param name The name of the MBean on which the NotQueryExp will be applied.

@return  True if the query was successfully applied to the MBean, false otherwise.

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 9784066 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the string representing the object.
"
      end
    end

    class 1190786 "NumericValueExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents numbers that are arguments to relational constraints.
A NumericValueExp may be used anywhere a ValueExp is required.

<p>The <b>serialVersionUID</b> of this class is <code>-4679739485102359104L</code>.

@serial include

@since 1.5

 serialVersionUID not constant"
      classrelation 3800834 // <generalisation>
	relation 3800834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3800834 // <generalisation>
	  b parent class_ref 501762 // QueryEval
      end

      classrelation 3800962 // <realization>
	relation 3800962 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3800962 // <realization>
	  b parent class_ref 1186946 // ValueExp
      end

      attribute 2274178 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6227876276058904000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2274306 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4679739485102359104L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3801090 // oldSerialPersistentFields (<unidirectional association>)
	relation 3801090 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
        new ObjectStreamField(\"longVal\", Long.TYPE),
        new ObjectStreamField(\"doubleVal\", Double.TYPE),
        new ObjectStreamField(\"valIsLong\", Boolean.TYPE)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3801090 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3801218 // newSerialPersistentFields (<unidirectional association>)
	relation 3801218 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
        new ObjectStreamField(\"val\", Number.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3801218 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2274434 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3801346 // serialPersistentFields (<unidirectional association>)
	relation 3801346 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField val Number The numeric value

<p>The <b>serialVersionUID</b> of this class is <code>-4679739485102359104L</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3801346 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3801474 // val (<unidirectional association>)
	relation 3801474 --->
	  a role_name "val" init_value " 0.0" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3801474 // val (<unidirectional association>)
	  b parent class_ref 398210 // Number
      end

      attribute 2274562 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 179842 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK: exception means no compat with 1.0, too bad
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9784194 "NumericValueExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " END Serialization compatibility stuff

Basic constructor.
"
      end

      operation 9784322 "NumericValueExp"
	package explicit_return_type ""
	nparams 1
	  param inout name "val" type class_ref 398210 // Number
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates a new NumericValue representing the numeric literal @{code val}."
      end

      operation 9784450 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a double numeric value
"
      end

      operation 9784578 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a long numeric value
"
      end

      operation 9784706 "isLong"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true is if the numeric value is a long, false otherwise.
"
      end

      operation 9784834 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representing the object
"
      end

      operation 9784962 "apply"
	public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the ValueExp on a MBean.

@param name The name of the MBean on which the ValueExp will be applied.

@return  The <CODE>ValueExp</CODE>.

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 9785090 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link NumericValueExp} from an {@link ObjectInputStream}.
"
      end

      operation 9785218 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link NumericValueExp} to an {@link ObjectOutputStream}.
"
      end

      operation 9785346 "setMBeanServer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
      end
    end

    class 1191170 "OrQueryExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used by the query-building mechanism to represent
disjunctions of relational expressions.
@serial include

@since 1.5
"
      classrelation 3803522 // <generalisation>
	relation 3803522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3803522 // <generalisation>
	  b parent class_ref 501762 // QueryEval
      end

      classrelation 3803650 // <realization>
	relation 3803650 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3803650 // <realization>
	  b parent class_ref 486402 // QueryExp
      end

      attribute 2276226 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2962973084421716523L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3803778 // exp1 (<unidirectional association>)
	relation 3803778 --->
	  a role_name "exp1" private
	    comment "
@serial The left query expression

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3803778 // exp1 (<unidirectional association>)
	  b parent class_ref 486402 // QueryExp
      end

      classrelation 3803906 // exp2 (<unidirectional association>)
	relation 3803906 --->
	  a role_name "exp2" private
	    comment "
@serial The right query expression

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3803906 // exp2 (<unidirectional association>)
	  b parent class_ref 486402 // QueryExp
      end

      operation 9792514 "OrQueryExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic Constructor.
"
      end

      operation 9792642 "OrQueryExp"
	public explicit_return_type ""
	nparams 2
	  param inout name "q1" type class_ref 486402 // QueryExp
	  param inout name "q2" type class_ref 486402 // QueryExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new OrQueryExp with the specified ValueExps
"
      end

      operation 9792770 "getLeftExp"
	public return_type class_ref 486402 // QueryExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the left query expression.
"
      end

      operation 9792898 "getRightExp"
	public return_type class_ref 486402 // QueryExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the right query expression.
"
      end

      operation 9793026 "apply"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the OrQueryExp on a MBean.

@param name The name of the MBean on which the OrQueryExp will be applied.

@return  True if the query was successfully applied to the MBean, false otherwise.


@exception BadStringOperationException The string passed to the method is invalid.
@exception BadBinaryOpValueExpException The expression passed to the method is invalid.
@exception BadAttributeValueExpException The attribute value passed to the method is invalid.
"
      end

      operation 9793154 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string representation of this OrQueryExp
"
      end
    end

    class 1191298 "PersistentMBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This class is the interface to be implemented by MBeans that are meant to be
 persistent.  MBeans supporting this interface should call the load method during
 construction in order to prime the MBean from the persistent store.
 In the case of a ModelMBean, the store method should be called by the MBeanServer based on the descriptors in
 the ModelMBean or by the MBean itself during normal processing of the ModelMBean.

@since 1.5
"
      operation 9793282 "load"
	public explicit_return_type "void"
	nparams 0
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates thisMBean instance with the data found for
the MBean in the persistent store.  The data loaded could include
attribute and operation values.

This method should be called during construction or initialization of this instance,
and before the MBean is registered with the MBeanServer.

@exception MBeanException Wraps another exception or persistence is not supported
@exception RuntimeOperationsException Wraps exceptions from the persistence mechanism
@exception InstanceNotFoundException Could not find or load this MBean from persistent
                                     storage
"
      end

      operation 9793410 "store"
	public explicit_return_type "void"
	nparams 0
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 1187842 // RuntimeOperationsException
	  exception class_ref 486274 // InstanceNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Captures the current state of this MBean instance and
writes it out to the persistent store.  The state stored could include
attribute and operation values. If one of these methods of persistence is
not supported a \"serviceNotFound\" exception will be thrown.
<P>
Persistence policy from the MBean and attribute descriptor is used to guide execution
of this method. The MBean should be stored if 'persistPolicy' field is:
<PRE>{@literal  != \"never\"
  = \"always\"
  = \"onTimer\" and now > 'lastPersistTime' + 'persistPeriod'
  = \"NoMoreOftenThan\" and now > 'lastPersistTime' + 'persistPeriod'
  = \"onUnregister\"
}</PRE>
<p>
Do not store the MBean if 'persistPolicy' field is:
<PRE>{@literal
   = \"never\"
   = \"onUpdate\"
   = \"onTimer\" && now < 'lastPersistTime' + 'persistPeriod'
}</PRE>

@exception MBeanException Wraps another exception or persistence is not supported
@exception RuntimeOperationsException Wraps exceptions from the persistence mechanism
@exception InstanceNotFoundException Could not find/access the persistent store
"
      end
    end

    class 1191426 "QualifiedAttributeValueExp"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Represents attributes used as arguments to relational constraints,
where the attribute must be in an MBean of a specified {@linkplain
MBeanInfo#getClassName() class}. A QualifiedAttributeValueExp may be used
anywhere a ValueExp is required.

@serial include

@since 1.5
"
      classrelation 3804034 // <generalisation>
	relation 3804034 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3804034 // <generalisation>
	  b parent class_ref 1186818 // AttributeValueExp
      end

      attribute 2276354 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8832517277410933254L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3804162 // className (<unidirectional association>)
	relation 3804162 --->
	  a role_name "className" private
	    comment "
@serial The attribute class name

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3804162 // className (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9793538 "QualifiedAttributeValueExp"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Basic Constructor.
@deprecated see {@link AttributeValueExp#AttributeValueExp()}
"
      end

      operation 9793666 "QualifiedAttributeValueExp"
	public explicit_return_type ""
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "attr" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new QualifiedAttributeValueExp representing the specified object
attribute, named attr with class name className.
"
      end

      operation 9793794 "getAttrClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the class name of the attribute.
"
      end

      operation 9793922 "apply"
	public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 4
	  exception class_ref 501890 // BadStringOperationException
	  exception class_ref 502018 // BadBinaryOpValueExpException
	  exception class_ref 502146 // BadAttributeValueExpException
	  exception class_ref 502274 // InvalidApplicationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Applies the QualifiedAttributeValueExp to an MBean.

@param name The name of the MBean on which the QualifiedAttributeValueExp will be applied.

@return  The ValueExp.

@exception BadStringOperationException
@exception BadBinaryOpValueExpException
@exception BadAttributeValueExpException
@exception InvalidApplicationException
"
      end

      operation 9794050 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the string representing its value
"
      end
    end

    class 1191554 "Query"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Constructs query object constraints.</p>

<p>The MBean Server can be queried for MBeans that meet a particular
condition, using its {@link MBeanServer#queryNames queryNames} or
{@link MBeanServer#queryMBeans queryMBeans} method.  The {@link QueryExp}
parameter to the method can be any implementation of the interface
{@code QueryExp}, but it is usually best to obtain the {@code QueryExp}
value by calling the static methods in this class.  This is particularly
true when querying a remote MBean Server: a custom implementation of the
{@code QueryExp} interface might not be present in the remote MBean Server,
but the methods in this class return only standard classes that are
part of the JMX implementation.</p>

<p>As an example, suppose you wanted to find all MBeans where the {@code
Enabled} attribute is {@code true} and the {@code Owner} attribute is {@code
\"Duke\"}. Here is how you could construct the appropriate {@code QueryExp} by
chaining together method calls:</p>

<pre>
QueryExp query =
    Query.and(Query.eq(Query.attr(\"Enabled\"), Query.value(true)),
              Query.eq(Query.attr(\"Owner\"), Query.value(\"Duke\")));
</pre>

@since 1.5
"
      classrelation 3804290 // <generalisation>
	relation 3804290 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3804290 // <generalisation>
	  b parent class_ref 129538 // Object
      end

      attribute 2276482 "GT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A code representing the {@link Query#gt} query.  This is chiefly
of interest for the serialized form of queries.

"
      end

      attribute 2276610 "LT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A code representing the {@link Query#lt} query.  This is chiefly
of interest for the serialized form of queries.

"
      end

      attribute 2276738 "GE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A code representing the {@link Query#geq} query.  This is chiefly
of interest for the serialized form of queries.

"
      end

      attribute 2276866 "LE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A code representing the {@link Query#leq} query.  This is chiefly
of interest for the serialized form of queries.

"
      end

      attribute 2276994 "EQ"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A code representing the {@link Query#eq} query.  This is chiefly
of interest for the serialized form of queries.

"
      end

      attribute 2277122 "PLUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A code representing the {@link Query#plus} expression.  This
is chiefly of interest for the serialized form of queries.

"
      end

      attribute 2277250 "MINUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A code representing the {@link Query#minus} expression.  This
is chiefly of interest for the serialized form of queries.

"
      end

      attribute 2277378 "TIMES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A code representing the {@link Query#times} expression.  This
is chiefly of interest for the serialized form of queries.

"
      end

      attribute 2277506 "DIV"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A code representing the {@link Query#div} expression.  This is
chiefly of interest for the serialized form of queries.

"
      end

      operation 9794178 "Query"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic constructor.
"
      end

      operation 9794306 "and"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "q1" type class_ref 486402 // QueryExp
	  param inout name "q2" type class_ref 486402 // QueryExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that is the conjunction of two other query
expressions.

@param q1 A query expression.
@param q2 Another query expression.

@return  The conjunction of the two arguments.  The returned object
will be serialized as an instance of the non-public class
<a href=\"../../serialized-form.html#javax.management.AndQueryExp\">
javax.management.AndQueryExp</a>.
"
      end

      operation 9794434 "or"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "q1" type class_ref 486402 // QueryExp
	  param inout name "q2" type class_ref 486402 // QueryExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that is the disjunction of two other query
expressions.

@param q1 A query expression.
@param q2 Another query expression.

@return  The disjunction of the two arguments.  The returned object
will be serialized as an instance of the non-public class
<a href=\"../../serialized-form.html#javax.management.OrQueryExp\">
javax.management.OrQueryExp</a>.
"
      end

      operation 9794562 "gt"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "v1" type class_ref 1186946 // ValueExp
	  param inout name "v2" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that represents a \"greater than\" constraint on
two values.

@param v1 A value expression.
@param v2 Another value expression.

@return A \"greater than\" constraint on the arguments.  The
returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.BinaryRelQueryExp\">
javax.management.BinaryRelQueryExp</a> with a {@code relOp} equal
to {@link #GT}.
"
      end

      operation 9794690 "geq"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "v1" type class_ref 1186946 // ValueExp
	  param inout name "v2" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that represents a \"greater than or equal
to\" constraint on two values.

@param v1 A value expression.
@param v2 Another value expression.

@return A \"greater than or equal to\" constraint on the
arguments.  The returned object will be serialized as an
instance of the non-public class
<a href=\"../../serialized-form.html#javax.management.BinaryRelQueryExp\">
javax.management.BinaryRelQueryExp</a> with a {@code relOp} equal
to {@link #GE}.
"
      end

      operation 9794818 "leq"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "v1" type class_ref 1186946 // ValueExp
	  param inout name "v2" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that represents a \"less than or equal to\"
constraint on two values.

@param v1 A value expression.
@param v2 Another value expression.

@return A \"less than or equal to\" constraint on the arguments.
The returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.BinaryRelQueryExp\">
javax.management.BinaryRelQueryExp</a> with a {@code relOp} equal
to {@link #LE}.
"
      end

      operation 9794946 "lt"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "v1" type class_ref 1186946 // ValueExp
	  param inout name "v2" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that represents a \"less than\" constraint on
two values.

@param v1 A value expression.
@param v2 Another value expression.

@return A \"less than\" constraint on the arguments.  The
returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.BinaryRelQueryExp\">
javax.management.BinaryRelQueryExp</a> with a {@code relOp} equal
to {@link #LT}.
"
      end

      operation 9795074 "eq"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "v1" type class_ref 1186946 // ValueExp
	  param inout name "v2" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that represents an equality constraint on
two values.

@param v1 A value expression.
@param v2 Another value expression.

@return A \"equal to\" constraint on the arguments.  The
returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.BinaryRelQueryExp\">
javax.management.BinaryRelQueryExp</a> with a {@code relOp} equal
to {@link #EQ}.
"
      end

      operation 9795202 "between"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 3
	  param inout name "v1" type class_ref 1186946 // ValueExp
	  param inout name "v2" type class_ref 1186946 // ValueExp
	  param inout name "v3" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that represents the constraint that one
value is between two other values.

@param v1 A value expression that is \"between\" v2 and v3.
@param v2 Value expression that represents a boundary of the constraint.
@param v3 Value expression that represents a boundary of the constraint.

@return The constraint that v1 lies between v2 and v3.  The
returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.BetweenQueryExp\">
javax.management.BetweenQueryExp</a>.
"
      end

      operation 9795330 "match"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "a" type class_ref 1186818 // AttributeValueExp
	  param inout name "s" type class_ref 1188610 // StringValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that represents a matching constraint on
a string argument. The matching syntax is consistent with file globbing:
supports \"<code>?</code>\", \"<code>*</code>\", \"<code>[</code>\",
each of which may be escaped with \"<code>\\</code>\";
character classes may use \"<code>!</code>\" for negation and
\"<code>-</code>\" for range.
(<code>*</code> for any character sequence,
<code>?</code> for a single arbitrary character,
<code>[...]</code> for a character sequence).
For example: <code>a*b?c</code> would match a string starting
with the character <code>a</code>, followed
by any number of characters, followed by a <code>b</code>,
any single character, and a <code>c</code>.

@param a An attribute expression
@param s A string value expression representing a matching constraint

@return A query expression that represents the matching
constraint on the string argument.  The returned object will
be serialized as an instance of the non-public class
<a href=\"../../serialized-form.html#javax.management.MatchQueryExp\">
javax.management.MatchQueryExp</a>.
"
      end

      operation 9795458 "attr"
	class_operation public return_type class_ref 1186818 // AttributeValueExp
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a new attribute expression.  See {@link AttributeValueExp}
for a detailed description of the semantics of the expression.</p>

<p>Evaluating this expression for a given
<code>objectName</code> includes performing {@link
MBeanServer#getAttribute MBeanServer.getAttribute(objectName,
name)}.</p>

@param name The name of the attribute.

@return An attribute expression for the attribute named {@code name}.
"
      end

      operation 9795586 "attr"
	class_operation public return_type class_ref 1186818 // AttributeValueExp
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a new qualified attribute expression.</p>

<p>Evaluating this expression for a given
<code>objectName</code> includes performing {@link
MBeanServer#getObjectInstance
MBeanServer.getObjectInstance(objectName)} and {@link
MBeanServer#getAttribute MBeanServer.getAttribute(objectName,
name)}.</p>

@param className The name of the class possessing the attribute.
@param name The name of the attribute.

@return An attribute expression for the attribute named name.
The returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.QualifiedAttributeValueExp\">
javax.management.QualifiedAttributeValueExp</a>.
"
      end

      operation 9795714 "classattr"
	class_operation public return_type class_ref 1186818 // AttributeValueExp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a new class attribute expression which can be used in any
Query call that expects a ValueExp.</p>

<p>Evaluating this expression for a given
<code>objectName</code> includes performing {@link
MBeanServer#getObjectInstance
MBeanServer.getObjectInstance(objectName)}.</p>

@return A class attribute expression.  The returned object
will be serialized as an instance of the non-public class
<a href=\"../../serialized-form.html#javax.management.ClassAttributeValueExp\">
javax.management.ClassAttributeValueExp</a>.
"
      end

      operation 9795842 "not"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 1
	  param inout name "queryExp" type class_ref 486402 // QueryExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a constraint that is the negation of its argument.

@param queryExp The constraint to negate.

@return A negated constraint.  The returned object will be
serialized as an instance of the non-public class
<a href=\"../../serialized-form.html#javax.management.NotQueryExp\">
javax.management.NotQueryExp</a>.
"
      end

      operation 9795970 "in"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "val" type class_ref 1186946 // ValueExp
	  param inout name "valueList" type class_ref 1186946 // ValueExp
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an expression constraining a value to be one of an explicit list.

@param val A value to be constrained.
@param valueList An array of ValueExps.

@return A QueryExp that represents the constraint.  The
returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.InQueryExp\">
javax.management.InQueryExp</a>.
"
      end

      operation 9796098 "value"
	class_operation public return_type class_ref 1188610 // StringValueExp
	nparams 1
	  param inout name "val" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new string expression.

@param val The string value.

@return  A ValueExp object containing the string argument.
"
      end

      operation 9796226 "value"
	class_operation public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param inout name "val" type class_ref 398210 // Number
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a numeric value expression that can be used in any Query call
that expects a ValueExp.

@param val An instance of Number.

@return A ValueExp object containing the argument.  The
returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.NumericValueExp\">
javax.management.NumericValueExp</a>.
"
      end

      operation 9796354 "value"
	class_operation public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a numeric value expression that can be used in any Query call
that expects a ValueExp.

@param val An int value.

@return A ValueExp object containing the argument.  The
returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.NumericValueExp\">
javax.management.NumericValueExp</a>.
"
      end

      operation 9796482 "value"
	class_operation public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a numeric value expression that can be used in any Query call
that expects a ValueExp.

@param val A long value.

@return A ValueExp object containing the argument.  The
returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.NumericValueExp\">
javax.management.NumericValueExp</a>.
"
      end

      operation 9796610 "value"
	class_operation public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param in name "val" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a numeric value expression that can be used in any Query call
that expects a ValueExp.

@param val A float value.

@return A ValueExp object containing the argument.  The
returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.NumericValueExp\">
javax.management.NumericValueExp</a>.
"
      end

      operation 9796738 "value"
	class_operation public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param in name "val" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a numeric value expression that can be used in any Query call
that expects a ValueExp.

@param val A double value.

@return  A ValueExp object containing the argument.  The
returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.NumericValueExp\">
javax.management.NumericValueExp</a>.
"
      end

      operation 9796866 "value"
	class_operation public return_type class_ref 1186946 // ValueExp
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a boolean value expression that can be used in any Query call
that expects a ValueExp.

@param val A boolean value.

@return A ValueExp object containing the argument.  The
returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.BooleanValueExp\">
javax.management.BooleanValueExp</a>.
"
      end

      operation 9796994 "plus"
	class_operation public return_type class_ref 1186946 // ValueExp
	nparams 2
	  param inout name "value1" type class_ref 1186946 // ValueExp
	  param inout name "value2" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a binary expression representing the sum of two numeric values,
or the concatenation of two string values.

@param value1 The first '+' operand.
@param value2 The second '+' operand.

@return A ValueExp representing the sum or concatenation of
the two arguments.  The returned object will be serialized as
an instance of the non-public class
<a href=\"../../serialized-form.html#javax.management.BinaryOpValueExp\">
javax.management.BinaryOpValueExp</a> with an {@code op} equal to
{@link #PLUS}.
"
      end

      operation 9797122 "times"
	class_operation public return_type class_ref 1186946 // ValueExp
	nparams 2
	  param inout name "value1" type class_ref 1186946 // ValueExp
	  param inout name "value2" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a binary expression representing the product of two numeric values.


@param value1 The first '*' operand.
@param value2 The second '*' operand.

@return A ValueExp representing the product.  The returned
object will be serialized as an instance of the non-public
class
<a href=\"../../serialized-form.html#javax.management.BinaryOpValueExp\">
javax.management.BinaryOpValueExp</a> with an {@code op} equal to
{@link #TIMES}.
"
      end

      operation 9797250 "minus"
	class_operation public return_type class_ref 1186946 // ValueExp
	nparams 2
	  param inout name "value1" type class_ref 1186946 // ValueExp
	  param inout name "value2" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a binary expression representing the difference between two numeric
values.

@param value1 The first '-' operand.
@param value2 The second '-' operand.

@return A ValueExp representing the difference between two
arguments.  The returned object will be serialized as an
instance of the non-public class
<a href=\"../../serialized-form.html#javax.management.BinaryOpValueExp\">
javax.management.BinaryOpValueExp</a> with an {@code op} equal to
{@link #MINUS}.
"
      end

      operation 9797378 "div"
	class_operation public return_type class_ref 1186946 // ValueExp
	nparams 2
	  param inout name "value1" type class_ref 1186946 // ValueExp
	  param inout name "value2" type class_ref 1186946 // ValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a binary expression representing the quotient of two numeric
values.

@param value1 The first '/' operand.
@param value2 The second '/' operand.

@return A ValueExp representing the quotient of two arguments.
The returned object will be serialized as an instance of the
non-public class
<a href=\"../../serialized-form.html#javax.management.BinaryOpValueExp\">
javax.management.BinaryOpValueExp</a> with an {@code op} equal to
{@link #DIV}.
"
      end

      operation 9797506 "initialSubString"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "a" type class_ref 1186818 // AttributeValueExp
	  param inout name "s" type class_ref 1188610 // StringValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that represents a matching constraint on
a string argument. The value must start with the given literal string
value.

@param a An attribute expression.
@param s A string value expression representing the beginning of the
string value.

@return The constraint that a matches s.  The returned object
will be serialized as an instance of the non-public class

<a href=\"../../serialized-form.html#javax.management.MatchQueryExp\">
javax.management.MatchQueryExp</a>.
"
      end

      operation 9797634 "anySubString"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "a" type class_ref 1186818 // AttributeValueExp
	  param inout name "s" type class_ref 1188610 // StringValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that represents a matching constraint on
a string argument. The value must contain the given literal string
value.

@param a An attribute expression.
@param s A string value expression representing the substring.

@return The constraint that a matches s.  The returned object
will be serialized as an instance of the non-public class

<a href=\"../../serialized-form.html#javax.management.MatchQueryExp\">
javax.management.MatchQueryExp</a>.
"
      end

      operation 9797762 "finalSubString"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 2
	  param inout name "a" type class_ref 1186818 // AttributeValueExp
	  param inout name "s" type class_ref 1188610 // StringValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that represents a matching constraint on
a string argument. The value must end with the given literal string
value.

@param a An attribute expression.
@param s A string value expression representing the end of the string
value.

@return The constraint that a matches s.  The returned object
will be serialized as an instance of the non-public class

<a href=\"../../serialized-form.html#javax.management.MatchQueryExp\">
javax.management.MatchQueryExp</a>.
"
      end

      operation 9797890 "isInstanceOf"
	class_operation public return_type class_ref 486402 // QueryExp
	nparams 1
	  param inout name "classNameValue" type class_ref 1188610 // StringValueExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a query expression that represents an inheritance constraint
on an MBean class.
<p>Example: to find MBeans that are instances of
{@link NotificationBroadcaster}, use
{@code Query.isInstanceOf(Query.value(NotificationBroadcaster.class.getName()))}.
</p>
<p>Evaluating this expression for a given
<code>objectName</code> includes performing {@link
MBeanServer#isInstanceOf MBeanServer.isInstanceOf(objectName,
((StringValueExp)classNameValue.apply(objectName)).getValue()}.</p>

@param classNameValue The {@link StringValueExp} returning the name
       of the class of which selected MBeans should be instances.
@return a query expression that represents an inheritance
constraint on an MBean class.  The returned object will be
serialized as an instance of the non-public class
<a href=\"../../serialized-form.html#javax.management.InstanceOfQueryExp\">
javax.management.InstanceOfQueryExp</a>.
@since 1.6
"
      end

      operation 9798018 "escapeString"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility method to escape strings used with
Query.{initial|any|final}SubString() methods.
"
      end
    end

    class 1191682 "RuntimeErrorException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "When a <CODE>java.lang.Error</CODE> occurs in the agent it should be caught and
re-thrown as a <CODE>RuntimeErrorException</CODE>.

@since 1.5
"
      classrelation 3804674 // <generalisation>
	relation 3804674 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3804674 // <generalisation>
	  b parent class_ref 526466 // JMRuntimeException
      end

      attribute 2277762 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 704338937753949796L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3804802 // error (<unidirectional association>)
	relation 3804802 --->
	  a role_name "error" private
	    comment "
@serial The encapsulated {@link Error}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3804802 // error (<unidirectional association>)
	  b parent class_ref 195842 // Error
      end

      operation 9798658 "RuntimeErrorException"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 195842 // Error
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.

@param e the wrapped error.
"
      end

      operation 9798786 "RuntimeErrorException"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 195842 // Error
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor that allows a specific error message to be specified.

@param e the wrapped error.
@param message the detail message.
"
      end

      operation 9798914 "getTargetError"
	public return_type class_ref 195842 // Error
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the actual {@link Error} thrown.

@return the wrapped {@link Error}.
"
      end

      operation 9799042 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the actual {@link Error} thrown.

@return the wrapped {@link Error}.
"
      end
    end

    class 1191810 "RuntimeMBeanException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents runtime exceptions thrown by MBean methods in
the agent. It \"wraps\" the actual <CODE>java.lang.RuntimeException</CODE> exception thrown.
This exception will be built by the MBeanServer when a call to an
MBean method throws a runtime exception.

@since 1.5
"
      classrelation 3804930 // <generalisation>
	relation 3804930 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3804930 // <generalisation>
	  b parent class_ref 526466 // JMRuntimeException
      end

      attribute 2277890 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5274912751982730171L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      classrelation 3805058 // runtimeException (<unidirectional association>)
	relation 3805058 --->
	  a role_name "runtimeException" private
	    comment "
@serial The encapsulated {@link RuntimeException}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3805058 // runtimeException (<unidirectional association>)
	  b parent class_ref 214786 // RuntimeException
      end

      operation 9799170 "RuntimeMBeanException"
	public explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 214786 // RuntimeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <CODE>RuntimeMBeanException</CODE> that wraps the actual <CODE>java.lang.RuntimeException</CODE>.

@param e the wrapped exception.
"
      end

      operation 9799298 "RuntimeMBeanException"
	public explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 214786 // RuntimeException
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <CODE>RuntimeMBeanException</CODE> that wraps the actual <CODE>java.lang.RuntimeException</CODE> with
a detailed message.

@param e the wrapped exception.
@param message the detail message.
"
      end

      operation 9799426 "getTargetException"
	public return_type class_ref 214786 // RuntimeException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the actual {@link RuntimeException} thrown.

@return the wrapped {@link RuntimeException}.
"
      end

      operation 9799554 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the actual {@link RuntimeException} thrown.

@return the wrapped {@link RuntimeException}.
"
      end
    end

    class 1191938 "StandardEmitterMBean"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>An MBean whose management interface is determined by reflection
on a Java interface, and that emits notifications.</p>

<p>The following example shows how to use the public constructor
{@link #StandardEmitterMBean(Object, Class, NotificationEmitter)
StandardEmitterMBean(implementation, mbeanInterface, emitter)} to
create an MBean emitting notifications with any
implementation class name <i>Impl</i>, with a management
interface defined (as for current Standard MBeans) by any interface
<i>Intf</i>, and with any implementation of the interface
{@link NotificationEmitter}. The example uses the class
{@link NotificationBroadcasterSupport} as an implementation
of the interface {@link NotificationEmitter}.</p>

    <pre>
    MBeanServer mbs;
    ...
    final String[] types = new String[] {\"sun.disc.space\",\"sun.disc.alarm\"};
    final MBeanNotificationInfo info = new MBeanNotificationInfo(
                                         types,
                                         Notification.class.getName(),
                                         \"Notification about disc info.\");
    final NotificationEmitter emitter =
                   new NotificationBroadcasterSupport(info);

    final Intf impl = new Impl(...);
    final Object mbean = new StandardEmitterMBean(
                                    impl, Intf.class, emitter);
    mbs.registerMBean(mbean, objectName);
    </pre>

@see StandardMBean

@since 1.6
"
      classrelation 3806594 // <generalisation>
	relation 3806594 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3806594 // <generalisation>
	  b parent class_ref 1192066 // StandardMBean
      end

      classrelation 3806722 // <realization>
	relation 3806722 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3806722 // <realization>
	  b parent class_ref 497666 // NotificationEmitter
      end

      classrelation 3806850 // NO_NOTIFICATION_INFO (<unidirectional association>)
	relation 3806850 --->
	  a role_name "NO_NOTIFICATION_INFO" multiplicity "[]" init_value "
        new MBeanNotificationInfo[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3806850 // NO_NOTIFICATION_INFO (<unidirectional association>)
	  b parent class_ref 497154 // MBeanNotificationInfo
      end

      classrelation 3806978 // emitter (<unidirectional association>)
	relation 3806978 --->
	  a role_name "emitter" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3806978 // emitter (<unidirectional association>)
	  b parent class_ref 497666 // NotificationEmitter
      end

      classrelation 3807106 // notificationInfo (<unidirectional association>)
	relation 3807106 --->
	  a role_name "notificationInfo" multiplicity "[]" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3807106 // notificationInfo (<unidirectional association>)
	  b parent class_ref 497154 // MBeanNotificationInfo
      end

      operation 9806850 "StandardEmitterMBean"
	public explicit_return_type ""
	nparams 3
	  param inout name "implementation" explicit_type "T"
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	  param inout name "emitter" type class_ref 497666 // NotificationEmitter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Make an MBean whose management interface is specified by
{@code mbeanInterface}, with the given implementation and
where notifications are handled by the given {@code NotificationEmitter}.
The resultant MBean implements the {@code NotificationEmitter} interface
by forwarding its methods to {@code emitter}.  It is legal and useful
for {@code implementation} and {@code emitter} to be the same object.</p>

<p>If {@code emitter} is an instance of {@code
NotificationBroadcasterSupport} then the MBean's {@link #sendNotification
sendNotification} method will call {@code emitter.}{@link
NotificationBroadcasterSupport#sendNotification sendNotification}.</p>

<p>The array returned by {@link #getNotificationInfo()} on the
new MBean is a copy of the array returned by
{@code emitter.}{@link NotificationBroadcaster#getNotificationInfo
getNotificationInfo()} at the time of construction.  If the array
returned by {@code emitter.getNotificationInfo()} later changes,
that will have no effect on this object's
{@code getNotificationInfo()}.</p>

@param implementation the implementation of the MBean interface.
@param mbeanInterface a Standard MBean interface.
@param emitter the object that will handle notifications.

@throws IllegalArgumentException if the {@code mbeanInterface}
   does not follow JMX design patterns for Management Interfaces, or
   if the given {@code implementation} does not implement the
   specified interface, or if {@code emitter} is null.
"
      end

      operation 9806978 "StandardEmitterMBean"
	public explicit_return_type ""
	nparams 4
	  param inout name "implementation" explicit_type "T"
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	  param inout name "isMXBean" explicit_type "boolean"
	  param inout name "emitter" type class_ref 497666 // NotificationEmitter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Make an MBean whose management interface is specified by
{@code mbeanInterface}, with the given implementation and where
notifications are handled by the given {@code
NotificationEmitter}.  This constructor can be used to make
either Standard MBeans or MXBeans.  The resultant MBean
implements the {@code NotificationEmitter} interface by
forwarding its methods to {@code emitter}.  It is legal and
useful for {@code implementation} and {@code emitter} to be the
same object.</p>

<p>If {@code emitter} is an instance of {@code
NotificationBroadcasterSupport} then the MBean's {@link #sendNotification
sendNotification} method will call {@code emitter.}{@link
NotificationBroadcasterSupport#sendNotification sendNotification}.</p>

<p>The array returned by {@link #getNotificationInfo()} on the
new MBean is a copy of the array returned by
{@code emitter.}{@link NotificationBroadcaster#getNotificationInfo
getNotificationInfo()} at the time of construction.  If the array
returned by {@code emitter.getNotificationInfo()} later changes,
that will have no effect on this object's
{@code getNotificationInfo()}.</p>

@param implementation the implementation of the MBean interface.
@param mbeanInterface a Standard MBean interface.
@param isMXBean If true, the {@code mbeanInterface} parameter
names an MXBean interface and the resultant MBean is an MXBean.
@param emitter the object that will handle notifications.

@throws IllegalArgumentException if the {@code mbeanInterface}
   does not follow JMX design patterns for Management Interfaces, or
   if the given {@code implementation} does not implement the
   specified interface, or if {@code emitter} is null.
"
      end

      operation 9807106 "StandardEmitterMBean"
	protected explicit_return_type ""
	nparams 2
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	  param inout name "emitter" type class_ref 497666 // NotificationEmitter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Make an MBean whose management interface is specified by
{@code mbeanInterface}, and
where notifications are handled by the given {@code NotificationEmitter}.
The resultant MBean implements the {@code NotificationEmitter} interface
by forwarding its methods to {@code emitter}.</p>

<p>If {@code emitter} is an instance of {@code
NotificationBroadcasterSupport} then the MBean's {@link #sendNotification
sendNotification} method will call {@code emitter.}{@link
NotificationBroadcasterSupport#sendNotification sendNotification}.</p>

<p>The array returned by {@link #getNotificationInfo()} on the
new MBean is a copy of the array returned by
{@code emitter.}{@link NotificationBroadcaster#getNotificationInfo
getNotificationInfo()} at the time of construction.  If the array
returned by {@code emitter.getNotificationInfo()} later changes,
that will have no effect on this object's
{@code getNotificationInfo()}.</p>

<p>This constructor must be called from a subclass that implements
the given {@code mbeanInterface}.</p>

@param mbeanInterface a StandardMBean interface.
@param emitter the object that will handle notifications.

@throws IllegalArgumentException if the {@code mbeanInterface}
   does not follow JMX design patterns for Management Interfaces, or
   if {@code this} does not implement the specified interface, or
   if {@code emitter} is null.
"
      end

      operation 9807234 "StandardEmitterMBean"
	protected explicit_return_type ""
	nparams 3
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	  param inout name "isMXBean" explicit_type "boolean"
	  param inout name "emitter" type class_ref 497666 // NotificationEmitter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Make an MBean whose management interface is specified by
{@code mbeanInterface}, and where notifications are handled by
the given {@code NotificationEmitter}.  This constructor can be
used to make either Standard MBeans or MXBeans.  The resultant
MBean implements the {@code NotificationEmitter} interface by
forwarding its methods to {@code emitter}.</p>

<p>If {@code emitter} is an instance of {@code
NotificationBroadcasterSupport} then the MBean's {@link #sendNotification
sendNotification} method will call {@code emitter.}{@link
NotificationBroadcasterSupport#sendNotification sendNotification}.</p>

<p>The array returned by {@link #getNotificationInfo()} on the
new MBean is a copy of the array returned by
{@code emitter.}{@link NotificationBroadcaster#getNotificationInfo
getNotificationInfo()} at the time of construction.  If the array
returned by {@code emitter.getNotificationInfo()} later changes,
that will have no effect on this object's
{@code getNotificationInfo()}.</p>

<p>This constructor must be called from a subclass that implements
the given {@code mbeanInterface}.</p>

@param mbeanInterface a StandardMBean interface.
@param isMXBean If true, the {@code mbeanInterface} parameter
names an MXBean interface and the resultant MBean is an MXBean.
@param emitter the object that will handle notifications.

@throws IllegalArgumentException if the {@code mbeanInterface}
   does not follow JMX design patterns for Management Interfaces, or
   if {@code this} does not implement the specified interface, or
   if {@code emitter} is null.
"
      end

      operation 9807362 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 487042 // NotificationListener
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9807490 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9807618 "addNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9807746 "getNotificationInfo"
	public return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9807874 "sendNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "n" type class_ref 488706 // Notification
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sends a notification.</p>

<p>If the {@code emitter} parameter to the constructor was an
instance of {@code NotificationBroadcasterSupport} then this
method will call {@code emitter.}{@link
NotificationBroadcasterSupport#sendNotification
sendNotification}.</p>

@param n the notification to send.

@throws ClassCastException if the {@code emitter} parameter to the
constructor was not a {@code NotificationBroadcasterSupport}.
"
      end

      operation 9808002 "getNotifications"
	package return_type class_ref 497154 // MBeanNotificationInfo
	nparams 1
	  param inout name "info" type class_ref 487426 // MBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Get the MBeanNotificationInfo[] that will be used in the
MBeanInfo returned by this MBean.</p>

<p>The default implementation of this method returns
{@link #getNotificationInfo()}.</p>

@param info The default MBeanInfo derived by reflection.
@return the MBeanNotificationInfo[] for the new MBeanInfo.
"
      end
    end

    class 1192066 "StandardMBean"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>An MBean whose management interface is determined by reflection
on a Java interface.</p>

<p>This class brings more flexibility to the notion of Management
Interface in the use of Standard MBeans.  Straightforward use of
the patterns for Standard MBeans described in the JMX Specification
means that there is a fixed relationship between the implementation
class of an MBean and its management interface (i.e., if the
implementation class is Thing, the management interface must be
ThingMBean).  This class makes it possible to keep the convenience
of specifying the management interface with a Java interface,
without requiring that there be any naming relationship between the
implementation and interface classes.</p>

<p>By making a DynamicMBean out of an MBean, this class makes
it possible to select any interface implemented by the MBean as its
management interface, provided that it complies with JMX patterns
(i.e., attributes defined by getter/setter etc...).</p>

<p> This class also provides hooks that make it possible to supply
custom descriptions and names for the {@link MBeanInfo} returned by
the DynamicMBean interface.</p>

<p>Using this class, an MBean can be created with any
implementation class name <i>Impl</i> and with a management
interface defined (as for current Standard MBeans) by any interface
<i>Intf</i>, in one of two general ways:</p>

<ul>

<li>Using the public constructor
    {@link #StandardMBean(java.lang.Object, java.lang.Class, boolean)
    StandardMBean(impl,interface)}:
    <pre>
    MBeanServer mbs;
    ...
    Impl impl = new Impl(...);
    StandardMBean mbean = new StandardMBean(impl, Intf.class, false);
    mbs.registerMBean(mbean, objectName);
    </pre></li>

<li>Subclassing StandardMBean:
    <pre>
    public class Impl extends StandardMBean implements Intf {
       public Impl() {
         super(Intf.class, false);
      }
      // implement methods of Intf
    }

    [...]

    MBeanServer mbs;
    ....
    Impl impl = new Impl();
    mbs.registerMBean(impl, objectName);
    </pre></li>

</ul>

<p>In either case, the class <i>Impl</i> must implement the
interface <i>Intf</i>.</p>

<p>Standard MBeans based on the naming relationship between
implementation and interface classes are of course still
available.</p>

<p>This class may also be used to construct MXBeans.  The usage
is exactly the same as for Standard MBeans except that in the
examples above, the {@code false} parameter to the constructor or
{@code super(...)} invocation is instead {@code true}.</p>

@since 1.5
"
      classrelation 3805570 // <realization>
	relation 3805570 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3805570 // <realization>
	  b parent class_ref 488450 // DynamicMBean
      end

      classrelation 3805698 // <realization>
	relation 3805698 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3805698 // <realization>
	  b parent class_ref 488578 // MBeanRegistration
      end

      classrelation 3805826 // descriptors (<unidirectional association>)
	relation 3805826 --->
	  a role_name "descriptors" init_value "
        DescriptorCache.getInstance(JMX.proof)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3805826 // descriptors (<unidirectional association>)
	  b parent class_ref 493826 // DescriptorCache
      end

      classrelation 3805954 // mbean (<unidirectional association>)
	relation 3805954 --->
	  a role_name "mbean" volatile private
	    comment "
The DynamicMBean that wraps the MXBean or Standard MBean implementation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3805954 // mbean (<unidirectional association>)
	  b parent class_ref 498050 // MBeanSupport
      end

      classrelation 3806082 // cachedMBeanInfo (<unidirectional association>)
	relation 3806082 --->
	  a role_name "cachedMBeanInfo" volatile private
	    comment "
The cached MBeanInfo.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3806082 // cachedMBeanInfo (<unidirectional association>)
	  b parent class_ref 487426 // MBeanInfo
      end

      operation 9800450 "construct"
	private explicit_return_type "void"
	nparams 4
	  param inout name "implementation" explicit_type "T"
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	  param inout name "nullImplementationAllowed" explicit_type "boolean"
	  param inout name "isMXBean" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a DynamicMBean out of <var>implementation</var>, using the
specified <var>mbeanInterface</var> class.
@param implementation The implementation of this MBean.
       If <code>null</code>, and null implementation is allowed,
       then the implementation is assumed to be <var>this</var>.
@param mbeanInterface The Management Interface exported by this
       MBean's implementation. If <code>null</code>, then this
       object will use standard JMX design pattern to determine
       the management interface associated with the given
       implementation.
@param nullImplementationAllowed <code>true</code> if a null
       implementation is allowed. If null implementation is allowed,
       and a null implementation is passed, then the implementation
       is assumed to be <var>this</var>.
@exception IllegalArgumentException if the given
   <var>implementation</var> is null, and null is not allowed.
"
      end

      operation 9800578 "StandardMBean"
	public explicit_return_type ""
	nparams 2
	  param inout name "implementation" explicit_type "T"
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Make a DynamicMBean out of the object
<var>implementation</var>, using the specified
<var>mbeanInterface</var> class.</p>

@param implementation The implementation of this MBean.
@param mbeanInterface The Management Interface exported by this
       MBean's implementation. If <code>null</code>, then this
       object will use standard JMX design pattern to determine
       the management interface associated with the given
       implementation.
@param <T> Allows the compiler to check
that {@code implementation} does indeed implement the class
described by {@code mbeanInterface}.  The compiler can only
check this if {@code mbeanInterface} is a class literal such
as {@code MyMBean.class}.

@exception IllegalArgumentException if the given
   <var>implementation</var> is null.
@exception NotCompliantMBeanException if the <var>mbeanInterface</var>
   does not follow JMX design patterns for Management Interfaces, or
   if the given <var>implementation</var> does not implement the
   specified interface.
"
      end

      operation 9800706 "StandardMBean"
	protected explicit_return_type ""
	nparams 1
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Make a DynamicMBean out of <var>this</var>, using the specified
<var>mbeanInterface</var> class.</p>

<p>Calls {@link #StandardMBean(java.lang.Object, java.lang.Class)
      this(this,mbeanInterface)}.
This constructor is reserved to subclasses.</p>

@param mbeanInterface The Management Interface exported by this
       MBean.

@exception NotCompliantMBeanException if the <var>mbeanInterface</var>
   does not follow JMX design patterns for Management Interfaces, or
   if <var>this</var> does not implement the specified interface.
"
      end

      operation 9800834 "StandardMBean"
	public explicit_return_type ""
	nparams 3
	  param inout name "implementation" explicit_type "T"
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	  param inout name "isMXBean" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Make a DynamicMBean out of the object
<var>implementation</var>, using the specified
<var>mbeanInterface</var> class, and choosing whether the
resultant MBean is an MXBean.  This constructor can be used
to make either Standard MBeans or MXBeans.  Unlike the
constructor {@link #StandardMBean(Object, Class)}, it
does not throw NotCompliantMBeanException.</p>

@param implementation The implementation of this MBean.
@param mbeanInterface The Management Interface exported by this
       MBean's implementation. If <code>null</code>, then this
       object will use standard JMX design pattern to determine
       the management interface associated with the given
       implementation.
@param isMXBean If true, the {@code mbeanInterface} parameter
names an MXBean interface and the resultant MBean is an MXBean.
@param <T> Allows the compiler to check
that {@code implementation} does indeed implement the class
described by {@code mbeanInterface}.  The compiler can only
check this if {@code mbeanInterface} is a class literal such
as {@code MyMBean.class}.

@exception IllegalArgumentException if the given
   <var>implementation</var> is null, or if the <var>mbeanInterface</var>
   does not follow JMX design patterns for Management Interfaces, or
   if the given <var>implementation</var> does not implement the
   specified interface.

@since 1.6
"
      end

      operation 9800962 "StandardMBean"
	protected explicit_return_type ""
	nparams 2
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	  param inout name "isMXBean" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Make a DynamicMBean out of <var>this</var>, using the specified
<var>mbeanInterface</var> class, and choosing whether the resulting
MBean is an MXBean.  This constructor can be used
to make either Standard MBeans or MXBeans.  Unlike the
constructor {@link #StandardMBean(Object, Class)}, it
does not throw NotCompliantMBeanException.</p>

<p>Calls {@link #StandardMBean(java.lang.Object, java.lang.Class, boolean)
      this(this, mbeanInterface, isMXBean)}.
This constructor is reserved to subclasses.</p>

@param mbeanInterface The Management Interface exported by this
       MBean.
@param isMXBean If true, the {@code mbeanInterface} parameter
names an MXBean interface and the resultant MBean is an MXBean.

@exception IllegalArgumentException if the <var>mbeanInterface</var>
   does not follow JMX design patterns for Management Interfaces, or
   if <var>this</var> does not implement the specified interface.

@since 1.6
"
      end

      operation 9801090 "setImplementation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "implementation" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Replace the implementation object wrapped in this object.</p>

@param implementation The new implementation of this Standard MBean
(or MXBean). The <code>implementation</code> object must implement
the Standard MBean (or MXBean) interface that was supplied when this
<code>StandardMBean</code> was constructed.

@exception IllegalArgumentException if the given
<var>implementation</var> is null.

@exception NotCompliantMBeanException if the given
<var>implementation</var> does not implement the
Standard MBean (or MXBean) interface that was
supplied at construction.

@see #getImplementation
"
      end

      operation 9801218 "getImplementation"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the implementation of this Standard MBean (or MXBean).
@return The implementation of this Standard MBean (or MXBean).

@see #setImplementation
"
      end

      operation 9801346 "getMBeanInterface"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the Management Interface of this Standard MBean (or MXBean).
@return The management interface of this Standard MBean (or MXBean).
"
      end

      operation 9801474 "getImplementationClass"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the class of the implementation of this Standard MBean (or MXBean).
@return The class of the implementation of this Standard MBean (or MXBean).
"
      end

      operation 9801602 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "attribute" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------
 From the DynamicMBean interface.
 ------------------------------------------------------------------"
      end

      operation 9801730 "setAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "attribute" type class_ref 486786 // Attribute
	nexceptions 4
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486914 // InvalidAttributeValueException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------
 From the DynamicMBean interface.
 ------------------------------------------------------------------"
      end

      operation 9801858 "getAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 1
	  param inout name "attributes" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------
 From the DynamicMBean interface.
 ------------------------------------------------------------------"
      end

      operation 9801986 "setAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 1
	  param inout name "attributes" type class_ref 486658 // AttributeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------
 From the DynamicMBean interface.
 ------------------------------------------------------------------"
      end

      operation 9802114 "invoke"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "actionName" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------
 From the DynamicMBean interface.
 ------------------------------------------------------------------"
      end

      operation 9802242 "getMBeanInfo"
	public return_type class_ref 487426 // MBeanInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the {@link MBeanInfo} for this MBean.
<p>
This method implements
{@link javax.management.DynamicMBean#getMBeanInfo()
  DynamicMBean.getMBeanInfo()}.
<p>
This method first calls {@link #getCachedMBeanInfo()} in order to
retrieve the cached MBeanInfo for this MBean, if any. If the
MBeanInfo returned by {@link #getCachedMBeanInfo()} is not null,
then it is returned.<br>
Otherwise, this method builds a default MBeanInfo for this MBean,
using the Management Interface specified for this MBean.
<p>
While building the MBeanInfo, this method calls the customization
hooks that make it possible for subclasses to supply their custom
descriptions, parameter names, etc...<br>
Finally, it calls {@link #cacheMBeanInfo(javax.management.MBeanInfo)
cacheMBeanInfo()} in order to cache the new MBeanInfo.
@return The cached MBeanInfo for that MBean, if not null, or a
        newly built MBeanInfo if none was cached.
"
      end

      operation 9802370 "getClassName"
	protected return_type class_ref 128130 // String
	nparams 1
	  param inout name "info" type class_ref 487426 // MBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the className that will be used in the MBeanInfo returned by
this MBean.
<br>
Subclasses may redefine this method in order to supply their
custom class name.  The default implementation returns
{@link MBeanInfo#getClassName() info.getClassName()}.
@param info The default MBeanInfo derived by reflection.
@return the class name for the new MBeanInfo.
"
      end

      operation 9802498 "getDescription"
	protected return_type class_ref 128130 // String
	nparams 1
	  param inout name "info" type class_ref 487426 // MBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the description that will be used in the MBeanInfo returned by
this MBean.
<br>
Subclasses may redefine this method in order to supply their
custom MBean description.  The default implementation returns
{@link MBeanInfo#getDescription() info.getDescription()}.
@param info The default MBeanInfo derived by reflection.
@return the description for the new MBeanInfo.
"
      end

      operation 9802626 "getDescription"
	protected return_type class_ref 128130 // String
	nparams 1
	  param inout name "info" type class_ref 1188866 // MBeanFeatureInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Customization hook:
Get the description that will be used in the MBeanFeatureInfo
returned by this MBean.</p>

<p>Subclasses may redefine this method in order to supply
their custom description.  The default implementation returns
{@link MBeanFeatureInfo#getDescription()
info.getDescription()}.</p>

<p>This method is called by
     {@link #getDescription(MBeanAttributeInfo)},
     {@link #getDescription(MBeanOperationInfo)},
     {@link #getDescription(MBeanConstructorInfo)}.</p>

@param info The default MBeanFeatureInfo derived by reflection.
@return the description for the given MBeanFeatureInfo.
"
      end

      operation 9802754 "getDescription"
	protected return_type class_ref 128130 // String
	nparams 1
	  param inout name "info" type class_ref 496642 // MBeanAttributeInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the description that will be used in the MBeanAttributeInfo
returned by this MBean.

<p>Subclasses may redefine this method in order to supply their
custom description.  The default implementation returns {@link
#getDescription(MBeanFeatureInfo)
getDescription((MBeanFeatureInfo) info)}.
@param info The default MBeanAttributeInfo derived by reflection.
@return the description for the given MBeanAttributeInfo.
"
      end

      operation 9802882 "getDescription"
	protected return_type class_ref 128130 // String
	nparams 1
	  param inout name "info" type class_ref 497282 // MBeanConstructorInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the description that will be used in the MBeanConstructorInfo
returned by this MBean.
<br>
Subclasses may redefine this method in order to supply their
custom description.
The default implementation returns {@link
#getDescription(MBeanFeatureInfo)
getDescription((MBeanFeatureInfo) info)}.
@param info The default MBeanConstructorInfo derived by reflection.
@return the description for the given MBeanConstructorInfo.
"
      end

      operation 9803010 "getDescription"
	protected return_type class_ref 128130 // String
	nparams 3
	  param inout name "ctor" type class_ref 497282 // MBeanConstructorInfo
	  param inout name "param" type class_ref 1188994 // MBeanParameterInfo
	  param in name "sequence" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the description that will be used for the  <var>sequence</var>
MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.
<br>
Subclasses may redefine this method in order to supply their
custom description.  The default implementation returns
{@link MBeanParameterInfo#getDescription() param.getDescription()}.

@param ctor  The default MBeanConstructorInfo derived by reflection.
@param param The default MBeanParameterInfo derived by reflection.
@param sequence The sequence number of the parameter considered
       (\"0\" for the first parameter, \"1\" for the second parameter,
       etc...).
@return the description for the given MBeanParameterInfo.
"
      end

      operation 9803138 "getParameterName"
	protected return_type class_ref 128130 // String
	nparams 3
	  param inout name "ctor" type class_ref 497282 // MBeanConstructorInfo
	  param inout name "param" type class_ref 1188994 // MBeanParameterInfo
	  param in name "sequence" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the name that will be used for the <var>sequence</var>
MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.
<br>
Subclasses may redefine this method in order to supply their
custom parameter name.  The default implementation returns
{@link MBeanParameterInfo#getName() param.getName()}.

@param ctor  The default MBeanConstructorInfo derived by reflection.
@param param The default MBeanParameterInfo derived by reflection.
@param sequence The sequence number of the parameter considered
       (\"0\" for the first parameter, \"1\" for the second parameter,
       etc...).
@return the name for the given MBeanParameterInfo.
"
      end

      operation 9803266 "getDescription"
	protected return_type class_ref 128130 // String
	nparams 1
	  param inout name "info" type class_ref 496770 // MBeanOperationInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the description that will be used in the MBeanOperationInfo
returned by this MBean.
<br>
Subclasses may redefine this method in order to supply their
custom description.  The default implementation returns
{@link #getDescription(MBeanFeatureInfo)
getDescription((MBeanFeatureInfo) info)}.
@param info The default MBeanOperationInfo derived by reflection.
@return the description for the given MBeanOperationInfo.
"
      end

      operation 9803394 "getImpact"
	protected explicit_return_type "int"
	nparams 1
	  param inout name "info" type class_ref 496770 // MBeanOperationInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the <var>impact</var> flag of the operation that will be used in
the MBeanOperationInfo returned by this MBean.
<br>
Subclasses may redefine this method in order to supply their
custom impact flag.  The default implementation returns
{@link MBeanOperationInfo#getImpact() info.getImpact()}.
@param info The default MBeanOperationInfo derived by reflection.
@return the impact flag for the given MBeanOperationInfo.
"
      end

      operation 9803522 "getParameterName"
	protected return_type class_ref 128130 // String
	nparams 3
	  param inout name "op" type class_ref 496770 // MBeanOperationInfo
	  param inout name "param" type class_ref 1188994 // MBeanParameterInfo
	  param in name "sequence" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the name that will be used for the <var>sequence</var>
MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.
<br>
Subclasses may redefine this method in order to supply their
custom parameter name.  The default implementation returns
{@link MBeanParameterInfo#getName() param.getName()}.

@param op    The default MBeanOperationInfo derived by reflection.
@param param The default MBeanParameterInfo derived by reflection.
@param sequence The sequence number of the parameter considered
       (\"0\" for the first parameter, \"1\" for the second parameter,
       etc...).
@return the name to use for the given MBeanParameterInfo.
"
      end

      operation 9803650 "getDescription"
	protected return_type class_ref 128130 // String
	nparams 3
	  param inout name "op" type class_ref 496770 // MBeanOperationInfo
	  param inout name "param" type class_ref 1188994 // MBeanParameterInfo
	  param in name "sequence" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the description that will be used for the  <var>sequence</var>
MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.
<br>
Subclasses may redefine this method in order to supply their
custom description.  The default implementation returns
{@link MBeanParameterInfo#getDescription() param.getDescription()}.

@param op    The default MBeanOperationInfo derived by reflection.
@param param The default MBeanParameterInfo derived by reflection.
@param sequence The sequence number of the parameter considered
       (\"0\" for the first parameter, \"1\" for the second parameter,
       etc...).
@return the description for the given MBeanParameterInfo.
"
      end

      operation 9803778 "getConstructors"
	protected return_type class_ref 497282 // MBeanConstructorInfo
	nparams 2
	  param inout name "ctors" type class_ref 497282 // MBeanConstructorInfo
	multiplicity "[]"
	  param inout name "impl" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the MBeanConstructorInfo[] that will be used in the MBeanInfo
returned by this MBean.
<br>
By default, this method returns <code>null</code> if the wrapped
implementation is not <var>this</var>. Indeed, if the wrapped
implementation is not this object itself, it will not be possible
to recreate a wrapped implementation by calling the implementation
constructors through <code>MBeanServer.createMBean(...)</code>.<br>
Otherwise, if the wrapped implementation is <var>this</var>,
<var>ctors</var> is returned.
<br>
Subclasses may redefine this method in order to modify this
behavior, if needed.
@param ctors The default MBeanConstructorInfo[] derived by reflection.
@param impl  The wrapped implementation. If <code>null</code> is
       passed, the wrapped implementation is ignored and
       <var>ctors</var> is returned.
@return the MBeanConstructorInfo[] for the new MBeanInfo.
"
      end

      operation 9803906 "getNotifications"
	package return_type class_ref 497154 // MBeanNotificationInfo
	nparams 1
	  param inout name "info" type class_ref 487426 // MBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Get the MBeanNotificationInfo[] that will be used in the MBeanInfo
returned by this MBean.
<br>
Subclasses may redefine this method in order to supply their
custom notifications.
@param info The default MBeanInfo derived by reflection.
@return the MBeanNotificationInfo[] for the new MBeanInfo.
"
      end

      operation 9804034 "getDescriptor"
	package return_type class_ref 489986 // Descriptor
	nparams 2
	  param inout name "info" type class_ref 487426 // MBeanInfo
	  param inout name "immutableInfo" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the Descriptor that will be used in the MBeanInfo
returned by this MBean.</p>

<p>Subclasses may redefine this method in order to supply
their custom descriptor.</p>

<p>The default implementation of this method returns a Descriptor
that contains at least the field {@code interfaceClassName}, with
value {@link #getMBeanInterface()}.getName(). It may also contain
the field {@code immutableInfo}, with a value that is the string
{@code \"true\"} if the implementation can determine that the
{@code MBeanInfo} returned by {@link #getMBeanInfo()} will always
be the same. It may contain other fields: fields defined by the
JMX specification must have appropriate values, and other fields
must follow the conventions for non-standard field names.</p>

@param info The default MBeanInfo derived by reflection.
@return the Descriptor for the new MBeanInfo.
"
      end

      operation 9804162 "getCachedMBeanInfo"
	protected return_type class_ref 487426 // MBeanInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
Return the MBeanInfo cached for this object.

<p>Subclasses may redefine this method in order to implement their
own caching policy.  The default implementation stores one
{@link MBeanInfo} object per instance.

@return The cached MBeanInfo, or null if no MBeanInfo is cached.

@see #cacheMBeanInfo(MBeanInfo)
"
      end

      operation 9804290 "cacheMBeanInfo"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "info" type class_ref 487426 // MBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Customization hook:
cache the MBeanInfo built for this object.

<p>Subclasses may redefine this method in order to implement
their own caching policy.  The default implementation stores
<code>info</code> in this instance.  A subclass can define
other policies, such as not saving <code>info</code> (so it is
reconstructed every time {@link #getMBeanInfo()} is called) or
sharing a unique {@link MBeanInfo} object when several
<code>StandardMBean</code> instances have equal {@link
MBeanInfo} values.

@param info the new <code>MBeanInfo</code> to cache.  Any
previously cached value is discarded.  This parameter may be
null, in which case there is no new cached value.
"
      end

      operation 9804418 "isMXBean"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9804546 "identicalArrays"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "a" explicit_type "T"
	multiplicity "[]"
	  param inout name "b" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9804674 "equal"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "a" explicit_type "T"
	  param inout name "b" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9804802 "customize"
	class_operation private return_type class_ref 1188994 // MBeanParameterInfo
	nparams 3
	  param inout name "pi" type class_ref 1188994 // MBeanParameterInfo
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9804930 "customize"
	class_operation private return_type class_ref 497282 // MBeanConstructorInfo
	nparams 3
	  param inout name "ci" type class_ref 497282 // MBeanConstructorInfo
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9805058 "customize"
	class_operation private return_type class_ref 496770 // MBeanOperationInfo
	nparams 4
	  param inout name "oi" type class_ref 496770 // MBeanOperationInfo
	  param inout name "description" type class_ref 128130 // String
	  param inout name "signature" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	  param in name "impact" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9805186 "customize"
	class_operation private return_type class_ref 496642 // MBeanAttributeInfo
	nparams 2
	  param inout name "ai" type class_ref 496642 // MBeanAttributeInfo
	  param inout name "description" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9805314 "paramsToOpenParams"
	class_operation private return_type class_ref 1192194 // OpenMBeanParameterInfo
	nparams 1
	  param inout name "params" type class_ref 1188994 // MBeanParameterInfo
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9805442 "getConstructors"
	private return_type class_ref 497282 // MBeanConstructorInfo
	nparams 2
	  param inout name "info" type class_ref 487426 // MBeanInfo
	  param inout name "impl" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------
 Build the custom MBeanConstructorInfo[]
 ------------------------------------------------------------------"
      end

      operation 9805570 "getOperations"
	private return_type class_ref 496770 // MBeanOperationInfo
	nparams 1
	  param inout name "info" type class_ref 487426 // MBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------
 Build the custom MBeanOperationInfo[]
 ------------------------------------------------------------------"
      end

      operation 9805698 "getAttributes"
	private return_type class_ref 496642 // MBeanAttributeInfo
	nparams 1
	  param inout name "info" type class_ref 487426 // MBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------
 Build the custom MBeanAttributeInfo[]
 ------------------------------------------------------------------"
      end

      operation 9805826 "preRegister"
	public return_type class_ref 485506 // ObjectName
	nparams 2
	  param inout name "server" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Allows the MBean to perform any operations it needs before
being registered in the MBean server.  If the name of the MBean
is not specified, the MBean can provide a name for its
registration.  If any exception is raised, the MBean will not be
registered in the MBean server.</p>

<p>The default implementation of this method returns the {@code name}
parameter.  It does nothing else for
Standard MBeans.  For MXBeans, it records the {@code MBeanServer}
and {@code ObjectName} parameters so they can be used to translate
inter-MXBean references.</p>

<p>It is good practice for a subclass that overrides this method
to call the overridden method via {@code super.preRegister(...)}.
This is necessary if this object is an MXBean that is referenced
by attributes or operations in other MXBeans.</p>

@param server The MBean server in which the MBean will be registered.

@param name The object name of the MBean.  This name is null if
the name parameter to one of the <code>createMBean</code> or
<code>registerMBean</code> methods in the {@link MBeanServer}
interface is null.  In that case, this method must return a
non-null ObjectName for the new MBean.

@return The name under which the MBean is to be registered.
This value must not be null.  If the <code>name</code>
parameter is not null, it will usually but not necessarily be
the returned value.

@throws IllegalArgumentException if this is an MXBean and
{@code name} is null.

@throws InstanceAlreadyExistsException if this is an MXBean and
it has already been registered under another name (in this
MBean Server or another).

@throws Exception no other checked exceptions are thrown by
this method but {@code Exception} is declared so that subclasses
can override the method and throw their own exceptions.

@since 1.6
"
      end

      operation 9805954 "postRegister"
	public explicit_return_type "void"
	nparams 1
	  param inout name "registrationDone" type class_ref 315010 // Boolean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Allows the MBean to perform any operations needed after having been
registered in the MBean server or after the registration has failed.</p>

<p>The default implementation of this method does nothing for
Standard MBeans.  For MXBeans, it undoes any work done by
{@link #preRegister preRegister} if registration fails.</p>

<p>It is good practice for a subclass that overrides this method
to call the overridden method via {@code super.postRegister(...)}.
This is necessary if this object is an MXBean that is referenced
by attributes or operations in other MXBeans.</p>

@param registrationDone Indicates whether or not the MBean has
been successfully registered in the MBean server. The value
false means that the registration phase has failed.

@since 1.6
"
      end

      operation 9806082 "preDeregister"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Allows the MBean to perform any operations it needs before
being unregistered by the MBean server.</p>

<p>The default implementation of this method does nothing.</p>

<p>It is good practice for a subclass that overrides this method
to call the overridden method via {@code super.preDeregister(...)}.</p>

@throws Exception no checked exceptions are throw by this method
but {@code Exception} is declared so that subclasses can override
this method and throw their own exceptions.

@since 1.6
"
      end

      operation 9806210 "postDeregister"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Allows the MBean to perform any operations needed after having been
unregistered in the MBean server.</p>

<p>The default implementation of this method does nothing for
Standard MBeans.  For MXBeans, it removes any information that
was recorded by the {@link #preRegister preRegister} method.</p>

<p>It is good practice for a subclass that overrides this method
to call the overridden method via {@code super.postRegister(...)}.
This is necessary if this object is an MXBean that is referenced
by attributes or operations in other MXBeans.</p>

@since 1.6
"
      end

      classrelation 3806210 // mbeanInfoSafeMap (<unidirectional association>)
	relation 3806210 --->
	  a role_name "mbeanInfoSafeMap" init_value "
        new WeakHashMap<Class<?>, Boolean>()" class_relation const_relation private
	    comment " MBeanInfo immutability


Cached results of previous calls to immutableInfo. This is
a WeakHashMap so that we don't prevent a class from being
garbage collected just because we know whether its MBeanInfo
is immutable.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>, Boolean> ${name}${value};
"
	    classrelation_ref 3806210 // mbeanInfoSafeMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 9806338 "immutableInfo"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "subclass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends StandardMBean> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if {@code subclass} is known to preserve the immutability
of the {@code MBeanInfo}. The {@code subclass} is considered to have
an immutable {@code MBeanInfo} if it does not override any of the
getMBeanInfo, getCachedMBeanInfo, cacheMBeanInfo and getNotificationInfo
methods.
"
      end

      operation 9806466 "overrides"
	class_operation package explicit_return_type "boolean"
	nparams 4
	  param inout name "subclass" type class_ref 130818 // Class
	  param inout name "superclass" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "params" explicit_type "Class<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1192322 "MBeanInfoSafeAction"
	visibility private 
	nactuals 1
	actual class class_ref 250114 // PrivilegedAction
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3806338 // <realization>
	  relation 3806338 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3806338 // <realization>
	    b parent class_ref 250114 // PrivilegedAction
	end

	classrelation 3806466 // subclass (<unidirectional association>)
	  relation 3806466 --->
	    a role_name "subclass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3806466 // subclass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 9806594 "MBeanInfoSafeAction"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "subclass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9806722 "run"
	  public return_type class_ref 315010 // Boolean
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end
  end

  deploymentview 145666 "management"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 323586 "MBeanServerConnection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 485250 // MBeanServerConnection
      end
      comment "Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 323714 "MBeanServer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
import java.io.ObjectInputStream;
import javax.management.loading.ClassLoaderRepository;
${definition}"
      associated_elems
	class_ref 485122 // MBeanServer
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 323970 "NotificationListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 487042 // NotificationListener
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 325378 "DynamicMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 488450 // DynamicMBean
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 326146 "MBeanServerBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.JmxMBeanServer;
${definition}"
      associated_elems
	class_ref 495746 // MBeanServerBuilder
      end
      comment "Copyright (c) 2002, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 326786 "MBeanServerDelegateMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 497538 // MBeanServerDelegateMBean
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 326914 "NotificationBroadcaster"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.CopyOnWriteArrayList;
${definition}"
      associated_elems
	class_ref 497794 // NotificationBroadcaster
      end
      comment "Copyright (c) 1999, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 327042 "NotificationEmitter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.CopyOnWriteArrayList;
${definition}"
      associated_elems
	class_ref 497666 // NotificationEmitter
      end
      comment "Copyright (c) 2002, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 327170 "MBeanServerDelegate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.defaults.JmxProperties;
import com.sun.jmx.defaults.ServiceName;
import com.sun.jmx.mbeanserver.Util;
${definition}"
      associated_elems
	class_ref 488066 // MBeanServerDelegate
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 327298 "MBeanRegistration"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 488578 // MBeanRegistration
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 329346 "QueryEval"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 501762 // QueryEval
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 329474 "QueryExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 486402 // QueryExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 346882 "Notification"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.util.EventObject;
import java.security.AccessController;
import com.sun.jmx.mbeanserver.GetPropertyAction;
${definition}"
      associated_elems
	class_ref 488706 // Notification
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 347522 "JMRuntimeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 526466 // JMRuntimeException
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 849282 "AndQueryExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1186306 // AndQueryExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 849410 "Attribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 486786 // Attribute
      end
      comment "Copyright (c) 1999, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 849538 "AttributeChangeNotification"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1186434 // AttributeChangeNotification
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 849666 "NotificationFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 487170 // NotificationFilter
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 849794 "AttributeChangeNotificationFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
${definition}"
      associated_elems
	class_ref 1186562 // AttributeChangeNotificationFilter
      end
      comment "Copyright (c) 1999, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 849922 "AttributeList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
${definition}"
      associated_elems
	class_ref 486658 // AttributeList
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 850050 "JMException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1186690 // JMException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 850178 "OperationsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 487682 // OperationsException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 850306 "AttributeNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 486530 // AttributeNotFoundException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 850434 "ValueExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1186946 // ValueExp
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 850562 "AttributeValueExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.Introspector;
import java.io.IOException;
import java.io.ObjectInputStream;
${definition}"
      associated_elems
	class_ref 1186818 // AttributeValueExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 850690 "BadAttributeValueExpException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
${definition}"
      associated_elems
	class_ref 502146 // BadAttributeValueExpException
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 850818 "BadBinaryOpValueExpException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 502018 // BadBinaryOpValueExpException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 850946 "BadStringOperationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 501890 // BadStringOperationException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 851074 "BetweenQueryExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1187074 // BetweenQueryExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 851202 "BinaryOpValueExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1187202 // BinaryOpValueExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 851330 "BinaryRelQueryExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1187330 // BinaryRelQueryExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 851458 "BooleanValueExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1187458 // BooleanValueExp
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 851586 "ClassAttributeValueExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import com.sun.jmx.mbeanserver.GetPropertyAction;
${definition}"
      associated_elems
	class_ref 1187586 // ClassAttributeValueExp
      end
      comment "Copyright (c) 1999, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 851714 "DefaultLoaderRepository"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.loading.ClassLoaderRepository;
${definition}"
      associated_elems
	class_ref 1187714 // DefaultLoaderRepository
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 851842 "Descriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.lang.management.MemoryUsage;
import java.util.Arrays;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.management.openmbean.CompositeData;
import javax.management.openmbean.OpenMBeanAttributeInfoSupport;
import javax.management.openmbean.OpenMBeanOperationInfoSupport;
import javax.management.openmbean.OpenMBeanParameterInfoSupport;
import javax.management.openmbean.OpenType;
${definition}"
      associated_elems
	class_ref 489986 // Descriptor
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 851970 "DescriptorRead"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1188098 // DescriptorRead
      end
      comment "Copyright (c) 2004, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 852098 "DescriptorAccess"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1187970 // DescriptorAccess
      end
      comment "Copyright (c) 2000, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 852226 "DescriptorKey"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
${definition}"
      associated_elems
	class_ref 1188226 // DescriptorKey
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 852354 "ImmutableDescriptor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.Util;
import java.io.InvalidObjectException;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
${definition}"
      associated_elems
	class_ref 494082 // ImmutableDescriptor
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 852482 "InQueryExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1188354 // InQueryExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 852610 "InstanceAlreadyExistsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 485762 // InstanceAlreadyExistsException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 852738 "InstanceNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 486274 // InstanceNotFoundException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 852866 "InstanceOfQueryExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1188482 // InstanceOfQueryExp
      end
      comment "Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 852994 "IntrospectionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 487554 // IntrospectionException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 853122 "InvalidApplicationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 502274 // InvalidApplicationException
      end
      comment "Copyright (c) 1999, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 853250 "InvalidAttributeValueException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 486914 // InvalidAttributeValueException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 853378 "JMX"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.Introspector;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Modifier;
import java.lang.reflect.Proxy;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 493954 // JMX
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 853506 "ListenerNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 487298 // ListenerNotFoundException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 853634 "MalformedObjectNameException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 499330 // MalformedObjectNameException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 853762 "MatchQueryExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1188738 // MatchQueryExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 853890 "MBeanFeatureInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.io.StreamCorruptedException;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1188866 // MBeanFeatureInfo
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 854018 "MBeanAttributeInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
import java.security.AccessController;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.mbeanserver.Introspector;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 496642 // MBeanAttributeInfo
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 854146 "MBeanConstructorInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.Introspector;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.util.Arrays;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 497282 // MBeanConstructorInfo
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 854274 "MBeanException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 486018 // MBeanException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 854402 "MBeanInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.io.Serializable;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Map;
import java.util.WeakHashMap;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Objects;
import static javax.management.ImmutableDescriptor.nonNullDescriptor;
${definition}"
      associated_elems
	class_ref 487426 // MBeanInfo
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 854530 "MBeanNotificationInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.util.Arrays;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 497154 // MBeanNotificationInfo
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 854658 "MBeanOperationInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.Introspector;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 496770 // MBeanOperationInfo
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 854786 "MBeanParameterInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1188994 // MBeanParameterInfo
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 854914 "MBeanPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.security.Permission;
${definition}"
      associated_elems
	class_ref 1189250 // MBeanPermission
      end
      comment "Copyright (c) 2002, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 855042 "MBeanRegistrationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 485890 // MBeanRegistrationException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 855170 "MBeanServerFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.defaults.JmxProperties;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.security.AccessController;
import java.security.Permission;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.management.loading.ClassLoaderRepository;
import sun.reflect.misc.ReflectUtil;
import static com.sun.jmx.defaults.JmxProperties.JMX_INITIAL_BUILDER;
import static com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER;
${definition}"
      associated_elems
	class_ref 1189378 // MBeanServerFactory
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 855298 "MBeanServerInvocationHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.MXBeanProxy;
import java.lang.ref.WeakReference;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Arrays;
import java.util.WeakHashMap;
${definition}"
      associated_elems
	class_ref 1189506 // MBeanServerInvocationHandler
      end
      comment "Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 855426 "MBeanServerNotification"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 501378 // MBeanServerNotification
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 855554 "MBeanServerPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.security.BasicPermission;
import java.security.Permission;
import java.security.PermissionCollection;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Set;
import java.util.StringTokenizer;
${definition}"
      associated_elems
	class_ref 1189634 // MBeanServerPermission
	class_ref 1189762 // MBeanServerPermissionCollection
      end
      comment "Copyright (c) 2001, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 855682 "MBeanTrustPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.BasicPermission;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
${definition}"
      associated_elems
	class_ref 1189890 // MBeanTrustPermission
      end
      comment "Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 855810 "MXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.io.InvalidObjectException;
import java.lang.management.MemoryUsage;
import java.lang.reflect.UndeclaredThrowableException;
import java.util.Arrays;
import java.util.List;
import javax.management.openmbean.ArrayType;
import javax.management.openmbean.CompositeData;
import javax.management.openmbean.CompositeDataInvocationHandler;
import javax.management.openmbean.CompositeDataSupport;
import javax.management.openmbean.CompositeDataView;
import javax.management.openmbean.CompositeType;
import javax.management.openmbean.OpenDataException;
import javax.management.openmbean.OpenMBeanInfo;
import javax.management.openmbean.OpenType;
import javax.management.openmbean.SimpleType;
import javax.management.openmbean.TabularData;
import javax.management.openmbean.TabularDataSupport;
import javax.management.openmbean.TabularType;
${definition}"
      associated_elems
	class_ref 1190018 // MXBean
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 855938 "NotCompliantMBeanException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 486146 // NotCompliantMBeanException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 856066 "NotificationBroadcasterSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.Executor;
import com.sun.jmx.remote.util.ClassLogger;
${definition}"
      associated_elems
	class_ref 497922 // NotificationBroadcasterSupport
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 856194 "NotificationFilterSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.util.Vector;
${definition}"
      associated_elems
	class_ref 1190530 // NotificationFilterSupport
      end
      comment "Copyright (c) 1999, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 856322 "NotQueryExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1190658 // NotQueryExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 856450 "NumericValueExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
${definition}"
      associated_elems
	class_ref 1190786 // NumericValueExp
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 856578 "ObjectInstance"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import javax.management.ObjectName;
${definition}"
      associated_elems
	class_ref 485378 // ObjectInstance
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 856706 "ObjectName"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import com.sun.jmx.mbeanserver.Util;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
${definition}"
      associated_elems
	class_ref 485506 // ObjectName
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 856834 "OrQueryExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1191170 // OrQueryExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 856962 "PersistentMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.MBeanException;
import javax.management.RuntimeOperationsException;
import javax.management.InstanceNotFoundException;
${definition}"
      associated_elems
	class_ref 1191298 // PersistentMBean
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















@author    IBM Corp.

Copyright IBM Corp. 1999-2000.  All rights reserved.
"
    end

    artifact 857090 "QualifiedAttributeValueExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1191426 // QualifiedAttributeValueExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 857218 "Query"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1191554 // Query
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 857346 "ReflectionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 485634 // ReflectionException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 857474 "RuntimeErrorException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1191682 // RuntimeErrorException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 857602 "RuntimeMBeanException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1191810 // RuntimeMBeanException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 857730 "RuntimeOperationsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1187842 // RuntimeOperationsException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 857858 "ServiceNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.OperationsException;
${definition}"
      associated_elems
	class_ref 522882 // ServiceNotFoundException
      end
      comment "Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 857986 "StandardMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.DescriptorCache;
import com.sun.jmx.mbeanserver.Introspector;
import com.sun.jmx.mbeanserver.MBeanSupport;
import com.sun.jmx.mbeanserver.MXBeanSupport;
import com.sun.jmx.mbeanserver.StandardMBeanSupport;
import com.sun.jmx.mbeanserver.Util;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.logging.Level;
import javax.management.openmbean.OpenMBeanAttributeInfo;
import javax.management.openmbean.OpenMBeanAttributeInfoSupport;
import javax.management.openmbean.OpenMBeanConstructorInfo;
import javax.management.openmbean.OpenMBeanConstructorInfoSupport;
import javax.management.openmbean.OpenMBeanOperationInfo;
import javax.management.openmbean.OpenMBeanOperationInfoSupport;
import javax.management.openmbean.OpenMBeanParameterInfo;
import javax.management.openmbean.OpenMBeanParameterInfoSupport;
import static com.sun.jmx.defaults.JmxProperties.MISC_LOGGER;
${definition}"
      associated_elems
	class_ref 1192066 // StandardMBean
      end
      comment "Copyright (c) 2002, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 858114 "StandardEmitterMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import static com.sun.jmx.defaults.JmxProperties.MISC_LOGGER;
${definition}"
      associated_elems
	class_ref 1191938 // StandardEmitterMBean
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 858242 "StringValueExp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1188610 // StringValueExp
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end

  package_ref 156802 // loading

  package_ref 157186 // openmbean

  package_ref 157698 // remote

  package_ref 184322 // modelmbean

  package_ref 184450 // monitor

  package_ref 184578 // relation

  package_ref 184834 // timer
end
