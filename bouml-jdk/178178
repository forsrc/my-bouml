format 222
"directory" // jdk1.8::javax::naming::directory
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/naming/directory/"
  java_package "javax.naming.directory"
  classview 171394 "directory"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 832642 "DirContext"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The directory service interface, containing
methods for examining and updating attributes
associated with objects, and for searching the directory.

<h1>Names</h1>
Each name passed as an argument to a <tt>DirContext</tt> method is relative
to that context.  The empty name is used to name the context itself.
The name parameter may never be null.
<p>
Most of the methods have overloaded versions with one taking a
<code>Name</code> parameter and one taking a <code>String</code>.
These overloaded versions are equivalent in that if
the <code>Name</code> and <code>String</code> parameters are just
different representations of the same name, then the overloaded
versions of the same methods behave the same.
In the method descriptions below, only one version is documented.
The second version instead has a link to the first:  the same
documentation applies to both.
<p>
See <tt>Context</tt> for a discussion on the interpretation of the
name argument to the <tt>Context</tt> methods. These same rules
apply to the name argument to the <tt>DirContext</tt> methods.

<h1>Attribute Models</h1>
There are two basic models of what attributes should be
associated with.  First, attributes may be directly associated with a
DirContext object.
In this model, an attribute operation on the named object is
roughly equivalent
to a lookup on the name (which returns the DirContext object),
followed by the attribute operation invoked on the DirContext object
in which the caller supplies an empty name. The attributes can be viewed
as being stored along with the object (note that this does not imply that
the implementation must do so).
<p>
The second model is that attributes are associated with a
name (typically an atomic name) in a DirContext.
In this model, an attribute operation on the named object is
roughly equivalent to a lookup on the name of the parent DirContext of the
named object, followed by the attribute operation invoked on the parent
in which the caller supplies the terminal atomic name.
The attributes can be viewed as being stored in the parent DirContext
(again, this does not imply that the implementation must do so).
Objects that are not DirContexts can have attributes, as long as
their parents are DirContexts.
<p>
JNDI support both of these models.
It is up to the individual service providers to decide where to
\"store\" attributes.
JNDI clients are safest when they do not make assumptions about
whether an object's attributes are stored as part of the object, or stored
within the parent object and associated with the object's name.

<h1>Attribute Type Names</h1>
In the <tt>getAttributes()</tt> and <tt>search()</tt> methods,
you can supply the attributes to return by supplying a list of
attribute names (strings).
The attributes that you get back might not have the same names as the
attribute names you have specified. This is because some directories
support features that cause them to return other attributes.  Such
features include attribute subclassing, attribute name synonyms, and
attribute language codes.
<p>
In attribute subclassing, attributes are defined in a class hierarchy.
In some directories, for example, the \"name\" attribute might be the
superclass of all name-related attributes, including \"commonName\" and
\"surName\".  Asking for the \"name\" attribute might return both the
\"commonName\" and \"surName\" attributes.
<p>
With attribute type synonyms, a directory can assign multiple names to
the same attribute. For example, \"cn\" and \"commonName\" might both
refer to the same attribute. Asking for \"cn\" might return the
\"commonName\" attribute.
<p>
Some directories support the language codes for attributes.
Asking such a directory for the \"description\" attribute, for example,
might return all of the following attributes:
<ul>
<li>description
<li>description;lang-en
<li>description;lang-de
<li>description;lang-fr
</ul>


<h1>Operational Attributes</h1>
<p>
Some directories have the notion of \"operational attributes\" which are
attributes associated with a directory object for administrative
purposes. An example of operational attributes is the access control
list for an object.
<p>
In the <tt>getAttributes()</tt> and <tt>search()</tt> methods,
you can specify that all attributes associated with the requested objects
be returned by supply <tt>null</tt> as the list of attributes to return.
The attributes returned do <em>not</em> include operational attributes.
In order to retrieve operational attributes, you must name them explicitly.


<h1>Named Context</h1>
<p>
There are certain methods in which the name must resolve to a context
(for example, when searching a single level context). The documentation
of such methods
use the term <em>named context</em> to describe their name parameter.
For these methods, if the named object is not a DirContext,
<code>NotContextException</code> is thrown.
Aside from these methods, there is no requirement that the
<em>named object</em> be a DirContext.

<h1>Parameters</h1>
<p>
An <tt>Attributes</tt>, <tt>SearchControls</tt>, or array object
passed as a parameter to any method will not be modified by the
service provider.  The service provider may keep a reference to it
for the duration of the operation, including any enumeration of the
method's results and the processing of any referrals generated.
The caller should not modify the object during this time.
An <tt>Attributes</tt> object returned by any method is owned by
the caller.  The caller may subsequently modify it; the service
provider will not.

<h1>Exceptions</h1>
<p>
All the methods in this interface can throw a NamingException or
any of its subclasses. See NamingException and their subclasses
for details on each exception.

@author Rosanna Lee
@author Scott Seligman
@author R. Vasudevan

@see javax.naming.Context
@since 1.3
"
      classrelation 3894146 // <generalisation>
	relation 3894146 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3894146 // <generalisation>
	  b parent class_ref 262018 // Context
      end

      operation 10047106 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all of the attributes associated with a named object.
See the class description regarding attribute models, attribute
type names, and operational attributes.

@param name
         the name of the object from which to retrieve attributes
@return  the set of attributes associated with <code>name</code>.
         Returns an empty attribute set if name has no attributes;
         never null.
@throws  NamingException if a naming exception is encountered

@see #getAttributes(String)
@see #getAttributes(Name, String[])
"
      end

      operation 10047234 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all of the attributes associated with a named object.
See {@link #getAttributes(Name)} for details.

@param name
         the name of the object from which to retrieve attributes
@return  the set of attributes associated with <code>name</code>

@throws  NamingException if a naming exception is encountered
"
      end

      operation 10047362 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "attrIds" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves selected attributes associated with a named object.
See the class description regarding attribute models, attribute
type names, and operational attributes.

<p> If the object does not have an attribute
specified, the directory will ignore the nonexistent attribute
and return those requested attributes that the object does have.

<p> A directory might return more attributes than was requested
(see <strong>Attribute Type Names</strong> in the class description),
but is not allowed to return arbitrary, unrelated attributes.

<p> See also <strong>Operational Attributes</strong> in the class
description.

@param name
         the name of the object from which to retrieve attributes
@param attrIds
         the identifiers of the attributes to retrieve.
         null indicates that all attributes should be retrieved;
         an empty array indicates that none should be retrieved.
@return  the requested attributes; never null

@throws  NamingException if a naming exception is encountered
"
      end

      operation 10047490 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "attrIds" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves selected attributes associated with a named object.
See {@link #getAttributes(Name, String[])} for details.

@param name
         The name of the object from which to retrieve attributes
@param attrIds
         the identifiers of the attributes to retrieve.
         null indicates that all attributes should be retrieved;
         an empty array indicates that none should be retrieved.
@return  the requested attributes; never null

@throws  NamingException if a naming exception is encountered
"
      end

      attribute 2316290 "ADD_ATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant specifies to add an attribute with the specified values.
<p>
If attribute does not exist,
create the attribute.  The resulting attribute has a union of the
specified value set and the prior value set.
Adding an attribute with no value will throw
<code>InvalidAttributeValueException</code> if the attribute must have
at least  one value.  For a single-valued attribute where that attribute
already exists, throws <code>AttributeInUseException</code>.
If attempting to add more than one value to a single-valued attribute,
throws <code>InvalidAttributeValueException</code>.
<p>
The value of this constant is <tt>1</tt>.

@see ModificationItem
@see #modifyAttributes

"
      end

      attribute 2316418 "REPLACE_ATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant specifies to replace an attribute with specified values.
<p>
If attribute already exists,
replaces all existing values with new specified values.  If the
attribute does not exist, creates it.  If no value is specified,
deletes all the values of the attribute.
Removal of the last value will remove the attribute if the attribute
is required to have at least one value.  If
attempting to add more than one value to a single-valued attribute,
throws <code>InvalidAttributeValueException</code>.
<p>
The value of this constant is <tt>2</tt>.

@see ModificationItem
@see #modifyAttributes

"
      end

      attribute 2316546 "REMOVE_ATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant specifies to delete
the specified attribute values from the attribute.
<p>
The resulting attribute has the set difference of its prior value set
and the specified value set.
If no values are specified, deletes the entire attribute.
If the attribute does not exist, or if some or all members of the
specified value set do not exist, this absence may be ignored
and the operation succeeds, or a NamingException may be thrown to
indicate the absence.
Removal of the last value will remove the attribute if the
attribute is required to have at least one value.
<p>
The value of this constant is <tt>3</tt>.

@see ModificationItem
@see #modifyAttributes

"
      end

      operation 10047618 "modifyAttributes"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param in name "mod_op" explicit_type "int"
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modifies the attributes associated with a named object.
The order of the modifications is not specified.  Where
possible, the modifications are performed atomically.

@param name
         the name of the object whose attributes will be updated
@param mod_op
         the modification operation, one of:
                 <code>ADD_ATTRIBUTE</code>,
                 <code>REPLACE_ATTRIBUTE</code>,
                 <code>REMOVE_ATTRIBUTE</code>.
@param attrs
         the attributes to be used for the modification; may not be null

@throws  AttributeModificationException if the modification cannot
         be completed successfully
@throws  NamingException if a naming exception is encountered

@see #modifyAttributes(Name, ModificationItem[])
"
      end

      operation 10047746 "modifyAttributes"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param in name "mod_op" explicit_type "int"
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modifies the attributes associated with a named object.
See {@link #modifyAttributes(Name, int, Attributes)} for details.

@param name
         the name of the object whose attributes will be updated
@param mod_op
         the modification operation, one of:
                 <code>ADD_ATTRIBUTE</code>,
                 <code>REPLACE_ATTRIBUTE</code>,
                 <code>REMOVE_ATTRIBUTE</code>.
@param attrs
         the attributes to be used for the modification; may not be null

@throws  AttributeModificationException if the modification cannot
         be completed successfully
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10047874 "modifyAttributes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "mods" type class_ref 1212802 // ModificationItem
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modifies the attributes associated with a named object using
an ordered list of modifications.
The modifications are performed
in the order specified.  Each modification specifies a
modification operation code and an attribute on which to
operate.  Where possible, the modifications are
performed atomically.

@param name
         the name of the object whose attributes will be updated
@param mods
         an ordered sequence of modifications to be performed;
         may not be null

@throws  AttributeModificationException if the modifications
         cannot be completed successfully
@throws  NamingException if a naming exception is encountered

@see #modifyAttributes(Name, int, Attributes)
@see ModificationItem
"
      end

      operation 10048002 "modifyAttributes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "mods" type class_ref 1212802 // ModificationItem
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modifies the attributes associated with a named object using
an ordered list of modifications.
See {@link #modifyAttributes(Name, ModificationItem[])} for details.

@param name
         the name of the object whose attributes will be updated
@param mods
         an ordered sequence of modifications to be performed;
         may not be null

@throws  AttributeModificationException if the modifications
         cannot be completed successfully
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10048130 "bind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a name to an object, along with associated attributes.
If <tt>attrs</tt> is null, the resulting binding will have
the attributes associated with <tt>obj</tt> if <tt>obj</tt> is a
<tt>DirContext</tt>, and no attributes otherwise.
If <tt>attrs</tt> is non-null, the resulting binding will have
<tt>attrs</tt> as its attributes; any attributes associated with
<tt>obj</tt> are ignored.

@param name
         the name to bind; may not be empty
@param obj
         the object to bind; possibly null
@param attrs
         the attributes to associate with the binding

@throws  NameAlreadyBoundException if name is already bound
@throws  InvalidAttributesException if some \"mandatory\" attributes
         of the binding are not supplied
@throws  NamingException if a naming exception is encountered

@see Context#bind(Name, Object)
@see #rebind(Name, Object, Attributes)
"
      end

      operation 10048258 "bind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a name to an object, along with associated attributes.
See {@link #bind(Name, Object, Attributes)} for details.

@param name
         the name to bind; may not be empty
@param obj
         the object to bind; possibly null
@param attrs
         the attributes to associate with the binding

@throws  NameAlreadyBoundException if name is already bound
@throws  InvalidAttributesException if some \"mandatory\" attributes
         of the binding are not supplied
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10048386 "rebind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a name to an object, along with associated attributes,
overwriting any existing binding.
If <tt>attrs</tt> is null and <tt>obj</tt> is a <tt>DirContext</tt>,
the attributes from <tt>obj</tt> are used.
If <tt>attrs</tt> is null and <tt>obj</tt> is not a <tt>DirContext</tt>,
any existing attributes associated with the object already bound
in the directory remain unchanged.
If <tt>attrs</tt> is non-null, any existing attributes associated with
the object already bound in the directory are removed and <tt>attrs</tt>
is associated with the named object.  If <tt>obj</tt> is a
<tt>DirContext</tt> and <tt>attrs</tt> is non-null, the attributes
of <tt>obj</tt> are ignored.

@param name
         the name to bind; may not be empty
@param obj
         the object to bind; possibly null
@param attrs
         the attributes to associate with the binding

@throws  InvalidAttributesException if some \"mandatory\" attributes
         of the binding are not supplied
@throws  NamingException if a naming exception is encountered

@see Context#bind(Name, Object)
@see #bind(Name, Object, Attributes)
"
      end

      operation 10048514 "rebind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a name to an object, along with associated attributes,
overwriting any existing binding.
See {@link #rebind(Name, Object, Attributes)} for details.

@param name
         the name to bind; may not be empty
@param obj
         the object to bind; possibly null
@param attrs
         the attributes to associate with the binding

@throws  InvalidAttributesException if some \"mandatory\" attributes
         of the binding are not supplied
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10048642 "createSubcontext"
	public return_type class_ref 832642 // DirContext
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and binds a new context, along with associated attributes.
This method creates a new subcontext with the given name, binds it in
the target context (that named by all but terminal atomic
component of the name), and associates the supplied attributes
with the newly created object.
All intermediate and target contexts must already exist.
If <tt>attrs</tt> is null, this method is equivalent to
<tt>Context.createSubcontext()</tt>.

@param name
         the name of the context to create; may not be empty
@param attrs
         the attributes to associate with the newly created context
@return  the newly created context

@throws  NameAlreadyBoundException if the name is already bound
@throws  InvalidAttributesException if <code>attrs</code> does not
         contain all the mandatory attributes required for creation
@throws  NamingException if a naming exception is encountered

@see Context#createSubcontext(Name)
"
      end

      operation 10048770 "createSubcontext"
	public return_type class_ref 832642 // DirContext
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and binds a new context, along with associated attributes.
See {@link #createSubcontext(Name, Attributes)} for details.

@param name
         the name of the context to create; may not be empty
@param attrs
         the attributes to associate with the newly created context
@return  the newly created context

@throws  NameAlreadyBoundException if the name is already bound
@throws  InvalidAttributesException if <code>attrs</code> does not
         contain all the mandatory attributes required for creation
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10048898 "getSchema"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -------------------- schema operations

Retrieves the schema associated with the named object.
The schema describes rules regarding the structure of the namespace
and the attributes stored within it.  The schema
specifies what types of objects can be added to the directory and where
they can be added; what mandatory and optional attributes an object
can have. The range of support for schemas is directory-specific.

<p> This method returns the root of the schema information tree
that is applicable to the named object. Several named objects
(or even an entire directory) might share the same schema.

<p> Issues such as structure and contents of the schema tree,
permission to modify to the contents of the schema
tree, and the effect of such modifications on the directory
are dependent on the underlying directory.

@param name
         the name of the object whose schema is to be retrieved
@return  the schema associated with the context; never null
@throws  OperationNotSupportedException if schema not supported
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10049026 "getSchema"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the schema associated with the named object.
See {@link #getSchema(Name)} for details.

@param name
         the name of the object whose schema is to be retrieved
@return  the schema associated with the context; never null
@throws  OperationNotSupportedException if schema not supported
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10049154 "getSchemaClassDefinition"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a context containing the schema objects of the
named object's class definitions.
<p>
One category of information found in directory schemas is
<em>class definitions</em>.  An \"object class\" definition
specifies the object's <em>type</em> and what attributes (mandatory
and optional) the object must/can have. Note that the term
\"object class\" being referred to here is in the directory sense
rather than in the Java sense.
For example, if the named object is a directory object of
\"Person\" class, <tt>getSchemaClassDefinition()</tt> would return a
<tt>DirContext</tt> representing the (directory's) object class
definition of \"Person\".
<p>
The information that can be retrieved from an object class definition
is directory-dependent.
<p>
Prior to JNDI 1.2, this method
returned a single schema object representing the class definition of
the named object.
Since JNDI 1.2, this method returns a <tt>DirContext</tt> containing
all of the named object's class definitions.

@param name
         the name of the object whose object class
         definition is to be retrieved
@return  the <tt>DirContext</tt> containing the named
         object's class definitions; never null

@throws  OperationNotSupportedException if schema not supported
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10049282 "getSchemaClassDefinition"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a context containing the schema objects of the
named object's class definitions.
See {@link #getSchemaClassDefinition(Name)} for details.

@param name
         the name of the object whose object class
         definition is to be retrieved
@return  the <tt>DirContext</tt> containing the named
         object's class definitions; never null

@throws  OperationNotSupportedException if schema not supported
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10049410 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	  param inout name "attributesToReturn" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -------------------- search operations

Searches in a single context for objects that contain a
specified set of attributes, and retrieves selected attributes.
The search is performed using the default
<code>SearchControls</code> settings.
<p>
For an object to be selected, each attribute in
<code>matchingAttributes</code> must match some attribute of the
object.  If <code>matchingAttributes</code> is empty or
null, all objects in the target context are returned.
<p>
An attribute <em>A</em><sub>1</sub> in
<code>matchingAttributes</code> is considered to match an
attribute <em>A</em><sub>2</sub> of an object if
<em>A</em><sub>1</sub> and <em>A</em><sub>2</sub> have the same
identifier, and each value of <em>A</em><sub>1</sub> is equal
to some value of <em>A</em><sub>2</sub>.  This implies that the
order of values is not significant, and that
<em>A</em><sub>2</sub> may contain \"extra\" values not found in
<em>A</em><sub>1</sub> without affecting the comparison.  It
also implies that if <em>A</em><sub>1</sub> has no values, then
testing for a match is equivalent to testing for the presence
of an attribute <em>A</em><sub>2</sub> with the same
identifier.
<p>
The precise definition of \"equality\" used in comparing attribute values
is defined by the underlying directory service.  It might use the
<code>Object.equals</code> method, for example, or might use a schema
to specify a different equality operation.
For matching based on operations other than equality (such as
substring comparison) use the version of the <code>search</code>
method that takes a filter argument.
<p>
When changes are made to this <tt>DirContext</tt>,
the effect on enumerations returned by prior calls to this method
is undefined.
<p>
If the object does not have the attribute
specified, the directory will ignore the nonexistent attribute
and return the requested attributes that the object does have.
<p>
A directory might return more attributes than was requested
(see <strong>Attribute Type Names</strong> in the class description),
but is not allowed to return arbitrary, unrelated attributes.
<p>
See also <strong>Operational Attributes</strong> in the class
description.

@param name
         the name of the context to search
@param matchingAttributes
         the attributes to search for.  If empty or null,
         all objects in the target context are returned.
@param attributesToReturn
         the attributes to return.  null indicates that
         all attributes are to be returned;
         an empty array indicates that none are to be returned.
@return
         a non-null enumeration of <tt>SearchResult</tt> objects.
         Each <tt>SearchResult</tt> contains the attributes
         identified by <code>attributesToReturn</code>
         and the name of the corresponding object, named relative
         to the context named by <code>name</code>.
@throws  NamingException if a naming exception is encountered

@see SearchControls
@see SearchResult
@see #search(Name, String, Object[], SearchControls)
"
      end

      operation 10049538 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	  param inout name "attributesToReturn" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches in a single context for objects that contain a
specified set of attributes, and retrieves selected attributes.
See {@link #search(Name, Attributes, String[])} for details.

@param name
         the name of the context to search
@param matchingAttributes
         the attributes to search for
@param attributesToReturn
         the attributes to return
@return  a non-null enumeration of <tt>SearchResult</tt> objects
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10049666 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches in a single context for objects that contain a
specified set of attributes.
This method returns all the attributes of such objects.
It is equivalent to supplying null as
the <tt>atributesToReturn</tt> parameter to the method
<code>search(Name, Attributes, String[])</code>.
<br>
See {@link #search(Name, Attributes, String[])} for a full description.

@param name
         the name of the context to search
@param matchingAttributes
         the attributes to search for
@return  an enumeration of <tt>SearchResult</tt> objects
@throws  NamingException if a naming exception is encountered

@see #search(Name, Attributes, String[])
"
      end

      operation 10049794 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches in a single context for objects that contain a
specified set of attributes.
See {@link #search(Name, Attributes)} for details.

@param name
         the name of the context to search
@param matchingAttributes
         the attributes to search for
@return  an enumeration of <tt>SearchResult</tt> objects
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10049922 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "filter" type class_ref 128130 // String
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches in the named context or object for entries that satisfy the
given search filter.  Performs the search as specified by
the search controls.
<p>
The format and interpretation of <code>filter</code> follows RFC 2254
with the
following interpretations for <code>attr</code> and <code>value</code>
mentioned in the RFC.
<p>
<code>attr</code> is the attribute's identifier.
<p>
<code>value</code> is the string representation the attribute's value.
The translation of this string representation into the attribute's value
is directory-specific.
<p>
For the assertion \"someCount=127\", for example, <code>attr</code>
is \"someCount\" and <code>value</code> is \"127\".
The provider determines, based on the attribute ID (\"someCount\")
(and possibly its schema), that the attribute's value is an integer.
It then parses the string \"127\" appropriately.
<p>
Any non-ASCII characters in the filter string should be
represented by the appropriate Java (Unicode) characters, and
not encoded as UTF-8 octets.  Alternately, the
\"backslash-hexcode\" notation described in RFC 2254 may be used.
<p>
If the directory does not support a string representation of
some or all of its attributes, the form of <code>search</code> that
accepts filter arguments in the form of Objects can be used instead.
The service provider for such a directory would then translate
the filter arguments to its service-specific representation
for filter evaluation.
See <code>search(Name, String, Object[], SearchControls)</code>.
<p>
RFC 2254 defines certain operators for the filter, including substring
matches, equality, approximate match, greater than, less than.  These
operators are mapped to operators with corresponding semantics in the
underlying directory. For example, for the equals operator, suppose
the directory has a matching rule defining \"equality\" of the
attributes in the filter. This rule would be used for checking
equality of the attributes specified in the filter with the attributes
of objects in the directory. Similarly, if the directory has a
matching rule for ordering, this rule would be used for
making \"greater than\" and \"less than\" comparisons.
<p>
Not all of the operators defined in RFC 2254 are applicable to all
attributes.  When an operator is not applicable, the exception
<code>InvalidSearchFilterException</code> is thrown.
<p>
The result is returned in an enumeration of <tt>SearchResult</tt>s.
Each <tt>SearchResult</tt> contains the name of the object
and other information about the object (see SearchResult).
The name is either relative to the target context of the search
(which is named by the <code>name</code> parameter), or
it is a URL string. If the target context is included in
the enumeration (as is possible when
<code>cons</code> specifies a search scope of
<code>SearchControls.OBJECT_SCOPE</code> or
<code>SearchControls.SUBSTREE_SCOPE</code>), its name is the empty
string. The <tt>SearchResult</tt> may also contain attributes of the
matching object if the <tt>cons</tt> argument specified that attributes
be returned.
<p>
If the object does not have a requested attribute, that
nonexistent attribute will be ignored.  Those requested
attributes that the object does have will be returned.
<p>
A directory might return more attributes than were requested
(see <strong>Attribute Type Names</strong> in the class description)
but is not allowed to return arbitrary, unrelated attributes.
<p>
See also <strong>Operational Attributes</strong> in the class
description.

@param name
         the name of the context or object to search
@param filter
         the filter expression to use for the search; may not be null
@param cons
         the search controls that control the search.  If null,
         the default search controls are used (equivalent
         to <tt>(new SearchControls())</tt>).
@return  an enumeration of <tt>SearchResult</tt>s of
         the objects that satisfy the filter; never null

@throws  InvalidSearchFilterException if the search filter specified is
         not supported or understood by the underlying directory
@throws  InvalidSearchControlsException if the search controls
         contain invalid settings
@throws  NamingException if a naming exception is encountered

@see #search(Name, String, Object[], SearchControls)
@see SearchControls
@see SearchResult
"
      end

      operation 10050050 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "filter" type class_ref 128130 // String
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches in the named context or object for entries that satisfy the
given search filter.  Performs the search as specified by
the search controls.
See {@link #search(Name, String, SearchControls)} for details.

@param name
         the name of the context or object to search
@param filter
         the filter expression to use for the search; may not be null
@param cons
         the search controls that control the search.  If null,
         the default search controls are used (equivalent
         to <tt>(new SearchControls())</tt>).

@return  an enumeration of <tt>SearchResult</tt>s for
         the objects that satisfy the filter.
@throws  InvalidSearchFilterException if the search filter specified is
         not supported or understood by the underlying directory
@throws  InvalidSearchControlsException if the search controls
         contain invalid settings
@throws  NamingException if a naming exception is encountered
"
      end

      operation 10050178 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 4
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "filterExpr" type class_ref 128130 // String
	  param inout name "filterArgs" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches in the named context or object for entries that satisfy the
given search filter.  Performs the search as specified by
the search controls.
<p>
The interpretation of <code>filterExpr</code> is based on RFC
2254.  It may additionally contain variables of the form
<code>{i}</code> -- where <code>i</code> is an integer -- that
refer to objects in the <code>filterArgs</code> array.  The
interpretation of <code>filterExpr</code> is otherwise
identical to that of the <code>filter</code> parameter of the
method <code>search(Name, String, SearchControls)</code>.
<p>
When a variable <code>{i}</code> appears in a search filter, it
indicates that the filter argument <code>filterArgs[i]</code>
is to be used in that place.  Such variables may be used
wherever an <em>attr</em>, <em>value</em>, or
<em>matchingrule</em> production appears in the filter grammar
of RFC 2254, section 4.  When a string-valued filter argument
is substituted for a variable, the filter is interpreted as if
the string were given in place of the variable, with any
characters having special significance within filters (such as
<code>'*'</code>) having been escaped according to the rules of
RFC 2254.
<p>
For directories that do not use a string representation for
some or all of their attributes, the filter argument
corresponding to an attribute value may be of a type other than
String.  Directories that support unstructured binary-valued
attributes, for example, should accept byte arrays as filter
arguments.  The interpretation (if any) of filter arguments of
any other type is determined by the service provider for that
directory, which maps the filter operations onto operations with
corresponding semantics in the underlying directory.
<p>
This method returns an enumeration of the results.
Each element in the enumeration contains the name of the object
and other information about the object (see <code>SearchResult</code>).
The name is either relative to the target context of the search
(which is named by the <code>name</code> parameter), or
it is a URL string. If the target context is included in
the enumeration (as is possible when
<code>cons</code> specifies a search scope of
<code>SearchControls.OBJECT_SCOPE</code> or
<code>SearchControls.SUBSTREE_SCOPE</code>),
its name is the empty string.
<p>
The <tt>SearchResult</tt> may also contain attributes of the matching
object if the <tt>cons</tt> argument specifies that attributes be
returned.
<p>
If the object does not have a requested attribute, that
nonexistent attribute will be ignored.  Those requested
attributes that the object does have will be returned.
<p>
A directory might return more attributes than were requested
(see <strong>Attribute Type Names</strong> in the class description)
but is not allowed to return arbitrary, unrelated attributes.
<p>
If a search filter with invalid variable substitutions is provided
to this method, the result is undefined.
When changes are made to this DirContext,
the effect on enumerations returned by prior calls to this method
is undefined.
<p>
See also <strong>Operational Attributes</strong> in the class
description.

@param name
         the name of the context or object to search
@param filterExpr
         the filter expression to use for the search.
         The expression may contain variables of the
         form \"<code>{i}</code>\" where <code>i</code>
         is a nonnegative integer.  May not be null.
@param filterArgs
         the array of arguments to substitute for the variables
         in <code>filterExpr</code>.  The value of
         <code>filterArgs[i]</code> will replace each
         occurrence of \"<code>{i}</code>\".
         If null, equivalent to an empty array.
@param cons
         the search controls that control the search.  If null,
         the default search controls are used (equivalent
         to <tt>(new SearchControls())</tt>).
@return  an enumeration of <tt>SearchResult</tt>s of the objects
         that satisfy the filter; never null

@throws  ArrayIndexOutOfBoundsException if <tt>filterExpr</tt> contains
         <code>{i}</code> expressions where <code>i</code> is outside
         the bounds of the array <code>filterArgs</code>
@throws  InvalidSearchControlsException if <tt>cons</tt> contains
         invalid settings
@throws  InvalidSearchFilterException if <tt>filterExpr</tt> with
         <tt>filterArgs</tt> represents an invalid search filter
@throws  NamingException if a naming exception is encountered

@see #search(Name, Attributes, String[])
@see java.text.MessageFormat
"
      end

      operation 10050306 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "filterExpr" type class_ref 128130 // String
	  param inout name "filterArgs" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches in the named context or object for entries that satisfy the
given search filter.  Performs the search as specified by
the search controls.
See {@link #search(Name, String, Object[], SearchControls)} for details.

@param name
         the name of the context or object to search
@param filterExpr
         the filter expression to use for the search.
         The expression may contain variables of the
         form \"<code>{i}</code>\" where <code>i</code>
         is a nonnegative integer.  May not be null.
@param filterArgs
         the array of arguments to substitute for the variables
         in <code>filterExpr</code>.  The value of
         <code>filterArgs[i]</code> will replace each
         occurrence of \"<code>{i}</code>\".
         If null, equivalent to an empty array.
@param cons
         the search controls that control the search.  If null,
         the default search controls are used (equivalent
         to <tt>(new SearchControls())</tt>).
@return  an enumeration of <tt>SearchResult</tt>s of the objects
         that satisfy the filter; never null

@throws  ArrayIndexOutOfBoundsException if <tt>filterExpr</tt> contains
         <code>{i}</code> expressions where <code>i</code> is outside
         the bounds of the array <code>filterArgs</code>
@throws  InvalidSearchControlsException if <tt>cons</tt> contains
         invalid settings
@throws  InvalidSearchFilterException if <tt>filterExpr</tt> with
         <tt>filterArgs</tt> represents an invalid search filter
@throws  NamingException if a naming exception is encountered
"
      end
    end

    class 834818 "SearchControls"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class encapsulates
factors that determine scope of search and what gets returned
as a result of the search.
<p>
A SearchControls instance is not synchronized against concurrent
multithreaded access. Multiple threads trying to access and modify
a single SearchControls instance should lock the object.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      classrelation 3895682 // <realization>
	relation 3895682 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3895682 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2317826 "OBJECT_SCOPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Search the named object.
<p>
The NamingEnumeration that results from search()
using OBJECT_SCOPE will contain one or zero element.
The enumeration contains one element if the named object satisfies
the search filter specified in search().
The element will have as its name the empty string because the names
of elements in the NamingEnumeration are relative to the
target context--in this case, the target context is the named object.
It contains zero element if the named object does not satisfy
the search filter specified in search().
<p>
The value of this constant is <tt>0</tt>.

"
      end

      attribute 2317954 "ONELEVEL_SCOPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Search one level of the named context.
<p>
The NamingEnumeration that results from search()
using ONELEVEL_SCOPE contains elements with
objects in the named context that satisfy
the search filter specified in search().
The names of elements in the NamingEnumeration are atomic names
relative to the named context.
<p>
The value of this constant is <tt>1</tt>.

"
      end

      attribute 2318082 "SUBTREE_SCOPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Search the entire subtree rooted at the named object.
<p>
If the named object is not a DirContext, search only the object.
If the named object is a DirContext, search the subtree
rooted at the named object, including the named object itself.
<p>
The search will not cross naming system boundaries.
<p>
The NamingEnumeration that results from search()
using SUBTREE_SCOPE contains elements of objects
from the subtree (including the named context)
that satisfy the search filter specified in search().
The names of elements in the NamingEnumeration are either
relative to the named context or is a URL string.
If the named context satisfies the search filter, it is
included in the enumeration with the empty string as
its name.
<p>
The value of this constant is <tt>2</tt>.

"
      end

      attribute 2318210 "searchScope"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Contains the scope with which to apply the search. One of
<tt>ONELEVEL_SCOPE</tt>, <tt>OBJECT_SCOPE</tt>, or
<tt>SUBTREE_SCOPE</tt>.
@serial

"
      end

      attribute 2318338 "timeLimit"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Contains the milliseconds to wait before returning
from search.
@serial

"
      end

      attribute 2318466 "derefLink"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates whether JNDI links are dereferenced during
search.
@serial

"
      end

      attribute 2318594 "returnObj"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indicates whether object is returned in <tt>SearchResult</tt>.
@serial

"
      end

      attribute 2318722 "countLimit"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Contains the maximum number of SearchResults to return.
@serial

"
      end

      classrelation 3895810 // attributesToReturn (<unidirectional association>)
	relation 3895810 --->
	  a role_name "attributesToReturn" multiplicity "[]" private
	    comment "
 Contains the list of attributes to be returned in
<tt>SearchResult</tt> for each matching entry of search. <tt>null</tt>
indicates that all attributes are to be returned.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3895810 // attributesToReturn (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 10056706 "SearchControls"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a search constraints using defaults.
<p>
The defaults are:
<ul>
<li>search one level
<li>no maximum return limit for search results
<li>no time limit for search
<li>return all attributes associated with objects that satisfy
  the search filter.
<li>do not return named object  (return only name and class)
<li>do not dereference links during search
</ul>
"
      end

      operation 10056834 "SearchControls"
	public explicit_return_type ""
	nparams 6
	  param in name "scope" explicit_type "int"
	  param in name "countlim" explicit_type "long"
	  param in name "timelim" explicit_type "int"
	  param inout name "attrs" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "retobj" explicit_type "boolean"
	  param inout name "deref" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a search constraints using arguments.
@param scope     The search scope.  One of:
                 OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE.
@param timelim   The number of milliseconds to wait before returning.
                 If 0, wait indefinitely.
@param deref     If true, dereference links during search.
@param countlim  The maximum number of entries to return.  If 0, return
                 all entries that satisfy filter.
@param retobj    If true, return the object bound to the name of the
                 entry; if false, do not return object.
@param attrs     The identifiers of the attributes to return along with
                 the entry.  If null, return all attributes. If empty
                 return no attributes.
"
      end

      operation 10056962 "getSearchScope"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the search scope of these SearchControls.
<p>
One of OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE.

@return The search scope of this SearchControls.
@see #setSearchScope
"
      end

      operation 10057090 "getTimeLimit"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the time limit of these SearchControls in milliseconds.
<p>
If the value is 0, this means to wait indefinitely.
@return The time limit of these SearchControls in milliseconds.
@see #setTimeLimit
"
      end

      operation 10057218 "getDerefLinkFlag"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether links will be dereferenced during the search.

@return true if links will be dereferenced; false otherwise.
@see #setDerefLinkFlag
"
      end

      operation 10057346 "getReturningObjFlag"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether objects will be returned as part of the result.

@return true if objects will be returned; false otherwise.
@see #setReturningObjFlag
"
      end

      operation 10057474 "getCountLimit"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of entries that will be returned
as a result of the search.
<p>
0 indicates that all entries will be returned.
@return The maximum number of entries that will be returned.
@see #setCountLimit
"
      end

      operation 10057602 "getReturningAttributes"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the attributes that will be returned as part of the search.
<p>
A value of null indicates that all attributes will be returned.
An empty array indicates that no attributes are to be returned.

@return An array of attribute ids identifying the attributes that
will be returned. Can be null.
@see #setReturningAttributes
"
      end

      operation 10057730 "setSearchScope"
	public explicit_return_type "void"
	nparams 1
	  param in name "scope" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the search scope to one of:
OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE.
@param scope     The search scope of this SearchControls.
@see #getSearchScope
"
      end

      operation 10057858 "setTimeLimit"
	public explicit_return_type "void"
	nparams 1
	  param in name "ms" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time limit of these SearchControls in milliseconds.
<p>
If the value is 0, this means to wait indefinitely.
@param ms        The time limit of these SearchControls in milliseconds.
@see #getTimeLimit
"
      end

      operation 10057986 "setDerefLinkFlag"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables/disables link dereferencing during the search.

@param on        if true links will be dereferenced; if false, not followed.
@see #getDerefLinkFlag
"
      end

      operation 10058114 "setReturningObjFlag"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables/disables returning objects returned as part of the result.
<p>
If disabled, only the name and class of the object is returned.
If enabled, the object will be returned.

@param on        if true, objects will be returned; if false,
                 objects will not be returned.
@see #getReturningObjFlag
"
      end

      operation 10058242 "setCountLimit"
	public explicit_return_type "void"
	nparams 1
	  param in name "limit" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of entries to be returned
as a result of the search.
<p>
0 indicates no limit:  all entries will be returned.

@param limit The maximum number of entries that will be returned.
@see #getCountLimit
"
      end

      operation 10058370 "setReturningAttributes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "attrs" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies the attributes that will be returned as part of the search.
<p>
null indicates that all attributes will be returned.
An empty array indicates no attributes are returned.

@param attrs An array of attribute ids identifying the attributes that
             will be returned. Can be null.
@see #getReturningAttributes
"
      end

      attribute 2318850 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2480540967773454797L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability.

"
      end
    end

    class 1212418 "Attribute"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents an attribute associated with a named object.
<p>
In a directory, named objects can have associated with them
attributes.  The <tt>Attribute</tt> interface represents an attribute associated
with a named object.  An attribute contains 0 or more, possibly null, values.
The attribute values can be ordered or unordered (see <tt>isOrdered()</tt>).
If the values are unordered, no duplicates are allowed.
If the values are ordered, duplicates are allowed.
<p>
The content and representation of an attribute and its values is defined by
the attribute's <em>schema</em>. The schema contains information
about the attribute's syntax and other properties about the attribute.
See <tt>getAttributeDefinition()</tt> and
<tt>getAttributeSyntaxDefinition()</tt>
for details regarding how to get schema information about an attribute
if the underlying directory service supports schemas.
<p>
Equality of two attributes is determined by the implementation class.
A simple implementation can use <tt>Object.equals()</tt> to determine equality
of attribute values, while a more sophisticated implementation might
make use of schema information to determine equality.
Similarly, one implementation might provide a static storage
structure which simply returns the values passed to its
constructor, while another implementation might define <tt>get()</tt> and
<tt>getAll()</tt>.
to get the values dynamically from the directory.
<p>
Note that updates to <tt>Attribute</tt> (such as adding or removing a
value) do not affect the corresponding representation of the attribute
in the directory.  Updates to the directory can only be effected
using operations in the <tt>DirContext</tt> interface.

@author Rosanna Lee
@author Scott Seligman

@see BasicAttribute
@since 1.3
"
      classrelation 3891842 // <generalisation>
	relation 3891842 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3891842 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3891970 // <generalisation>
	relation 3891970 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3891970 // <generalisation>
	  b parent class_ref 136578 // Serializable
      end

      operation 10034818 "getAll"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an enumeration of the attribute's values.
The behaviour of this enumeration is unspecified
if the attribute's values are added, changed,
or removed while the enumeration is in progress.
If the attribute values are ordered, the enumeration's items
will be ordered.

@return A non-null enumeration of the attribute's values.
Each element of the enumeration is a possibly null Object. The object's
class is the class of the attribute value. The element is null
if the attribute's value is null.
If the attribute has zero values, an empty enumeration
is returned.
@exception NamingException
        If a naming exception was encountered while retrieving
        the values.
@see #isOrdered
"
      end

      operation 10034946 "get"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves one of this attribute's values.
If the attribute has more than one value and is unordered, any one of
the values is returned.
If the attribute has more than one value and is ordered, the
first value is returned.

@return A possibly null object representing one of
       the attribute's value. It is null if the attribute's value
       is null.
@exception NamingException
        If a naming exception was encountered while retrieving
        the value.
@exception java.util.NoSuchElementException
        If this attribute has no values.
"
      end

      operation 10035074 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of values in this attribute.

@return The nonnegative number of values in this attribute.
"
      end

      operation 10035202 "getID"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the id of this attribute.

@return The id of this attribute. It cannot be null.
"
      end

      operation 10035330 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "attrVal" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a value is in the attribute.
Equality is determined by the implementation, which may use
<tt>Object.equals()</tt> or schema information to determine equality.

@param attrVal The possibly null value to check. If null, check
 whether the attribute has an attribute value whose value is null.
@return true if attrVal is one of this attribute's values; false otherwise.
@see java.lang.Object#equals
@see BasicAttribute#equals
"
      end

      operation 10035458 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "attrVal" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new value to the attribute.
If the attribute values are unordered and
<tt>attrVal</tt> is already in the attribute, this method does nothing.
If the attribute values are ordered, <tt>attrVal</tt> is added to the end of
the list of attribute values.
<p>
Equality is determined by the implementation, which may use
<tt>Object.equals()</tt> or schema information to determine equality.

@param attrVal The new possibly null value to add. If null, null
 is added as an attribute value.
@return true if a value was added; false otherwise.
"
      end

      operation 10035586 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "attrval" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a specified value from the attribute.
If <tt>attrval</tt> is not in the attribute, this method does nothing.
If the attribute values are ordered, the first occurrence of
<tt>attrVal</tt> is removed and attribute values at indices greater
than the removed
value are shifted up towards the head of the list (and their indices
decremented by one).
<p>
Equality is determined by the implementation, which may use
<tt>Object.equals()</tt> or schema information to determine equality.

@param attrval The possibly null value to remove from this attribute.
If null, remove the attribute value that is null.
@return true if the value was removed; false otherwise.
"
      end

      operation 10035714 "clear"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all values from this attribute.
"
      end

      operation 10035842 "getAttributeSyntaxDefinition"
	public return_type class_ref 832642 // DirContext
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the syntax definition associated with the attribute.
An attribute's syntax definition specifies the format
of the attribute's value(s). Note that this is different from
the attribute value's representation as a Java object. Syntax
definition refers to the directory's notion of <em>syntax</em>.
<p>
For example, even though a value might be
a Java String object, its directory syntax might be \"Printable String\"
or \"Telephone Number\". Or a value might be a byte array, and its
directory syntax is \"JPEG\" or \"Certificate\".
For example, if this attribute's syntax is \"JPEG\",
this method would return the syntax definition for \"JPEG\".
<p>
The information that you can retrieve from a syntax definition
is directory-dependent.
<p>
If an implementation does not support schemas, it should throw
OperationNotSupportedException. If an implementation does support
schemas, it should define this method to return the appropriate
information.
@return The attribute's syntax definition. Null if the implementation
   supports schemas but this particular attribute does not have
   any schema information.
@exception OperationNotSupportedException If getting the schema
        is not supported.
@exception NamingException If a naming exception occurs while getting
        the schema.
"
      end

      operation 10035970 "getAttributeDefinition"
	public return_type class_ref 832642 // DirContext
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the attribute's schema definition.
An attribute's schema definition contains information
such as whether the attribute is multivalued or single-valued,
the matching rules to use when comparing the attribute's values.

The information that you can retrieve from an attribute definition
is directory-dependent.

<p>
If an implementation does not support schemas, it should throw
OperationNotSupportedException. If an implementation does support
schemas, it should define this method to return the appropriate
information.
@return This attribute's schema definition. Null if the implementation
    supports schemas but this particular attribute does not have
    any schema information.
@exception OperationNotSupportedException If getting the schema
        is not supported.
@exception NamingException If a naming exception occurs while getting
        the schema.
"
      end

      operation 10036098 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of the attribute.
The copy contains the same attribute values as the original attribute:
the attribute values are not themselves cloned.
Changes to the copy will not affect the original and vice versa.

@return A non-null copy of the attribute.
"
      end

      operation 10036226 "isOrdered"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "----------- Methods to support ordered multivalued attributes

Determines whether this attribute's values are ordered.
If an attribute's values are ordered, duplicate values are allowed.
If an attribute's values are unordered, they are presented
in any order and there are no duplicate values.
@return true if this attribute's values are ordered; false otherwise.
@see #get(int)
@see #remove(int)
@see #add(int, java.lang.Object)
@see #set(int, java.lang.Object)
"
      end

      operation 10036354 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "ix" explicit_type "int"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the attribute value from the ordered list of attribute values.
This method returns the value at the <tt>ix</tt> index of the list of
attribute values.
If the attribute values are unordered,
this method returns the value that happens to be at that index.
@param ix The index of the value in the ordered list of attribute values.
{@code 0 <= ix < size()}.
@return The possibly null attribute value at index <tt>ix</tt>;
  null if the attribute value is null.
@exception NamingException If a naming exception was encountered while
retrieving the value.
@exception IndexOutOfBoundsException If <tt>ix</tt> is outside the specified range.
"
      end

      operation 10036482 "remove"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "ix" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an attribute value from the ordered list of attribute values.
This method removes the value at the <tt>ix</tt> index of the list of
attribute values.
If the attribute values are unordered,
this method removes the value that happens to be at that index.
Values located at indices greater than <tt>ix</tt> are shifted up towards
the front of the list (and their indices decremented by one).

@param ix The index of the value to remove.
{@code 0 <= ix < size()}.
@return The possibly null attribute value at index <tt>ix</tt> that was removed;
  null if the attribute value is null.
@exception IndexOutOfBoundsException If <tt>ix</tt> is outside the specified range.
"
      end

      operation 10036610 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "ix" explicit_type "int"
	  param inout name "attrVal" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an attribute value to the ordered list of attribute values.
This method adds <tt>attrVal</tt> to the list of attribute values at
index <tt>ix</tt>.
Values located at indices at or greater than <tt>ix</tt> are
shifted down towards the end of the list (and their indices incremented
by one).
If the attribute values are unordered and already have <tt>attrVal</tt>,
<tt>IllegalStateException</tt> is thrown.

@param ix The index in the ordered list of attribute values to add the new value.
{@code 0 <= ix <= size()}.
@param attrVal The possibly null attribute value to add; if null, null is
the value added.
@exception IndexOutOfBoundsException If <tt>ix</tt> is outside the specified range.
@exception IllegalStateException If the attribute values are unordered and
<tt>attrVal</tt> is one of those values.
"
      end

      operation 10036738 "set"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "ix" explicit_type "int"
	  param inout name "attrVal" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets an attribute value in the ordered list of attribute values.
This method sets the value at the <tt>ix</tt> index of the list of
attribute values to be <tt>attrVal</tt>. The old value is removed.
If the attribute values are unordered,
this method sets the value that happens to be at that index
to <tt>attrVal</tt>, unless <tt>attrVal</tt> is already one of the values.
In that case, <tt>IllegalStateException</tt> is thrown.

@param ix The index of the value in the ordered list of attribute values.
{@code 0 <= ix < size()}.
@param attrVal The possibly null attribute value to use.
If null, 'null' replaces the old value.
@return The possibly null attribute value at index ix that was replaced.
  Null if the attribute value was null.
@exception IndexOutOfBoundsException If <tt>ix</tt> is outside the specified range.
@exception IllegalStateException If <tt>attrVal</tt> already exists and the
   attribute values are unordered.
"
      end

      attribute 2315394 "serialVersionUID"
	class_attribute const_attribute public explicit_type "long"
	init_value " 8707690322213556804L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability.

"
      end
    end

    class 1212546 "AttributeInUseException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown when an operation attempts
to add an attribute that already exists.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman

@see DirContext#modifyAttributes
@since 1.3
"
      classrelation 3892098 // <generalisation>
	relation 3892098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3892098 // <generalisation>
	  b parent class_ref 262146 // NamingException
      end

      operation 10036866 "AttributeInUseException"
	public explicit_return_type ""
	nparams 1
	  param inout name "explanation" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of AttributeInUseException with
an explanation. All other fields are set to null.

@param   explanation     Possibly null additional detail about this exception.
@see java.lang.Throwable#getMessage
"
      end

      operation 10036994 "AttributeInUseException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of AttributeInUseException.
All fields are initialized to null.
"
      end

      attribute 2315522 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4437710305529322564L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability

"
      end
    end

    class 1212674 "AttributeModificationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown when an attempt is
made to add, or remove, or modify an attribute, its identifier,
or its values that conflicts with the attribute's (schema) definition
or the attribute's state.
It is thrown in response to DirContext.modifyAttributes().
It contains a list of modifications that have not been performed, in the
order that they were supplied to modifyAttributes().
If the list is null, none of the modifications were performed successfully.
<p>
An AttributeModificationException instance is not synchronized
against concurrent multithreaded access. Multiple threads trying
to access and modify a single AttributeModification instance
should lock the object.

@author Rosanna Lee
@author Scott Seligman

@see DirContext#modifyAttributes
@since 1.3


<p>
The serialized form of an AttributeModificationException object
consists of the serialized fields of its NamingException
superclass, followed by an array of ModificationItem objects.

"
      classrelation 3892226 // <generalisation>
	relation 3892226 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3892226 // <generalisation>
	  b parent class_ref 262146 // NamingException
      end

      classrelation 3892354 // unexecs (<unidirectional association>)
	relation 3892354 --->
	  a role_name "unexecs" multiplicity "[]" init_value " null" private
	    comment "
Contains the possibly null list of unexecuted modifications.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3892354 // unexecs (<unidirectional association>)
	  b parent class_ref 1212802 // ModificationItem
      end

      operation 10037122 "AttributeModificationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "explanation" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of AttributeModificationException using
an explanation. All other fields are set to null.

@param   explanation     Possibly null additional detail about this exception.
If null, this exception has no detail message.

@see java.lang.Throwable#getMessage
"
      end

      operation 10037250 "AttributeModificationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of AttributeModificationException.
All fields are set to null.
"
      end

      operation 10037378 "setUnexecutedModifications"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 1212802 // ModificationItem
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the unexecuted modification list to be e.
Items in the list must appear in the same order in which they were
originally supplied in DirContext.modifyAttributes().
The first item in the list is the first one that was not executed.
If this list is null, none of the operations originally submitted
to modifyAttributes() were executed.

@param e        The possibly null list of unexecuted modifications.
@see #getUnexecutedModifications
"
      end

      operation 10037506 "getUnexecutedModifications"
	public return_type class_ref 1212802 // ModificationItem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the unexecuted modification list.
Items in the list appear in the same order in which they were
originally supplied in DirContext.modifyAttributes().
The first item in the list is the first one that was not executed.
If this list is null, none of the operations originally submitted
to modifyAttributes() were executed.

@return The possibly null unexecuted modification list.
@see #setUnexecutedModifications
"
      end

      operation 10037634 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The string representation of this exception consists of
information about where the error occurred, and
the first unexecuted modification.
This string is meant for debugging and not mean to be interpreted
programmatically.
@return The non-null string representation of this exception.
"
      end

      attribute 2315650 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8060676069678710186L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability

"
      end
    end

    class 1212802 "ModificationItem"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a modification item.
It consists of a modification code and an attribute on which to operate.
<p>
A ModificationItem instance is not synchronized against concurrent
multithreaded access. Multiple threads trying to access and modify
a single ModificationItem instance should lock the object.

@author Rosanna Lee
@author Scott Seligman
@since 1.3


<p>
The serialized form of a ModificationItem object consists of the
modification op (and int) and the corresponding Attribute.
"
      classrelation 3895170 // <realization>
	relation 3895170 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3895170 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2317314 "mod_op"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Contains an integer identify the modification
to be performed.
@serial

"
      end

      classrelation 3895298 // attr (<unidirectional association>)
	relation 3895298 --->
	  a role_name "attr" private
	    comment "
Contains the attribute identifying
the attribute and/or its value to be applied for the modification.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3895298 // attr (<unidirectional association>)
	  b parent class_ref 1212418 // Attribute
      end

      operation 10055682 "ModificationItem"
	public explicit_return_type ""
	nparams 2
	  param in name "mod_op" explicit_type "int"
	  param inout name "attr" type class_ref 1212418 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of ModificationItem.
@param mod_op Modification to apply.  It must be one of:
        DirContext.ADD_ATTRIBUTE
        DirContext.REPLACE_ATTRIBUTE
        DirContext.REMOVE_ATTRIBUTE
@param attr     The non-null attribute to use for modification.
@exception IllegalArgumentException If attr is null, or if mod_op is
        not one of the ones specified above.
"
      end

      operation 10055810 "getModificationOp"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the modification code of this modification item.
@return The modification code.  It is one of:
        DirContext.ADD_ATTRIBUTE
        DirContext.REPLACE_ATTRIBUTE
        DirContext.REMOVE_ATTRIBUTE
"
      end

      operation 10055938 "getAttribute"
	public return_type class_ref 1212418 // Attribute
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the attribute associated with this modification item.
@return The non-null attribute to use for the modification.
"
      end

      operation 10056066 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this modification item,
which consists of the modification operation and its related attribute.
The string representation is meant for debugging and not to be
interpreted programmatically.

@return The non-null string representation of this modification item.
"
      end

      attribute 2317442 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7573258562534746850L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability

"
      end
    end

    class 1212930 "Attributes"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a collection of attributes.
<p>
In a directory, named objects can have associated with them
attributes.  The Attributes interface represents a collection of attributes.
For example, you can request from the directory the attributes
associated with an object.  Those attributes are returned in
an object that implements the Attributes interface.
<p>
Attributes in an object that implements the  Attributes interface are
unordered. The object can have zero or more attributes.
Attributes is either case-sensitive or case-insensitive (case-ignore).
This property is determined at the time the Attributes object is
created. (see BasicAttributes constructor for example).
In a case-insensitive Attributes, the case of its attribute identifiers
is ignored when searching for an attribute, or adding attributes.
In a case-sensitive Attributes, the case is significant.
<p>
Note that updates to Attributes (such as adding or removing an attribute)
do not affect the corresponding representation in the directory.
Updates to the directory can only be effected
using operations in the DirContext interface.

@author Rosanna Lee
@author Scott Seligman

@see DirContext#getAttributes
@see DirContext#modifyAttributes
@see DirContext#bind
@see DirContext#rebind
@see DirContext#createSubcontext
@see DirContext#search
@see BasicAttributes
@since 1.3
"
      classrelation 3892482 // <generalisation>
	relation 3892482 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3892482 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3892610 // <generalisation>
	relation 3892610 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3892610 // <generalisation>
	  b parent class_ref 136578 // Serializable
      end

      operation 10037762 "isCaseIgnored"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the attribute set ignores the case of
attribute identifiers when retrieving or adding attributes.
@return true if case is ignored; false otherwise.
"
      end

      operation 10037890 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of attributes in the attribute set.

@return The nonnegative number of attributes in this attribute set.
"
      end

      operation 10038018 "get"
	public return_type class_ref 1212418 // Attribute
	nparams 1
	  param inout name "attrID" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the attribute with the given attribute id from the
attribute set.

@param attrID The non-null id of the attribute to retrieve.
          If this attribute set ignores the character
          case of its attribute ids, the case of attrID
          is ignored.
@return The attribute identified by attrID; null if not found.
@see #put
@see #remove
"
      end

      operation 10038146 "getAll"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an enumeration of the attributes in the attribute set.
The effects of updates to this attribute set on this enumeration
are undefined.

@return A non-null enumeration of the attributes in this attribute set.
        Each element of the enumeration is of class <tt>Attribute</tt>.
        If attribute set has zero attributes, an empty enumeration
        is returned.
"
      end

      operation 10038274 "getIDs"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an enumeration of the ids of the attributes in the
attribute set.
The effects of updates to this attribute set on this enumeration
are undefined.

@return A non-null enumeration of the attributes' ids in
        this attribute set. Each element of the enumeration is
        of class String.
        If attribute set has zero attributes, an empty enumeration
        is returned.
"
      end

      operation 10038402 "put"
	public return_type class_ref 1212418 // Attribute
	nparams 2
	  param inout name "attrID" type class_ref 128130 // String
	  param inout name "val" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new attribute to the attribute set.

@param attrID   non-null The id of the attribute to add.
          If the attribute set ignores the character
          case of its attribute ids, the case of attrID
          is ignored.
@param val      The possibly null value of the attribute to add.
                If null, the attribute does not have any values.
@return The Attribute with attrID that was previous in this attribute set;
        null if no such attribute existed.
@see #remove
"
      end

      operation 10038530 "put"
	public return_type class_ref 1212418 // Attribute
	nparams 1
	  param inout name "attr" type class_ref 1212418 // Attribute
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new attribute to the attribute set.

@param attr     The non-null attribute to add.
                If the attribute set ignores the character
                case of its attribute ids, the case of
                attr's identifier is ignored.
@return The Attribute with the same ID as attr that was previous
        in this attribute set;
        null if no such attribute existed.
@see #remove
"
      end

      operation 10038658 "remove"
	public return_type class_ref 1212418 // Attribute
	nparams 1
	  param inout name "attrID" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the attribute with the attribute id 'attrID' from
the attribute set. If the attribute does not exist, ignore.

@param attrID   The non-null id of the attribute to remove.
                If the attribute set ignores the character
                case of its attribute ids, the case of
                attrID is ignored.
@return The Attribute with the same ID as attrID that was previous
        in the attribute set;
        null if no such attribute existed.
"
      end

      operation 10038786 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of the attribute set.
The new set contains the same attributes as the original set:
the attributes are not themselves cloned.
Changes to the copy will not affect the original and vice versa.

@return A non-null copy of this attribute set.
"
      end
    end

    class 1213058 "BasicAttribute"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class provides a basic implementation of the <tt>Attribute</tt> interface.
<p>
This implementation does not support the schema methods
<tt>getAttributeDefinition()</tt> and <tt>getAttributeSyntaxDefinition()</tt>.
They simply throw <tt>OperationNotSupportedException</tt>.
Subclasses of <tt>BasicAttribute</tt> should override these methods if they
support them.
<p>
The <tt>BasicAttribute</tt> class by default uses <tt>Object.equals()</tt> to
determine equality of attribute values when testing for equality or
when searching for values, <em>except</em> when the value is an array.
For an array, each element of the array is checked using <tt>Object.equals()</tt>.
Subclasses of <tt>BasicAttribute</tt> can make use of schema information
when doing similar equality checks by overriding methods
in which such use of schema is meaningful.
Similarly, the <tt>BasicAttribute</tt> class by default returns the values passed to its
constructor and/or manipulated using the add/remove methods.
Subclasses of <tt>BasicAttribute</tt> can override <tt>get()</tt> and <tt>getAll()</tt>
to get the values dynamically from the directory (or implement
the <tt>Attribute</tt> interface directly instead of subclassing <tt>BasicAttribute</tt>).
<p>
Note that updates to <tt>BasicAttribute</tt> (such as adding or removing a value)
does not affect the corresponding representation of the attribute
in the directory.  Updates to the directory can only be effected
using operations in the <tt>DirContext</tt> interface.
<p>
A <tt>BasicAttribute</tt> instance is not synchronized against concurrent
multithreaded access. Multiple threads trying to access and modify a
<tt>BasicAttribute</tt> should lock the object.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      classrelation 3892738 // <realization>
	relation 3892738 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3892738 // <realization>
	  b parent class_ref 1212418 // Attribute
      end

      classrelation 3892866 // attrID (<unidirectional association>)
	relation 3892866 --->
	  a role_name "attrID" protected
	    comment "
Holds the attribute's id. It is initialized by the public constructor and
cannot be null unless methods in BasicAttribute that use attrID
have been overridden.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3892866 // attrID (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3892994 // values (<unidirectional association>)
	relation 3892994 --->
	  a role_name "values" protected
	    comment "
Holds the attribute's values. Initialized by public constructors.
Cannot be null unless methods in BasicAttribute that use
values have been overridden.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3892994 // values (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      attribute 2315778 "ordered"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A flag for recording whether this attribute's values are ordered.
@serial

"
      end

      operation 10038914 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 10039042 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether obj is equal to this attribute.
Two attributes are equal if their attribute-ids, syntaxes
and values are equal.
If the attribute values are unordered, the order that the values were added
are irrelevant. If the attribute values are ordered, then the
order the values must match.
If obj is null or not an Attribute, false is returned.
<p>
By default <tt>Object.equals()</tt> is used when comparing the attribute
id and its values except when a value is an array. For an array,
each element of the array is checked using <tt>Object.equals()</tt>.
A subclass may override this to make
use of schema syntax information and matching rules,
which define what it means for two attributes to be equal.
How and whether a subclass makes
use of the schema information is determined by the subclass.
If a subclass overrides <tt>equals()</tt>, it should also override
<tt>hashCode()</tt>
such that two attributes that are equal have the same hash code.

@param obj      The possibly null object to check.
@return true if obj is equal to this attribute; false otherwise.
@see #hashCode
@see #contains
"
      end

      operation 10039170 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the hash code of this attribute.
<p>
The hash code is computed by adding the hash code of
the attribute's id and that of all of its values except for
values that are arrays.
For an array, the hash code of each element of the array is summed.
If a subclass overrides <tt>hashCode()</tt>, it should override
<tt>equals()</tt>
as well so that two attributes that are equal have the same hash code.

@return an int representing the hash code of this attribute.
@see #equals
"
      end

      operation 10039298 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this attribute.
The string consists of the attribute's id and its values.
This string is meant for debugging and not meant to be
interpreted programmatically.
@return The non-null string representation of this attribute.
"
      end

      operation 10039426 "BasicAttribute"
	public explicit_return_type ""
	nparams 1
	  param inout name "id" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of an unordered attribute with no value.

@param id The attribute's id. It cannot be null.
"
      end

      operation 10039554 "BasicAttribute"
	public explicit_return_type ""
	nparams 2
	  param inout name "id" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of an unordered attribute with a single value.

@param id The attribute's id. It cannot be null.
@param value The attribute's value. If null, a null
       value is added to the attribute.
"
      end

      operation 10039682 "BasicAttribute"
	public explicit_return_type ""
	nparams 2
	  param inout name "id" type class_ref 128130 // String
	  param inout name "ordered" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of a possibly ordered attribute with no value.

@param id The attribute's id. It cannot be null.
@param ordered true means the attribute's values will be ordered;
false otherwise.
"
      end

      operation 10039810 "BasicAttribute"
	public explicit_return_type ""
	nparams 3
	  param inout name "id" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	  param inout name "ordered" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of a possibly ordered attribute with a
single value.

@param id The attribute's id. It cannot be null.
@param value The attribute's value. If null, a null
       value is added to the attribute.
@param ordered true means the attribute's values will be ordered;
false otherwise.
"
      end

      operation 10039938 "getAll"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an enumeration of this attribute's values.
<p>
By default, the values returned are those passed to the
constructor and/or manipulated using the add/replace/remove methods.
A subclass may override this to retrieve the values dynamically
from the directory.
"
      end

      operation 10040066 "get"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves one of this attribute's values.
<p>
By default, the value returned is one of those passed to the
constructor and/or manipulated using the add/replace/remove methods.
A subclass may override this to retrieve the value dynamically
from the directory.
"
      end

      operation 10040194 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10040322 "getID"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10040450 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "attrVal" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a value is in this attribute.
<p>
By default,
<tt>Object.equals()</tt> is used when comparing <tt>attrVal</tt>
with this attribute's values except when <tt>attrVal</tt> is an array.
For an array, each element of the array is checked using
<tt>Object.equals()</tt>.
A subclass may use schema information to determine equality.
"
      end

      operation 10040578 "find"
	private explicit_return_type "int"
	nparams 1
	  param inout name "target" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " For finding first element that has a null in JDK1.1 Vector.
 In the Java 2 platform, can just replace this with Vector.indexOf(target);"
      end

      operation 10040706 "valueEquals"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "obj1" type class_ref 129538 // Object
	  param inout name "obj2" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether two attribute values are equal.
Use arrayEquals for arrays and <tt>Object.equals()</tt> otherwise.
"
      end

      operation 10040834 "arrayEquals"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether two arrays are equal by comparing each of their
elements using <tt>Object.equals()</tt>.
"
      end

      operation 10040962 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "attrVal" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new value to this attribute.
<p>
By default, <tt>Object.equals()</tt> is used when comparing <tt>attrVal</tt>
with this attribute's values except when <tt>attrVal</tt> is an array.
For an array, each element of the array is checked using
<tt>Object.equals()</tt>.
A subclass may use schema information to determine equality.
"
      end

      operation 10041090 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "attrval" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a specified value from this attribute.
<p>
By default, <tt>Object.equals()</tt> is used when comparing <tt>attrVal</tt>
with this attribute's values except when <tt>attrVal</tt> is an array.
For an array, each element of the array is checked using
<tt>Object.equals()</tt>.
A subclass may use schema information to determine equality.
"
      end

      operation 10041218 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10041346 "isOrdered"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  ---- ordering methods"
      end

      operation 10041474 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "ix" explicit_type "int"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10041602 "remove"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "ix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10041730 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "ix" explicit_type "int"
	  param inout name "attrVal" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10041858 "set"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "ix" explicit_type "int"
	  param inout name "attrVal" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10041986 "getAttributeSyntaxDefinition"
	public return_type class_ref 832642 // DirContext
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ----------------- Schema methods

Retrieves the syntax definition associated with this attribute.
<p>
This method by default throws OperationNotSupportedException. A subclass
should override this method if it supports schema.
"
      end

      operation 10042114 "getAttributeDefinition"
	public return_type class_ref 832642 // DirContext
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves this attribute's schema definition.
<p>
This method by default throws OperationNotSupportedException. A subclass
should override this method if it supports schema.
"
      end

      operation 10042242 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  ---- serialization methods

Overridden to avoid exposing implementation details
@serialData Default field (the attribute ID -- a String),
followed by the number of values (an int), and the
individual values.
"
      end

      operation 10042370 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden to avoid exposing implementation details.
"
      end

      class 1213186 "ValuesEnumImpl"
	visibility package 
	nactuals 1
	actual class class_ref 540162 // NamingEnumeration
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3893122 // <realization>
	  relation 3893122 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3893122 // <realization>
	    b parent class_ref 540162 // NamingEnumeration
	end

	classrelation 3893250 // list (<unidirectional association>)
	  relation 3893250 --->
	    a role_name "list" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	      classrelation_ref 3893250 // list (<unidirectional association>)
	    b parent class_ref 185986 // Enumeration
	end

	operation 10042498 "ValuesEnumImpl"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10042626 "hasMoreElements"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10042754 "nextElement"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10042882 "next"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  nexceptions 1
	    exception class_ref 262146 // NamingException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10043010 "hasMore"
	  public explicit_return_type "boolean"
	  nparams 0
	  nexceptions 1
	    exception class_ref 262146 // NamingException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10043138 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 262146 // NamingException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 2315906 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6743528196119291326L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability.

"
      end
    end

    class 1213314 "BasicAttributes"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class provides a basic implementation
of the Attributes interface.
<p>
BasicAttributes is either case-sensitive or case-insensitive (case-ignore).
This property is determined at the time the BasicAttributes constructor
is called.
In a case-insensitive BasicAttributes, the case of its attribute identifiers
is ignored when searching for an attribute, or adding attributes.
In a case-sensitive BasicAttributes, the case is significant.
<p>
When the BasicAttributes class needs to create an Attribute, it
uses BasicAttribute. There is no other dependency on BasicAttribute.
<p>
Note that updates to BasicAttributes (such as adding or removing an attribute)
does not affect the corresponding representation in the directory.
Updates to the directory can only be effected
using operations in the DirContext interface.
<p>
A BasicAttributes instance is not synchronized against concurrent
multithreaded access. Multiple threads trying to access and modify
a single BasicAttributes instance should lock the object.

@author Rosanna Lee
@author Scott Seligman

@see DirContext#getAttributes
@see DirContext#modifyAttributes
@see DirContext#bind
@see DirContext#rebind
@see DirContext#createSubcontext
@see DirContext#search
@since 1.3
"
      classrelation 3893378 // <realization>
	relation 3893378 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3893378 // <realization>
	  b parent class_ref 1212930 // Attributes
      end

      attribute 2316034 "ignoreCase"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates whether case of attribute ids is ignored.
@serial

"
      end

      classrelation 3893506 // attrs (<unidirectional association>)
	relation 3893506 --->
	  a role_name "attrs" init_value " new Hashtable<>(11)" package
	    comment " The 'key' in attrs is stored in the 'right case'.
 If ignoreCase is true, key is aways lowercase.
 If ignoreCase is false, key is stored as supplied by put().
 %%% Not declared \"private\" due to bug 4064984.
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Attribute> ${name}${value};
"
	    classrelation_ref 3893506 // attrs (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      operation 10043266 "BasicAttributes"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of Attributes.
The character case of attribute identifiers
is significant when subsequently retrieving or adding attributes.
"
      end

      operation 10043394 "BasicAttributes"
	public explicit_return_type ""
	nparams 1
	  param inout name "ignoreCase" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of Attributes.
If <code>ignoreCase</code> is true, the character case of attribute
identifiers is ignored; otherwise the case is significant.
@param ignoreCase true means this attribute set will ignore
                  the case of its attribute identifiers
                  when retrieving or adding attributes;
                  false means case is respected.
"
      end

      operation 10043522 "BasicAttributes"
	public explicit_return_type ""
	nparams 2
	  param inout name "attrID" type class_ref 128130 // String
	  param inout name "val" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of Attributes with one attribute.
The attribute specified by attrID and val are added to the newly
created attribute.
The character case of attribute identifiers
is significant when subsequently retrieving or adding attributes.
@param attrID   non-null The id of the attribute to add.
@param val The value of the attribute to add. If null, a null
       value is added to the attribute.
"
      end

      operation 10043650 "BasicAttributes"
	public explicit_return_type ""
	nparams 3
	  param inout name "attrID" type class_ref 128130 // String
	  param inout name "val" type class_ref 129538 // Object
	  param inout name "ignoreCase" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of Attributes with one attribute.
The attribute specified by attrID and val are added to the newly
created attribute.
If <code>ignoreCase</code> is true, the character case of attribute
identifiers is ignored; otherwise the case is significant.
@param attrID   non-null The id of the attribute to add.
          If this attribute set ignores the character
          case of its attribute ids, the case of attrID
          is ignored.
@param val The value of the attribute to add. If null, a null
       value is added to the attribute.
@param ignoreCase true means this attribute set will ignore
                  the case of its attribute identifiers
                  when retrieving or adding attributes;
                  false means case is respected.
"
      end

      operation 10043778 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 10043906 "isCaseIgnored"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10044034 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10044162 "get"
	public return_type class_ref 1212418 // Attribute
	nparams 1
	  param inout name "attrID" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10044290 "getAll"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10044418 "getIDs"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10044546 "put"
	public return_type class_ref 1212418 // Attribute
	nparams 2
	  param inout name "attrID" type class_ref 128130 // String
	  param inout name "val" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10044674 "put"
	public return_type class_ref 1212418 // Attribute
	nparams 1
	  param inout name "attr" type class_ref 1212418 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10044802 "remove"
	public return_type class_ref 1212418 // Attribute
	nparams 1
	  param inout name "attrID" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10044930 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this attribute set.
The string consists of each attribute identifier and the contents
of each attribute. The contents of this string is useful
for debugging and is not meant to be interpreted programmatically.

@return A non-null string listing the contents of this attribute set.
"
      end

      operation 10045058 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this <tt>BasicAttributes</tt> is equal to another
<tt>Attributes</tt>
Two <tt>Attributes</tt> are equal if they are both instances of
<tt>Attributes</tt>,
treat the case of attribute IDs the same way, and contain the
same attributes. Each <tt>Attribute</tt> in this <tt>BasicAttributes</tt>
is checked for equality using <tt>Object.equals()</tt>, which may have
be overridden by implementations of <tt>Attribute</tt>).
If a subclass overrides <tt>equals()</tt>,
it should override <tt>hashCode()</tt>
as well so that two <tt>Attributes</tt> instances that are equal
have the same hash code.
@param obj the possibly null object to compare against.

@return true If obj is equal to this BasicAttributes.
@see #hashCode
"
      end

      operation 10045186 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the hash code of this BasicAttributes.
<p>
The hash code is computed by adding the hash code of
the attributes of this object. If this BasicAttributes
ignores case of its attribute IDs, one is added to the hash code.
If a subclass overrides <tt>hashCode()</tt>,
it should override <tt>equals()</tt>
as well so that two <tt>Attributes</tt> instances that are equal
have the same hash code.

@return an int representing the hash code of this BasicAttributes instance.
@see #equals
"
      end

      operation 10045314 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden to avoid exposing implementation details.
@serialData Default field (ignoreCase flag -- a boolean), followed by
the number of attributes in the set
(an int), and then the individual Attribute objects.
"
      end

      operation 10045442 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden to avoid exposing implementation details.
"
      end

      class 1213442 "AttrEnumImpl"
	visibility package 
	nactuals 1
	actual class class_ref 540162 // NamingEnumeration
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3893634 // <realization>
	  relation 3893634 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3893634 // <realization>
	    b parent class_ref 540162 // NamingEnumeration
	end

	classrelation 3893762 // elements (<unidirectional association>)
	  relation 3893762 --->
	    a role_name "elements" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Attribute> ${name}${value};
"
	      classrelation_ref 3893762 // elements (<unidirectional association>)
	    b parent class_ref 185986 // Enumeration
	end

	operation 10045570 "AttrEnumImpl"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10045698 "hasMoreElements"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10045826 "nextElement"
	  public return_type class_ref 1212418 // Attribute
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10045954 "hasMore"
	  public explicit_return_type "boolean"
	  nparams 0
	  nexceptions 1
	    exception class_ref 262146 // NamingException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10046082 "next"
	  public return_type class_ref 1212418 // Attribute
	  nparams 0
	  nexceptions 1
	    exception class_ref 262146 // NamingException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10046210 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 262146 // NamingException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1213570 "IDEnumImpl"
	visibility package 
	nactuals 1
	actual class class_ref 540162 // NamingEnumeration
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3893890 // <realization>
	  relation 3893890 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3893890 // <realization>
	    b parent class_ref 540162 // NamingEnumeration
	end

	classrelation 3894018 // elements (<unidirectional association>)
	  relation 3894018 --->
	    a role_name "elements" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Attribute> ${name}${value};
"
	      classrelation_ref 3894018 // elements (<unidirectional association>)
	    b parent class_ref 185986 // Enumeration
	end

	operation 10046338 "IDEnumImpl"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10046466 "hasMoreElements"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10046594 "nextElement"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10046722 "hasMore"
	  public explicit_return_type "boolean"
	  nparams 0
	  nexceptions 1
	    exception class_ref 262146 // NamingException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10046850 "next"
	  public return_type class_ref 128130 // String
	  nparams 0
	  nexceptions 1
	    exception class_ref 262146 // NamingException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 10046978 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 262146 // NamingException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 2316162 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4980164073184639448L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability.

"
      end
    end

    class 1213698 "SearchResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents an item in the NamingEnumeration returned as a
result of the DirContext.search() methods.
<p>
A SearchResult instance is not synchronized against concurrent
multithreaded access. Multiple threads trying to access and modify
a single SearchResult instance should lock the object.

@author Rosanna Lee
@author Scott Seligman

@see DirContext#search
@since 1.3
"
      classrelation 3895938 // <generalisation>
	relation 3895938 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3895938 // <generalisation>
	  b parent class_ref 1208194 // Binding
      end

      classrelation 3896066 // attrs (<unidirectional association>)
	relation 3896066 --->
	  a role_name "attrs" private
	    comment "
Contains the attributes returned with the object.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3896066 // attrs (<unidirectional association>)
	  b parent class_ref 1212930 // Attributes
      end

      operation 10058498 "SearchResult"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a search result using the result's name, its bound object, and
its attributes.
<p>
<tt>getClassName()</tt> will return the class name of <tt>obj</tt>
(or null if <tt>obj</tt> is null) unless the class name has been
explicitly set using <tt>setClassName()</tt>.

@param name The non-null name of the search item. It is relative
            to the <em>target context</em> of the search (which is
named by the first parameter of the <code>search()</code> method)

@param obj  The object bound to name. Can be null.
@param attrs The attributes that were requested to be returned with
this search item. Cannot be null.
@see javax.naming.NameClassPair#setClassName
@see javax.naming.NameClassPair#getClassName
"
      end

      operation 10058626 "SearchResult"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	  param inout name "isRelative" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a search result using the result's name, its bound object, and
its attributes, and whether the name is relative.
<p>
<tt>getClassName()</tt> will return the class name of <tt>obj</tt>
(or null if <tt>obj</tt> is null) unless the class name has been
explicitly set using <tt>setClassName()</tt>

@param name The non-null name of the search item.
@param obj  The object bound to name. Can be null.
@param attrs The attributes that were requested to be returned with
this search item. Cannot be null.
@param isRelative true if <code>name</code> is relative
        to the target context of the search (which is named by
        the first parameter of the <code>search()</code> method);
        false if <code>name</code> is a URL string.
@see javax.naming.NameClassPair#setClassName
@see javax.naming.NameClassPair#getClassName
"
      end

      operation 10058754 "SearchResult"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "className" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a search result using the result's name, its class name,
its bound object, and its attributes.

@param name The non-null name of the search item. It is relative
            to the <em>target context</em> of the search (which is
named by the first parameter of the <code>search()</code> method)

@param  className       The possibly null class name of the object
        bound to <tt>name</tt>. If null, the class name of <tt>obj</tt> is
        returned by <tt>getClassName()</tt>. If <tt>obj</tt> is also null,
        <tt>getClassName()</tt> will return null.
@param obj  The object bound to name. Can be null.
@param attrs The attributes that were requested to be returned with
this search item. Cannot be null.
@see javax.naming.NameClassPair#setClassName
@see javax.naming.NameClassPair#getClassName
"
      end

      operation 10058882 "SearchResult"
	public explicit_return_type ""
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "className" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	  param inout name "isRelative" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a search result using the result's name, its class name,
its bound object, its attributes, and whether the name is relative.

@param name The non-null name of the search item.
@param  className       The possibly null class name of the object
        bound to <tt>name</tt>. If null, the class name of <tt>obj</tt> is
        returned by <tt>getClassName()</tt>. If <tt>obj</tt> is also null,
        <tt>getClassName()</tt> will return null.
@param obj  The object bound to name. Can be null.
@param attrs The attributes that were requested to be returned with
this search item. Cannot be null.
@param isRelative true if <code>name</code> is relative
        to the target context of the search (which is named by
        the first parameter of the <code>search()</code> method);
        false if <code>name</code> is a URL string.
@see javax.naming.NameClassPair#setClassName
@see javax.naming.NameClassPair#getClassName
"
      end

      operation 10059010 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the attributes in this search result.

@return The non-null attributes in this search result. Can be empty.
@see #setAttributes
"
      end

      operation 10059138 "setAttributes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "attrs" type class_ref 1212930 // Attributes
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the attributes of this search result to <code>attrs</code>.
@param attrs The non-null attributes to use. Can be empty.
@see #getAttributes
"
      end

      operation 10059266 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this SearchResult.
The string representation consists of the string representation
of the binding and the string representation of
this search result's attributes, separated by ':'.
The contents of this string is useful
for debugging and is not meant to be interpreted programmatically.

@return The string representation of this SearchResult. Cannot be null.
"
      end

      attribute 2318978 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9158063327699723172L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability

"
      end
    end

    class 1213826 "InitialDirContext"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is the starting context for performing
directory operations. The documentation in the class description
of InitialContext (including those for synchronization) apply here.


@author Rosanna Lee
@author Scott Seligman

@see javax.naming.InitialContext
@since 1.3
"
      classrelation 3894274 // <generalisation>
	relation 3894274 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3894274 // <generalisation>
	  b parent class_ref 1209474 // InitialContext
      end

      classrelation 3894402 // <realization>
	relation 3894402 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3894402 // <realization>
	  b parent class_ref 832642 // DirContext
      end

      operation 10050434 "InitialDirContext"
	protected explicit_return_type ""
	nparams 1
	  param inout name "lazy" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an initial DirContext with the option of not
initializing it.  This may be used by a constructor in
a subclass when the value of the environment parameter
is not yet known at the time the <tt>InitialDirContext</tt>
constructor is called.  The subclass's constructor will
call this constructor, compute the value of the environment,
and then call <tt>init()</tt> before returning.

@param lazy
         true means do not initialize the initial DirContext; false
         is equivalent to calling <tt>new InitialDirContext()</tt>
@throws  NamingException if a naming exception is encountered

@see InitialContext#init(Hashtable)
@since 1.3
"
      end

      operation 10050562 "InitialDirContext"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an initial DirContext.
No environment properties are supplied.
Equivalent to <tt>new InitialDirContext(null)</tt>.

@throws  NamingException if a naming exception is encountered

@see #InitialDirContext(Hashtable)
"
      end

      operation 10050690 "InitialDirContext"
	public explicit_return_type ""
	nparams 1
	  param inout name "environment" type class_ref 137090 // Hashtable
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an initial DirContext using the supplied environment.
Environment properties are discussed in the
<tt>javax.naming.InitialContext</tt> class description.

<p> This constructor will not modify <tt>environment</tt>
or save a reference to it, but may save a clone.
Caller should not modify mutable keys and values in
<tt>environment</tt> after it has been passed to the constructor.

@param environment
         environment used to create the initial DirContext.
         Null indicates an empty environment.

@throws  NamingException if a naming exception is encountered
"
      end

      operation 10050818 "getURLOrDefaultInitDirCtx"
	private return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10050946 "getURLOrDefaultInitDirCtx"
	private return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10051074 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " DirContext methods
 Most Javadoc is deferred to the DirContext interface."
      end

      operation 10051202 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "attrIds" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10051330 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10051458 "getAttributes"
	public return_type class_ref 1212930 // Attributes
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "attrIds" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10051586 "modifyAttributes"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param in name "mod_op" explicit_type "int"
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10051714 "modifyAttributes"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param in name "mod_op" explicit_type "int"
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10051842 "modifyAttributes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "mods" type class_ref 1212802 // ModificationItem
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10051970 "modifyAttributes"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "mods" type class_ref 1212802 // ModificationItem
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10052098 "bind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10052226 "bind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10052354 "rebind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10052482 "rebind"
	public explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10052610 "createSubcontext"
	public return_type class_ref 832642 // DirContext
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10052738 "createSubcontext"
	public return_type class_ref 832642 // DirContext
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "attrs" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10052866 "getSchema"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10052994 "getSchema"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10053122 "getSchemaClassDefinition"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10053250 "getSchemaClassDefinition"
	public return_type class_ref 832642 // DirContext
	nparams 1
	  param inout name "name" type class_ref 261890 // Name
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10053378 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -------------------- search operations"
      end

      operation 10053506 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 2
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10053634 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	  param inout name "attributesToReturn" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10053762 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "matchingAttributes" type class_ref 1212930 // Attributes
	  param inout name "attributesToReturn" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10053890 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "filter" type class_ref 128130 // String
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10054018 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 3
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "filter" type class_ref 128130 // String
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10054146 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "filterExpr" type class_ref 128130 // String
	  param inout name "filterArgs" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 10054274 "search"
	public return_type class_ref 540162 // NamingEnumeration
	nparams 4
	  param inout name "name" type class_ref 261890 // Name
	  param inout name "filterExpr" type class_ref 128130 // String
	  param inout name "filterArgs" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "cons" type class_ref 834818 // SearchControls
	nexceptions 1
	  exception class_ref 262146 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SearchResult> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1213954 "InvalidAttributeIdentifierException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown when an attempt is
made to add to create an attribute with an invalid attribute identifier.
The validity of an attribute identifier is directory-specific.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      classrelation 3894530 // <generalisation>
	relation 3894530 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3894530 // <generalisation>
	  b parent class_ref 262146 // NamingException
      end

      operation 10054402 "InvalidAttributeIdentifierException"
	public explicit_return_type ""
	nparams 1
	  param inout name "explanation" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InvalidAttributeIdentifierException using the
explanation supplied. All other fields set to null.
@param   explanation     Possibly null string containing additional detail about this exception.
@see java.lang.Throwable#getMessage
"
      end

      operation 10054530 "InvalidAttributeIdentifierException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InvalidAttributeIdentifierException.
All fields are set to null.
"
      end

      attribute 2316674 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9036920266322999923L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability

"
      end
    end

    class 1214082 "InvalidAttributesException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown when an attempt is
made to add or modify an attribute set that has been specified
incompletely or incorrectly. This could happen, for example,
when attempting to add or modify a binding, or to create a new
subcontext without specifying all the mandatory attributes
required for creation of the object.  Another situation in
which this exception is thrown is by specification of incompatible
attributes within the same attribute set, or attributes in conflict
with that specified by the object's schema.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      classrelation 3894658 // <generalisation>
	relation 3894658 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3894658 // <generalisation>
	  b parent class_ref 262146 // NamingException
      end

      operation 10054658 "InvalidAttributesException"
	public explicit_return_type ""
	nparams 1
	  param inout name "explanation" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InvalidAttributesException using an
explanation. All other fields are set to null.
@param   explanation     Additional detail about this exception. Can be null.
@see java.lang.Throwable#getMessage
"
      end

      operation 10054786 "InvalidAttributesException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InvalidAttributesException.
All fields are set to null.
"
      end

      attribute 2316802 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2607612850539889765L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability

"
      end
    end

    class 1214210 "InvalidAttributeValueException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is thrown when an attempt is
made to add to an attribute a value that conflicts with the attribute's
schema definition.  This could happen, for example, if attempting
to add an attribute with no value when the attribute is required
to have at least one value, or if attempting to add more than
one value to a single valued-attribute, or if attempting to
add a value that conflicts with the syntax of the attribute.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      classrelation 3894786 // <generalisation>
	relation 3894786 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3894786 // <generalisation>
	  b parent class_ref 262146 // NamingException
      end

      operation 10054914 "InvalidAttributeValueException"
	public explicit_return_type ""
	nparams 1
	  param inout name "explanation" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InvalidAttributeValueException using
an explanation. All other fields are set to null.
@param   explanation     Additional detail about this exception. Can be null.
@see java.lang.Throwable#getMessage
"
      end

      operation 10055042 "InvalidAttributeValueException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InvalidAttributeValueException.
All fields are set to null.
"
      end

      attribute 2316930 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8720050295499275011L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability

"
      end
    end

    class 1214338 "InvalidSearchControlsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown when the specification of
the SearchControls for a search operation is invalid. For example, if the scope is
set to a value other than OBJECT_SCOPE, ONELEVEL_SCOPE, SUBTREE_SCOPE,
this exception is thrown.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      classrelation 3894914 // <generalisation>
	relation 3894914 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3894914 // <generalisation>
	  b parent class_ref 262146 // NamingException
      end

      operation 10055170 "InvalidSearchControlsException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InvalidSearchControlsException.
All fields are set to null.
"
      end

      operation 10055298 "InvalidSearchControlsException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InvalidSearchControlsException
with an explanation. All other fields set to null.
@param msg Detail about this exception. Can be null.
@see java.lang.Throwable#getMessage
"
      end

      attribute 2317058 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5124108943352665777L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability

"
      end
    end

    class 1214466 "InvalidSearchFilterException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown when the specification of
a search filter is invalid.  The expression of the filter may
be invalid, or there may be a problem with one of the parameters
passed to the filter.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      classrelation 3895042 // <generalisation>
	relation 3895042 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3895042 // <generalisation>
	  b parent class_ref 262146 // NamingException
      end

      operation 10055426 "InvalidSearchFilterException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InvalidSearchFilterException.
All fields are set to null.
"
      end

      operation 10055554 "InvalidSearchFilterException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InvalidSearchFilterException
with an explanation. All other fields are set to null.
@param msg Detail about this exception. Can be null.
@see java.lang.Throwable#getMessage
"
      end

      attribute 2317186 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2902700940682875441L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability

"
      end
    end

    class 1214594 "NoSuchAttributeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown when attempting to access
an attribute that does not exist.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@since 1.3
"
      classrelation 3895426 // <generalisation>
	relation 3895426 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3895426 // <generalisation>
	  b parent class_ref 262146 // NamingException
      end

      operation 10056194 "NoSuchAttributeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "explanation" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NoSuchAttributeException using
an explanation. All other fields are set to null.
@param   explanation     Additional detail about this exception. Can be null.
@see java.lang.Throwable#getMessage
"
      end

      operation 10056322 "NoSuchAttributeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NoSuchAttributeException.
All fields are initialized to null.
"
      end

      attribute 2317570 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4836415647935888137L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability

"
      end
    end

    class 1214722 "SchemaViolationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown when a method
in some ways violates the schema. An example of schema violation
is modifying attributes of an object that violates the object's
schema definition. Another example is renaming or moving an object
to a part of the namespace that violates the namespace's
schema definition.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman

@see javax.naming.Context#bind
@see DirContext#bind
@see javax.naming.Context#rebind
@see DirContext#rebind
@see DirContext#createSubcontext
@see javax.naming.Context#createSubcontext
@see DirContext#modifyAttributes
@since 1.3
"
      classrelation 3895554 // <generalisation>
	relation 3895554 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3895554 // <generalisation>
	  b parent class_ref 262146 // NamingException
      end

      operation 10056450 "SchemaViolationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of SchemaViolationException.
All fields are set to null.
"
      end

      operation 10056578 "SchemaViolationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "explanation" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of SchemaViolationException
using the explanation supplied. All other fields are set to null.
@param explanation Detail about this exception. Can be null.
@see java.lang.Throwable#getMessage
"
      end

      attribute 2317698 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3041762429525049663L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability

"
      end
    end
  end

  deploymentview 173570 "directory"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 877954 "Attribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import java.util.Enumeration;
import java.util.NoSuchElementException;
import javax.naming.NamingException;
import javax.naming.NamingEnumeration;
import javax.naming.OperationNotSupportedException;
${definition}"
      associated_elems
	class_ref 1212418 // Attribute
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 878082 "AttributeInUseException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1212546 // AttributeInUseException
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 878210 "AttributeModificationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1212674 // AttributeModificationException
      end
      comment "Copyright (c) 1999, 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 878338 "Attributes"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import java.util.Enumeration;
import javax.naming.NamingException;
import javax.naming.NamingEnumeration;
${definition}"
      associated_elems
	class_ref 1212930 // Attributes
      end
      comment "Copyright (c) 1999, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 878466 "BasicAttribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import java.util.Enumeration;
import java.util.NoSuchElementException;
import java.lang.reflect.Array;
import javax.naming.NamingException;
import javax.naming.NamingEnumeration;
import javax.naming.OperationNotSupportedException;
${definition}"
      associated_elems
	class_ref 1213058 // BasicAttribute
      end
      comment "Copyright (c) 1999, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 878594 "BasicAttributes"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import java.util.Enumeration;
import java.util.Locale;
import javax.naming.NamingException;
import javax.naming.NamingEnumeration;
${definition}"
      associated_elems
	class_ref 1213314 // BasicAttributes
      end
      comment "Copyright (c) 1999, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 878722 "DirContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.*;
${definition}"
      associated_elems
	class_ref 832642 // DirContext
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 878850 "InitialDirContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import javax.naming.spi.NamingManager;
import javax.naming.*;
${definition}"
      associated_elems
	class_ref 1213826 // InitialDirContext
      end
      comment "Copyright (c) 1999, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 878978 "InvalidAttributeIdentifierException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1213954 // InvalidAttributeIdentifierException
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 879106 "InvalidAttributesException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1214082 // InvalidAttributesException
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 879234 "InvalidAttributeValueException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1214210 // InvalidAttributeValueException
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 879362 "InvalidSearchControlsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1214338 // InvalidSearchControlsException
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 879490 "InvalidSearchFilterException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1214466 // InvalidSearchFilterException
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 879618 "ModificationItem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1212802 // ModificationItem
      end
      comment "Copyright (c) 1999, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 879746 "NoSuchAttributeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1214594 // NoSuchAttributeException
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 879874 "SchemaViolationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.NamingException;
${definition}"
      associated_elems
	class_ref 1214722 // SchemaViolationException
      end
      comment "Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 880002 "SearchControls"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 834818 // SearchControls
      end
      comment "Copyright (c) 1999, 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 880130 "SearchResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.Binding;
${definition}"
      associated_elems
	class_ref 1213698 // SearchResult
      end
      comment "Copyright (c) 1999, 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
