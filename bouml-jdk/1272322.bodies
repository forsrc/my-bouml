class Group
!!!10517890.java!!!	Group()
            springs = new ArrayList<Spring>();
!!!10518018.java!!!	addGroup(inout group : GroupLayout::Group) : GroupLayout::Group
            return addSpring(group);
!!!10518146.java!!!	addComponent(inout component : Component) : GroupLayout::Group
            return addComponent(component, DEFAULT_SIZE, DEFAULT_SIZE,
                    DEFAULT_SIZE);
!!!10518274.java!!!	addComponent(inout component : Component, in min : int, in pref : int, in max : int) : GroupLayout::Group
            return addSpring(new ComponentSpring(component, min, pref, max));
!!!10518402.java!!!	addGap(in size : int) : GroupLayout::Group
            return addGap(size, size, size);
!!!10518530.java!!!	addGap(in min : int, in pref : int, in max : int) : GroupLayout::Group
            return addSpring(new GapSpring(min, pref, max));
!!!10518658.java!!!	getSpring(in index : int) : GroupLayout::Spring
            return springs.get(index);
!!!10518786.java!!!	indexOf(inout spring : GroupLayout::Spring) : int
            return springs.indexOf(spring);
!!!10518914.java!!!	addSpring(inout spring : GroupLayout::Spring) : GroupLayout::Group
            springs.add(spring);
            spring.setParent(this);
            if (!(spring instanceof AutoPreferredGapSpring) ||
                    !((AutoPreferredGapSpring)spring).getUserCreated()) {
                springsChanged = true;
            }
            return this;
!!!10519042.java!!!	setSize(in axis : int, in origin : int, in size : int) : void
            super.setSize(axis, origin, size);
            if (size == UNSET) {
                for (int counter = springs.size() - 1; counter >= 0;
                counter--) {
                    getSpring(counter).setSize(axis, origin, size);
                }
            } else {
                setValidSize(axis, origin, size);
            }
!!!10519298.java!!!	calculateMinimumSize(in axis : int) : int
            return calculateSize(axis, MIN_SIZE);
!!!10519426.java!!!	calculatePreferredSize(in axis : int) : int
            return calculateSize(axis, PREF_SIZE);
!!!10519554.java!!!	calculateMaximumSize(in axis : int) : int
            return calculateSize(axis, MAX_SIZE);
!!!10519682.java!!!	calculateSize(in axis : int, in type : int) : int
            int count = springs.size();
            if (count == 0) {
                return 0;
            }
            if (count == 1) {
                return getSpringSize(getSpring(0), axis, type);
            }
            int size = constrain(operator(getSpringSize(getSpring(0), axis,
                    type), getSpringSize(getSpring(1), axis, type)));
            for (int counter = 2; counter < count; counter++) {
                size = constrain(operator(size, getSpringSize(
                        getSpring(counter), axis, type)));
            }
            return size;
!!!10519810.java!!!	getSpringSize(inout spring : GroupLayout::Spring, in axis : int, in type : int) : int
            switch(type) {
                case MIN_SIZE:
                    return spring.getMinimumSize(axis);
                case PREF_SIZE:
                    return spring.getPreferredSize(axis);
                case MAX_SIZE:
                    return spring.getMaximumSize(axis);
            }
            assert false;
            return 0;
!!!10520194.java!!!	removeAutopadding() : void
            unset();
            for (int counter = springs.size() - 1; counter >= 0; counter--) {
                Spring spring = springs.get(counter);
                if (spring instanceof AutoPreferredGapSpring) {
                    if (((AutoPreferredGapSpring)spring).getUserCreated()) {
                        ((AutoPreferredGapSpring)spring).reset();
                    } else {
                        springs.remove(counter);
                    }
                } else if (spring instanceof Group) {
                    ((Group)spring).removeAutopadding();
                }
            }
!!!10520322.java!!!	unsetAutopadding() : void
            // Clear cached pref/min/max.
            unset();
            for (int counter = springs.size() - 1; counter >= 0; counter--) {
                Spring spring = springs.get(counter);
                if (spring instanceof AutoPreferredGapSpring) {
                    spring.unset();
                } else if (spring instanceof Group) {
                    ((Group)spring).unsetAutopadding();
                }
            }
!!!10520450.java!!!	calculateAutopadding(in axis : int) : void
            for (int counter = springs.size() - 1; counter >= 0; counter--) {
                Spring spring = springs.get(counter);
                if (spring instanceof AutoPreferredGapSpring) {
                    // Force size to be reset.
                    spring.unset();
                    ((AutoPreferredGapSpring)spring).calculatePadding(axis);
                } else if (spring instanceof Group) {
                    ((Group)spring).calculateAutopadding(axis);
                }
            }
            // Clear cached pref/min/max.
            unset();
!!!10520578.java!!!	willHaveZeroSize(inout treatAutopaddingAsZeroSized : boolean) : boolean
            for (int i = springs.size() - 1; i >= 0; i--) {
                Spring spring = springs.get(i);
                if (!spring.willHaveZeroSize(treatAutopaddingAsZeroSized)) {
                    return false;
                }
            }
            return true;
