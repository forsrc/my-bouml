class ArraySpliterator
!!!8913154.java!!!	ArraySpliterator(inout array : Object [[]], in additionalCharacteristics : int)
            this(array, 0, array.length, additionalCharacteristics);
!!!8913282.java!!!	ArraySpliterator(inout array : Object [[]], in origin : int, in fence : int, in additionalCharacteristics : int)
            this.array = array;
            this.index = origin;
            this.fence = fence;
            this.characteristics = additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;
!!!8913410.java!!!	trySplit() : Spliterator
            int lo = index, mid = (lo + fence) >>> 1;
            return (lo >= mid)
                   ? null
                   : new ArraySpliterator<>(array, lo, index = mid, characteristics);
!!!8913538.java!!!	forEachRemaining(inout action : Consumer) : void
            Object[] a; int i, hi; // hoist accesses and checks from loop
            if (action == null)
                throw new NullPointerException();
            if ((a = array).length >= (hi = fence) &&
                (i = index) >= 0 && i < (index = hi)) {
                do { action.accept((T)a[i]); } while (++i < hi);
            }
!!!8913666.java!!!	tryAdvance(inout action : Consumer) : boolean
            if (action == null)
                throw new NullPointerException();
            if (index >= 0 && index < fence) {
                @SuppressWarnings("unchecked") T e = (T) array[index++];
                action.accept(e);
                return true;
            }
            return false;
!!!8913794.java!!!	estimateSize() : long
 return (long)(fence - index);
!!!8913922.java!!!	characteristics() : int
            return characteristics;
!!!8914050.java!!!	getComparator() : Comparator
            if (hasCharacteristics(Spliterator.SORTED))
                return null;
            throw new IllegalStateException();
