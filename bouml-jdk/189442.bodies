class ObjectStreamField
!!!609794.java!!!	ObjectStreamField(inout n : String, inout clazz : Class)
        name = n;
        this.clazz = clazz;

        // Compute the typecode for easy switching
        if (clazz.isPrimitive()) {
            if (clazz == Integer.TYPE) {
                type = 'I';
            } else if (clazz == Byte.TYPE) {
                type = 'B';
            } else if (clazz == Long.TYPE) {
                type = 'J';
            } else if (clazz == Float.TYPE) {
                type = 'F';
            } else if (clazz == Double.TYPE) {
                type = 'D';
            } else if (clazz == Short.TYPE) {
                type = 'S';
            } else if (clazz == Character.TYPE) {
                type = 'C';
            } else if (clazz == Boolean.TYPE) {
                type = 'Z';
            }
        } else if (clazz.isArray()) {
            type = '[';
            typeString = ObjectStreamClass.getSignature(clazz);
        } else {
            type = 'L';
            typeString = ObjectStreamClass.getSignature(clazz);
        }

        if (typeString != null)
            signature = typeString;
        else
            signature = String.valueOf(type);

!!!609922.java!!!	ObjectStreamField(inout field : Field)
        this(field.getName(), field.getType());
        setField( field ) ;
!!!610050.java!!!	ObjectStreamField(inout n : String, in t : char, inout f : Field, inout ts : String)
        name = n;
        type = t;
        setField( f ) ;
        typeString = ts;

        if (typeString != null)
            signature = typeString;
        else
            signature = String.valueOf(type);

!!!610178.java!!!	getName() : String
        return name;
!!!610306.java!!!	getType() : Class
        if (clazz != null)
            return clazz;
        switch (type) {
        case 'B': clazz = Byte.TYPE;
            break;
        case 'C': clazz = Character.TYPE;
            break;
        case 'S': clazz = Short.TYPE;
            break;
        case 'I': clazz = Integer.TYPE;
            break;
        case 'J': clazz = Long.TYPE;
            break;
        case 'F': clazz = Float.TYPE;
            break;
        case 'D': clazz = Double.TYPE;
            break;
        case 'Z': clazz = Boolean.TYPE;
            break;
        case '[':
        case 'L':
            clazz = Object.class;
            break;
        }

        return clazz;
!!!610434.java!!!	getTypeCode() : char
        return type;
!!!610562.java!!!	getTypeString() : String
        return typeString;
!!!610690.java!!!	getField() : Field
        return field;
!!!610818.java!!!	setField(inout field : Field) : void
        this.field = field;
        this.fieldID = bridge.objectFieldOffset( field ) ;
!!!611074.java!!!	isPrimitive() : boolean
        return (type != '[' && type != 'L');
!!!611202.java!!!	compareTo(inout o : Object) : int
        ObjectStreamField f2 = (ObjectStreamField)o;
        boolean thisprim = (this.typeString == null);
        boolean otherprim = (f2.typeString == null);

        if (thisprim != otherprim) {
            return (thisprim ? -1 : 1);
        }
        return this.name.compareTo(f2.name);
!!!611330.java!!!	typeEquals(inout other : ObjectStreamField) : boolean
        if (other == null || type != other.type)
            return false;

        /* Return true if the primitive types matched */
        if (typeString == null && other.typeString == null)
            return true;

        return ObjectStreamClass.compareClassNames(typeString,
                                                   other.typeString,
                                                   '/');
!!!611458.java!!!	getSignature() : String

        return signature;

!!!611586.java!!!	toString() : String
        if (typeString != null)
            return typeString + " " + name;
        else
            return type + " " + name;
!!!611714.java!!!	getClazz() : Class
        return clazz;
!!!611842.java!!!	getFieldID() : long
        return fieldID ;
