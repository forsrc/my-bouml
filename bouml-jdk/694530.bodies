class CaseInsensitiveMap
!!!4575106.java!!!	get(in codePoint : int) : int
        if (mapBuilt == Boolean.FALSE) {
            synchronized (mapBuilt) {
                if (mapBuilt == Boolean.FALSE) {
                    buildCaseInsensitiveMap();
                }
            } // synchronized
        } // if mapBuilt

        return (codePoint < 0x10000) ? getMapping(codePoint) : null;
!!!4575234.java!!!	getMapping(in codePoint : int) : int
        int chunk = codePoint >>> CHUNK_SHIFT;
        int offset = codePoint & CHUNK_MASK;

        return caseInsensitiveMap[chunk][offset];
!!!4575362.java!!!	buildCaseInsensitiveMap() : void
        caseInsensitiveMap = new int[INITIAL_CHUNK_COUNT][][];
        for (int i=0; i<INITIAL_CHUNK_COUNT; i++) {
            caseInsensitiveMap[i] = new int[CHUNK_SIZE][];
        }

        int lc, uc;
        for (int i=0; i<0x10000; i++) {
            lc = Character.toLowerCase(i);
            uc = Character.toUpperCase(i);

            // lower/upper case value is not the same as code point
            if (lc != uc || lc != i) {
                int[] map = new int[2];
                int index = 0;

                if (lc != i) {
                    map[index++] = lc;
                    map[index++] = LOWER_CASE_MATCH;
                    int[] lcMap = getMapping(lc);
                    if (lcMap != null) {
                        map = updateMap(i, map, lc, lcMap, LOWER_CASE_MATCH);
                    }
                }

                if (uc != i) {
                    if (index == map.length) {
                        map = expandMap(map, 2);
                    }
                    map[index++] = uc;
                    map[index++] = UPPER_CASE_MATCH;
                    int[] ucMap = getMapping(uc);
                    if (ucMap != null) {
                        map = updateMap(i, map, uc, ucMap, UPPER_CASE_MATCH);
                    }
                }

                set(i, map);
            }
        }

        mapBuilt = Boolean.TRUE;
!!!4575490.java!!!	expandMap(inout srcMap : int [[]], in expandBy : int) : int
        final int oldLen = srcMap.length;
        int[] newMap = new int[oldLen + expandBy];

        System.arraycopy(srcMap, 0, newMap, 0, oldLen);
        return newMap;
!!!4575618.java!!!	set(in codePoint : int, inout map : int [[]]) : void
        int chunk = codePoint >>> CHUNK_SHIFT;
        int offset = codePoint & CHUNK_MASK;

        caseInsensitiveMap[chunk][offset] = map;
!!!4575746.java!!!	updateMap(in codePoint : int, inout codePointMap : int [[]], in ciCodePoint : int, inout ciCodePointMap : int [[]], in matchType : int) : int
        for (int i=0; i<ciCodePointMap.length; i+=2) {
            int c = ciCodePointMap[i];
            int[] cMap = getMapping(c);
            if (cMap != null) {
                if (contains(cMap, ciCodePoint, matchType)) {
                    if (!contains(cMap, codePoint)) {
                        cMap = expandAndAdd(cMap, codePoint, matchType);
                        set(c, cMap);
                    }
                    if (!contains(codePointMap, c)) {
                        codePointMap = expandAndAdd(codePointMap, c,matchType);
                    }
                }
            }
        }

        if (!contains(ciCodePointMap, codePoint)) {
            ciCodePointMap = expandAndAdd(ciCodePointMap, codePoint, matchType);
            set(ciCodePoint, ciCodePointMap);
        }

        return codePointMap;
!!!4575874.java!!!	contains(inout map : int [[]], in codePoint : int) : boolean
        for (int i=0; i<map.length; i += 2) {
            if (map[i] == codePoint) {
                return true;
            }
        }
        return false;
!!!4576002.java!!!	contains(inout map : int [[]], in codePoint : int, in matchType : int) : boolean
        for (int i=0; i<map.length; i += 2) {
            if (map[i] == codePoint && map[i+1] == matchType) {
                return true;
            }
        }
        return false;
!!!4576130.java!!!	expandAndAdd(inout srcMap : int [[]], in codePoint : int, in matchType : int) : int
        final int oldLen = srcMap.length;
        int[] newMap = new int[oldLen + 2];

        System.arraycopy(srcMap, 0, newMap, 0, oldLen);
        newMap[oldLen] = codePoint;
        newMap[oldLen+1] = matchType;
        return newMap;
