class DefaultTableColumnModel
!!!11596162.java!!!	DefaultTableColumnModel()
        super();

        // Initialize local ivars to default
        tableColumns = new Vector<TableColumn>();
        setSelectionModel(createSelectionModel());
        setColumnMargin(1);
        invalidateWidthCache();
        setColumnSelectionAllowed(false);
!!!11596290.java!!!	addColumn(inout aColumn : TableColumn) : void
        if (aColumn == null) {
            throw new IllegalArgumentException("Object is null");
        }

        tableColumns.addElement(aColumn);
        aColumn.addPropertyChangeListener(this);
        invalidateWidthCache();

        // Post columnAdded event notification
        fireColumnAdded(new TableColumnModelEvent(this, 0,
                                                  getColumnCount() - 1));
!!!11596418.java!!!	removeColumn(inout column : TableColumn) : void
        int columnIndex = tableColumns.indexOf(column);

        if (columnIndex != -1) {
            // Adjust for the selection
            if (selectionModel != null) {
                selectionModel.removeIndexInterval(columnIndex,columnIndex);
            }

            column.removePropertyChangeListener(this);
            tableColumns.removeElementAt(columnIndex);
            invalidateWidthCache();

            // Post columnAdded event notification.  (JTable and JTableHeader
            // listens so they can adjust size and redraw)
            fireColumnRemoved(new TableColumnModelEvent(this,
                                           columnIndex, 0));
        }
!!!11596546.java!!!	moveColumn(in columnIndex : int, in newIndex : int) : void
        if ((columnIndex < 0) || (columnIndex >= getColumnCount()) ||
            (newIndex < 0) || (newIndex >= getColumnCount()))
            throw new IllegalArgumentException("moveColumn() - Index out of range");

        TableColumn aColumn;

        // If the column has not yet moved far enough to change positions
        // post the event anyway, the "draggedDistance" property of the
        // tableHeader will say how far the column has been dragged.
        // Here we are really trying to get the best out of an
        // API that could do with some rethinking. We preserve backward
        // compatibility by slightly bending the meaning of these methods.
        if (columnIndex == newIndex) {
            fireColumnMoved(new TableColumnModelEvent(this, columnIndex, newIndex));
            return;
        }
        aColumn = tableColumns.elementAt(columnIndex);

        tableColumns.removeElementAt(columnIndex);
        boolean selected = selectionModel.isSelectedIndex(columnIndex);
        selectionModel.removeIndexInterval(columnIndex,columnIndex);

        tableColumns.insertElementAt(aColumn, newIndex);
        selectionModel.insertIndexInterval(newIndex, 1, true);
        if (selected) {
            selectionModel.addSelectionInterval(newIndex, newIndex);
        }
        else {
            selectionModel.removeSelectionInterval(newIndex, newIndex);
        }

        fireColumnMoved(new TableColumnModelEvent(this, columnIndex,
                                                               newIndex));
!!!11596674.java!!!	setColumnMargin(in newMargin : int) : void
        if (newMargin != columnMargin) {
            columnMargin = newMargin;
            // Post columnMarginChanged event notification.
            fireColumnMarginChanged();
        }
!!!11596802.java!!!	getColumnCount() : int
        return tableColumns.size();
!!!11596930.java!!!	getColumns() : Enumeration
        return tableColumns.elements();
!!!11597058.java!!!	getColumnIndex(inout identifier : Object) : int
        if (identifier == null) {
            throw new IllegalArgumentException("Identifier is null");
        }

        Enumeration enumeration = getColumns();
        TableColumn aColumn;
        int index = 0;

        while (enumeration.hasMoreElements()) {
            aColumn = (TableColumn)enumeration.nextElement();
            // Compare them this way in case the column's identifier is null.
            if (identifier.equals(aColumn.getIdentifier()))
                return index;
            index++;
        }
        throw new IllegalArgumentException("Identifier not found");
!!!11597186.java!!!	getColumn(in columnIndex : int) : TableColumn
        return tableColumns.elementAt(columnIndex);
!!!11597314.java!!!	getColumnMargin() : int
        return columnMargin;
!!!11597442.java!!!	getColumnIndexAtX(in x : int) : int
        if (x < 0) {
            return -1;
        }
        int cc = getColumnCount();
        for(int column = 0; column < cc; column++) {
            x = x - getColumn(column).getWidth();
            if (x < 0) {
                return column;
            }
        }
        return -1;
!!!11597570.java!!!	getTotalColumnWidth() : int
        if (totalColumnWidth == -1) {
            recalcWidthCache();
        }
        return totalColumnWidth;
!!!11597698.java!!!	setSelectionModel(inout newModel : ListSelectionModel) : void
        if (newModel == null) {
            throw new IllegalArgumentException("Cannot set a null SelectionModel");
        }

        ListSelectionModel oldModel = selectionModel;

        if (newModel != oldModel) {
            if (oldModel != null) {
                oldModel.removeListSelectionListener(this);
            }

            selectionModel= newModel;
            newModel.addListSelectionListener(this);
        }
!!!11597826.java!!!	getSelectionModel() : ListSelectionModel
        return selectionModel;
!!!11597954.java!!!	setColumnSelectionAllowed(inout flag : boolean) : void
        columnSelectionAllowed = flag;
!!!11598082.java!!!	getColumnSelectionAllowed() : boolean
        return columnSelectionAllowed;
!!!11598210.java!!!	getSelectedColumns() : int
        if (selectionModel != null) {
            int iMin = selectionModel.getMinSelectionIndex();
            int iMax = selectionModel.getMaxSelectionIndex();

            if ((iMin == -1) || (iMax == -1)) {
                return new int[0];
            }

            int[] rvTmp = new int[1+ (iMax - iMin)];
            int n = 0;
            for(int i = iMin; i <= iMax; i++) {
                if (selectionModel.isSelectedIndex(i)) {
                    rvTmp[n++] = i;
                }
            }
            int[] rv = new int[n];
            System.arraycopy(rvTmp, 0, rv, 0, n);
            return rv;
        }
        return  new int[0];
!!!11598338.java!!!	getSelectedColumnCount() : int
        if (selectionModel != null) {
            int iMin = selectionModel.getMinSelectionIndex();
            int iMax = selectionModel.getMaxSelectionIndex();
            int count = 0;

            for(int i = iMin; i <= iMax; i++) {
                if (selectionModel.isSelectedIndex(i)) {
                    count++;
                }
            }
            return count;
        }
        return 0;
!!!11598466.java!!!	addColumnModelListener(inout x : TableColumnModelListener) : void
        listenerList.add(TableColumnModelListener.class, x);
!!!11598594.java!!!	removeColumnModelListener(inout x : TableColumnModelListener) : void
        listenerList.remove(TableColumnModelListener.class, x);
!!!11598722.java!!!	getColumnModelListeners() : TableColumnModelListener
        return listenerList.getListeners(TableColumnModelListener.class);
!!!11598850.java!!!	fireColumnAdded(inout e : TableColumnModelEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==TableColumnModelListener.class) {
                // Lazily create the event:
                // if (e == null)
                //  e = new ChangeEvent(this);
                ((TableColumnModelListener)listeners[i+1]).
                    columnAdded(e);
            }
        }
!!!11598978.java!!!	fireColumnRemoved(inout e : TableColumnModelEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==TableColumnModelListener.class) {
                // Lazily create the event:
                // if (e == null)
                //  e = new ChangeEvent(this);
                ((TableColumnModelListener)listeners[i+1]).
                    columnRemoved(e);
            }
        }
!!!11599106.java!!!	fireColumnMoved(inout e : TableColumnModelEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==TableColumnModelListener.class) {
                // Lazily create the event:
                // if (e == null)
                //  e = new ChangeEvent(this);
                ((TableColumnModelListener)listeners[i+1]).
                    columnMoved(e);
            }
        }
!!!11599234.java!!!	fireColumnSelectionChanged(inout e : ListSelectionEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==TableColumnModelListener.class) {
                // Lazily create the event:
                // if (e == null)
                //  e = new ChangeEvent(this);
                ((TableColumnModelListener)listeners[i+1]).
                    columnSelectionChanged(e);
            }
        }
!!!11599362.java!!!	fireColumnMarginChanged() : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==TableColumnModelListener.class) {
                // Lazily create the event:
                if (changeEvent == null)
                    changeEvent = new ChangeEvent(this);
                ((TableColumnModelListener)listeners[i+1]).
                    columnMarginChanged(changeEvent);
            }
        }
!!!11599490.java!!!	getListeners(inout listenerType : Class) : T
        return listenerList.getListeners(listenerType);
!!!11599618.java!!!	propertyChange(inout evt : PropertyChangeEvent) : void
        String name = evt.getPropertyName();

        if (name == "width" || name == "preferredWidth") {
            invalidateWidthCache();
            // This is a misnomer, we're using this method
            // simply to cause a relayout.
            fireColumnMarginChanged();
        }

!!!11599746.java!!!	valueChanged(inout e : ListSelectionEvent) : void
        fireColumnSelectionChanged(e);
!!!11599874.java!!!	createSelectionModel() : ListSelectionModel
        return new DefaultListSelectionModel();
!!!11600002.java!!!	recalcWidthCache() : void
        Enumeration enumeration = getColumns();
        totalColumnWidth = 0;
        while (enumeration.hasMoreElements()) {
            totalColumnWidth += ((TableColumn)enumeration.nextElement()).getWidth();
        }
!!!11600130.java!!!	invalidateWidthCache() : void
        totalColumnWidth = -1;
