class DragGestureRecognizer
!!!1984002.java!!!	DragGestureRecognizer(inout ds : DragSource, inout c : Component, in sa : int, inout dgl : DragGestureListener)
        super();

        if (ds == null) throw new IllegalArgumentException("null DragSource");

        dragSource    = ds;
        component     = c;
        sourceActions = sa & (DnDConstants.ACTION_COPY_OR_MOVE | DnDConstants.ACTION_LINK);

        try {
            if (dgl != null) addDragGestureListener(dgl);
        } catch (TooManyListenersException tmle) {
            // cant happen ...
        }
!!!1984130.java!!!	DragGestureRecognizer(inout ds : DragSource, inout c : Component, in sa : int)
        this(ds, c, sa, null);
!!!1984258.java!!!	DragGestureRecognizer(inout ds : DragSource, inout c : Component)
        this(ds, c, DnDConstants.ACTION_NONE);
!!!1984386.java!!!	DragGestureRecognizer(inout ds : DragSource)
        this(ds, null);
!!!1984770.java!!!	getDragSource() : DragSource
 return dragSource;
!!!1984898.java!!!	getComponent() : Component
 return component;
!!!1985026.java!!!	setComponent(inout c : Component) : void
        if (component != null && dragGestureListener != null)
            unregisterListeners();

        component = c;

        if (component != null && dragGestureListener != null)
            registerListeners();
!!!1985154.java!!!	getSourceActions() : int
 return sourceActions;
!!!1985282.java!!!	setSourceActions(in actions : int) : void
        sourceActions = actions & (DnDConstants.ACTION_COPY_OR_MOVE | DnDConstants.ACTION_LINK);
!!!1985410.java!!!	getTriggerEvent() : InputEvent
 return events.isEmpty() ? null : events.get(0);
!!!1985538.java!!!	resetRecognizer() : void
 events.clear();
!!!1985666.java!!!	addDragGestureListener(inout dgl : DragGestureListener) : void
        if (dragGestureListener != null)
            throw new TooManyListenersException();
        else {
            dragGestureListener = dgl;

            if (component != null) registerListeners();
        }
!!!1985794.java!!!	removeDragGestureListener(inout dgl : DragGestureListener) : void
        if (dragGestureListener == null || !dragGestureListener.equals(dgl))
            throw new IllegalArgumentException();
        else {
            dragGestureListener = null;

            if (component != null) unregisterListeners();
        }
!!!1985922.java!!!	fireDragGestureRecognized(in dragAction : int, inout p : Point) : void
        try {
            if (dragGestureListener != null) {
                dragGestureListener.dragGestureRecognized(new DragGestureEvent(this, dragAction, p, events));
            }
        } finally {
            events.clear();
        }
!!!1986050.java!!!	appendEvent(inout awtie : InputEvent) : void
        events.add(awtie);
!!!1986178.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();

        s.writeObject(SerializationTester.test(dragGestureListener)
                      ? dragGestureListener : null);
!!!1986306.java!!!	readObject(inout s : ObjectInputStream) : void
        ObjectInputStream.GetField f = s.readFields();

        DragSource newDragSource = (DragSource)f.get("dragSource", null);
        if (newDragSource == null) {
            throw new InvalidObjectException("null DragSource");
        }
        dragSource = newDragSource;

        component = (Component)f.get("component", null);
        sourceActions = f.get("sourceActions", 0) & (DnDConstants.ACTION_COPY_OR_MOVE | DnDConstants.ACTION_LINK);
        events = (ArrayList<InputEvent>)f.get("events", new ArrayList<>(1));

        dragGestureListener = (DragGestureListener)s.readObject();
