format 222
"templates" // jdk1.8::com::sun::org::apache::xalan::internal::templates
  revision 1
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/org/apache/xalan/internal/templates/"
  java_package "com.sun.org.apache.xalan.internal.templates"
  classview 157314 "templates"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 587138 "Constants"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Primary constants used in the TransformerImpl classes.
@xsl.usage advanced
"
      classrelation 1549698 // <generalisation>
	relation 1549698 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1549698 // <generalisation>
	  b parent class_ref 587266 // Constants
      end

      attribute 777474 "ELEMNAME_UNDEFINED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 777602 "ELEMNAME_WITHPARAM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 777730 "ELEMNAME_ADDATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 777858 "ELEMNAME_ANCHOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 22"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 777986 "ELEMNAME_APPLY_TEMPLATES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 50"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 778114 "ELEMNAME_USE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 34"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 778242 "ELEMNAME_CHILDREN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 778370 "ELEMNAME_CHOOSE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 37"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 778498 "ELEMNAME_COMMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 59"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

 my own"
      end

      attribute 778626 "ELEMNAME_CONSTRUCT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

 my own"
      end

      attribute 778754 "ELEMNAME_CONTENTS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 778882 "ELEMNAME_COPY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 779010 "ELEMNAME_COPY_OF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 74"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 779138 "ELEMNAME_DECIMALFORMAT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 83"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 779266 "ELEMNAME_DEFINEATTRIBUTESET"
	class_attribute const_attribute public explicit_type "int"
	init_value " 40"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 779394 "ELEMNAME_DEFINESCRIPT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 779522 "ELEMNAME_DISPLAYIF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

 my own"
      end

      attribute 779650 "ELEMNAME_EMPTY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 779778 "ELEMNAME_EVAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 779906 "ELEMNAME_EXPECTEDCHILDREN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 780034 "ELEMNAME_EXTENSION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 54"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 780162 "ELEMNAME_EXTENSIONHANDLER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 63"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 780290 "ELEMNAME_FOREACH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 28"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 780418 "ELEMNAME_KEY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 31"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 780546 "ELEMNAME_IF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 36"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 780674 "ELEMNAME_IMPORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 26"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 780802 "ELEMNAME_INCLUDE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 27"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 780930 "ELEMNAME_CALLTEMPLATE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 781058 "ELEMNAME_PARAMVARIABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 41"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 781186 "ELEMNAME_NUMBER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 35"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 781314 "ELEMNAME_NSALIAS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 84"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 781442 "ELEMNAME_OTHERWISE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 39"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 781570 "ELEMNAME_PI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 58"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 781698 "ELEMNAME_PRESERVESPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 33"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 781826 "ELEMNAME_REMOVEATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 781954 "ELEMNAME_TEMPLATE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 19"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 782082 "ELEMNAME_SORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 64"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 782210 "ELEMNAME_STRIPSPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 782338 "ELEMNAME_STYLESHEET"
	class_attribute const_attribute public explicit_type "int"
	init_value " 25"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 782466 "ELEMNAME_TEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 42"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 782594 "ELEMNAME_VALUEOF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 782722 "ELEMNAME_WHEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 38"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 782850 "ELEMNAME_ROOT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 44"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 782978 "ELEMNAME_ANY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 45"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 783106 "ELEMNAME_ELEMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 46"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 783234 "ELEMNAME_TARGETELEMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 47"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 783362 "ELEMNAME_ATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 48"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 783490 "ELEMNAME_TARGETATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 49"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 783618 "ELEMNAME_URL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 52"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

 my own"
      end

      attribute 783746 "ELEMNAME_CALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 55"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

 my own"
      end

      attribute 783874 "ELEMNAME_FALLBACK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 57"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

 my own"
      end

      attribute 784002 "ELEMNAME_TARGETPI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 60"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

 my own"
      end

      attribute 784130 "ELEMNAME_TARGETCOMMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 61"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

 my own"
      end

      attribute 784258 "ELEMNAME_TARGETTEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 62"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

 my own"
      end

      attribute 784386 "ELEMNAME_CSSSTYLECONVERSION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 65"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

 my own"
      end

      attribute 784514 "ELEMNAME_COUNTER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 66"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 784642 "ELEMNAME_COUNTERS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 67"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 784770 "ELEMNAME_COUNTERINCREMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 68"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 784898 "ELEMNAME_COUNTERRESET"
	class_attribute const_attribute public explicit_type "int"
	init_value " 69"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 785026 "ELEMNAME_COUNTERSCOPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 71"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 785154 "ELEMNAME_APPLY_IMPORTS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 72"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 785282 "ELEMNAME_VARIABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 73"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 785410 "ELEMNAME_MESSAGE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 75"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 785538 "ELEMNAME_LOCALE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 76"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 785666 "ELEMNAME_LITERALRESULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 77"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 785794 "ELEMNAME_TEXTLITERALRESULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 78"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 785922 "ELEMNAME_EXTENSIONCALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 79"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 786050 "ELEMNAME_EXTENSIONDECL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 85"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 786178 "ELEMNAME_EXTENSIONSCRIPT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 86"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 786306 "ELEMNAME_OUTPUT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 80"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 786434 "ELEMNAME_COMPONENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 81"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      attribute 786562 "ELEMNAME_SCRIPT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 82"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "IDs for XSL element types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!
(It's a pity Java doesn't have a real Enumerated Mnemonic
datatype... or a C-like preprocessor in lieu thereof which
could be used to generate and maintain synch between these lists.)

"
      end

      classrelation 1549826 // ELEMNAME_ANCHOR_STRING (<unidirectional association>)
	relation 1549826 --->
	  a role_name "ELEMNAME_ANCHOR_STRING" init_value " \"anchor\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1549826 // ELEMNAME_ANCHOR_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1549954 // ELEMNAME_ANY_STRING (<unidirectional association>)
	relation 1549954 --->
	  a role_name "ELEMNAME_ANY_STRING" init_value " \"any\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

 pattern-by-example support"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1549954 // ELEMNAME_ANY_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1550082 // ELEMNAME_APPLY_IMPORTS_STRING (<unidirectional association>)
	relation 1550082 --->
	  a role_name "ELEMNAME_APPLY_IMPORTS_STRING" init_value " \"apply-imports\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1550082 // ELEMNAME_APPLY_IMPORTS_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1550210 // ELEMNAME_APPLY_TEMPLATES_STRING (<unidirectional association>)
	relation 1550210 --->
	  a role_name "ELEMNAME_APPLY_TEMPLATES_STRING" init_value " \"apply-templates\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1550210 // ELEMNAME_APPLY_TEMPLATES_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1550338 // ELEMNAME_ARG_STRING (<unidirectional association>)
	relation 1550338 --->
	  a role_name "ELEMNAME_ARG_STRING" init_value " \"arg\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1550338 // ELEMNAME_ARG_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1550466 // ELEMNAME_ATTRIBUTESET_STRING (<unidirectional association>)
	relation 1550466 --->
	  a role_name "ELEMNAME_ATTRIBUTESET_STRING" init_value " \"attribute-set\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1550466 // ELEMNAME_ATTRIBUTESET_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1550594 // ELEMNAME_ATTRIBUTE_STRING (<unidirectional association>)
	relation 1550594 --->
	  a role_name "ELEMNAME_ATTRIBUTE_STRING" init_value " \"attribute\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

 pattern-by-example support"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1550594 // ELEMNAME_ATTRIBUTE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1550722 // ELEMNAME_CALLTEMPLATEARG_STRING (<unidirectional association>)
	relation 1550722 --->
	  a role_name "ELEMNAME_CALLTEMPLATEARG_STRING" init_value " \"invoke-arg\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1550722 // ELEMNAME_CALLTEMPLATEARG_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1550850 // ELEMNAME_CALLTEMPLATE_STRING (<unidirectional association>)
	relation 1550850 --->
	  a role_name "ELEMNAME_CALLTEMPLATE_STRING" init_value " \"call-template\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1550850 // ELEMNAME_CALLTEMPLATE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1550978 // ELEMNAME_CALL_STRING (<unidirectional association>)
	relation 1550978 --->
	  a role_name "ELEMNAME_CALL_STRING" init_value " \"call\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1550978 // ELEMNAME_CALL_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1551106 // ELEMNAME_CHILDREN_STRING (<unidirectional association>)
	relation 1551106 --->
	  a role_name "ELEMNAME_CHILDREN_STRING" init_value " \"children\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1551106 // ELEMNAME_CHILDREN_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1551234 // ELEMNAME_CHOOSE_STRING (<unidirectional association>)
	relation 1551234 --->
	  a role_name "ELEMNAME_CHOOSE_STRING" init_value " \"choose\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1551234 // ELEMNAME_CHOOSE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1551362 // ELEMNAME_COMMENT_STRING (<unidirectional association>)
	relation 1551362 --->
	  a role_name "ELEMNAME_COMMENT_STRING" init_value " \"comment\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1551362 // ELEMNAME_COMMENT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1551490 // ELEMNAME_COMPONENT_STRING (<unidirectional association>)
	relation 1551490 --->
	  a role_name "ELEMNAME_COMPONENT_STRING" init_value " \"component\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1551490 // ELEMNAME_COMPONENT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1551618 // ELEMNAME_CONSTRUCT_STRING (<unidirectional association>)
	relation 1551618 --->
	  a role_name "ELEMNAME_CONSTRUCT_STRING" init_value " \"construct\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

 my own"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1551618 // ELEMNAME_CONSTRUCT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1551746 // ELEMNAME_CONTENTS_STRING (<unidirectional association>)
	relation 1551746 --->
	  a role_name "ELEMNAME_CONTENTS_STRING" init_value " \"contents\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1551746 // ELEMNAME_CONTENTS_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1551874 // ELEMNAME_COPY_OF_STRING (<unidirectional association>)
	relation 1551874 --->
	  a role_name "ELEMNAME_COPY_OF_STRING" init_value "\"copy-of\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1551874 // ELEMNAME_COPY_OF_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1552002 // ELEMNAME_COPY_STRING (<unidirectional association>)
	relation 1552002 --->
	  a role_name "ELEMNAME_COPY_STRING" init_value " \"copy\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1552002 // ELEMNAME_COPY_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1552130 // ELEMNAME_COUNTERINCREMENT_STRING (<unidirectional association>)
	relation 1552130 --->
	  a role_name "ELEMNAME_COUNTERINCREMENT_STRING" init_value " \"counter-increment\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1552130 // ELEMNAME_COUNTERINCREMENT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1552258 // ELEMNAME_COUNTERRESET_STRING (<unidirectional association>)
	relation 1552258 --->
	  a role_name "ELEMNAME_COUNTERRESET_STRING" init_value " \"counter-reset\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1552258 // ELEMNAME_COUNTERRESET_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1552386 // ELEMNAME_COUNTERSCOPE_STRING (<unidirectional association>)
	relation 1552386 --->
	  a role_name "ELEMNAME_COUNTERSCOPE_STRING" init_value " \"counter-scope\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1552386 // ELEMNAME_COUNTERSCOPE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1552514 // ELEMNAME_COUNTERS_STRING (<unidirectional association>)
	relation 1552514 --->
	  a role_name "ELEMNAME_COUNTERS_STRING" init_value " \"counters\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1552514 // ELEMNAME_COUNTERS_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1552642 // ELEMNAME_COUNTER_STRING (<unidirectional association>)
	relation 1552642 --->
	  a role_name "ELEMNAME_COUNTER_STRING" init_value " \"counter\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1552642 // ELEMNAME_COUNTER_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1552770 // ELEMNAME_CSSSTYLECONVERSION_STRING (<unidirectional association>)
	relation 1552770 --->
	  a role_name "ELEMNAME_CSSSTYLECONVERSION_STRING" init_value " \"css-style-conversion\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1552770 // ELEMNAME_CSSSTYLECONVERSION_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1552898 // ELEMNAME_DECIMALFORMAT_STRING (<unidirectional association>)
	relation 1552898 --->
	  a role_name "ELEMNAME_DECIMALFORMAT_STRING" init_value " \"decimal-format\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1552898 // ELEMNAME_DECIMALFORMAT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1553026 // ELEMNAME_DISPLAYIF_STRING (<unidirectional association>)
	relation 1553026 --->
	  a role_name "ELEMNAME_DISPLAYIF_STRING" init_value " \"display-if\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

 my own"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1553026 // ELEMNAME_DISPLAYIF_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1553154 // ELEMNAME_ELEMENT_STRING (<unidirectional association>)
	relation 1553154 --->
	  a role_name "ELEMNAME_ELEMENT_STRING" init_value " \"element\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

 pattern-by-example support"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1553154 // ELEMNAME_ELEMENT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1553282 // ELEMNAME_EMPTY_STRING (<unidirectional association>)
	relation 1553282 --->
	  a role_name "ELEMNAME_EMPTY_STRING" init_value " \"empty\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1553282 // ELEMNAME_EMPTY_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1553410 // ELEMNAME_EVAL_STRING (<unidirectional association>)
	relation 1553410 --->
	  a role_name "ELEMNAME_EVAL_STRING" init_value " \"eval\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1553410 // ELEMNAME_EVAL_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1553538 // ELEMNAME_EXPECTEDCHILDREN_STRING (<unidirectional association>)
	relation 1553538 --->
	  a role_name "ELEMNAME_EXPECTEDCHILDREN_STRING" init_value " \"expectedchildren\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1553538 // ELEMNAME_EXPECTEDCHILDREN_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1553666 // ELEMNAME_EXTENSIONHANDLER_STRING (<unidirectional association>)
	relation 1553666 --->
	  a role_name "ELEMNAME_EXTENSIONHANDLER_STRING" init_value " \"code-dispatcher\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1553666 // ELEMNAME_EXTENSIONHANDLER_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1553794 // ELEMNAME_EXTENSION_STRING (<unidirectional association>)
	relation 1553794 --->
	  a role_name "ELEMNAME_EXTENSION_STRING" init_value " \"functions\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1553794 // ELEMNAME_EXTENSION_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1553922 // ELEMNAME_FALLBACK_STRING (<unidirectional association>)
	relation 1553922 --->
	  a role_name "ELEMNAME_FALLBACK_STRING" init_value " \"fallback\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1553922 // ELEMNAME_FALLBACK_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1554050 // ELEMNAME_FOREACH_STRING (<unidirectional association>)
	relation 1554050 --->
	  a role_name "ELEMNAME_FOREACH_STRING" init_value " \"for-each\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1554050 // ELEMNAME_FOREACH_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1554178 // ELEMNAME_IF_STRING (<unidirectional association>)
	relation 1554178 --->
	  a role_name "ELEMNAME_IF_STRING" init_value " \"if\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1554178 // ELEMNAME_IF_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1554306 // ELEMNAME_IMPORT_STRING (<unidirectional association>)
	relation 1554306 --->
	  a role_name "ELEMNAME_IMPORT_STRING" init_value " \"import\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1554306 // ELEMNAME_IMPORT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1554434 // ELEMNAME_INCLUDE_STRING (<unidirectional association>)
	relation 1554434 --->
	  a role_name "ELEMNAME_INCLUDE_STRING" init_value " \"include\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1554434 // ELEMNAME_INCLUDE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1554562 // ELEMNAME_KEY_STRING (<unidirectional association>)
	relation 1554562 --->
	  a role_name "ELEMNAME_KEY_STRING" init_value " \"key\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1554562 // ELEMNAME_KEY_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1554690 // ELEMNAME_LOCALE_STRING (<unidirectional association>)
	relation 1554690 --->
	  a role_name "ELEMNAME_LOCALE_STRING" init_value " \"locale\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1554690 // ELEMNAME_LOCALE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1554818 // ELEMNAME_MESSAGE_STRING (<unidirectional association>)
	relation 1554818 --->
	  a role_name "ELEMNAME_MESSAGE_STRING" init_value " \"message\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1554818 // ELEMNAME_MESSAGE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1554946 // ELEMNAME_NSALIAS_STRING (<unidirectional association>)
	relation 1554946 --->
	  a role_name "ELEMNAME_NSALIAS_STRING" init_value " \"namespace-alias\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1554946 // ELEMNAME_NSALIAS_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1555074 // ELEMNAME_NUMBER_STRING (<unidirectional association>)
	relation 1555074 --->
	  a role_name "ELEMNAME_NUMBER_STRING" init_value " \"number\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1555074 // ELEMNAME_NUMBER_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1555202 // ELEMNAME_OTHERWISE_STRING (<unidirectional association>)
	relation 1555202 --->
	  a role_name "ELEMNAME_OTHERWISE_STRING" init_value " \"otherwise\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1555202 // ELEMNAME_OTHERWISE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1555330 // ELEMNAME_OUTPUT_STRING (<unidirectional association>)
	relation 1555330 --->
	  a role_name "ELEMNAME_OUTPUT_STRING" init_value " \"output\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1555330 // ELEMNAME_OUTPUT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1555458 // ELEMNAME_PARAMVARIABLE_STRING (<unidirectional association>)
	relation 1555458 --->
	  a role_name "ELEMNAME_PARAMVARIABLE_STRING" init_value " \"param\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1555458 // ELEMNAME_PARAMVARIABLE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1555586 // ELEMNAME_PI_OLD_STRING (<unidirectional association>)
	relation 1555586 --->
	  a role_name "ELEMNAME_PI_OLD_STRING" init_value " \"pi\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1555586 // ELEMNAME_PI_OLD_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1555714 // ELEMNAME_PI_STRING (<unidirectional association>)
	relation 1555714 --->
	  a role_name "ELEMNAME_PI_STRING" init_value " \"processing-instruction\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1555714 // ELEMNAME_PI_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1555842 // ELEMNAME_PRESERVESPACE_STRING (<unidirectional association>)
	relation 1555842 --->
	  a role_name "ELEMNAME_PRESERVESPACE_STRING" init_value " \"preserve-space\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1555842 // ELEMNAME_PRESERVESPACE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1555970 // ELEMNAME_ROOT_STRING (<unidirectional association>)
	relation 1555970 --->
	  a role_name "ELEMNAME_ROOT_STRING" init_value " \"root\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

 pattern-by-example support"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1555970 // ELEMNAME_ROOT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1556098 // ELEMNAME_SCRIPT_STRING (<unidirectional association>)
	relation 1556098 --->
	  a role_name "ELEMNAME_SCRIPT_STRING" init_value " \"script\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1556098 // ELEMNAME_SCRIPT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1556226 // ELEMNAME_SORT_STRING (<unidirectional association>)
	relation 1556226 --->
	  a role_name "ELEMNAME_SORT_STRING" init_value " \"sort\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1556226 // ELEMNAME_SORT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1556354 // ELEMNAME_STRIPSPACE_STRING (<unidirectional association>)
	relation 1556354 --->
	  a role_name "ELEMNAME_STRIPSPACE_STRING" init_value " \"strip-space\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1556354 // ELEMNAME_STRIPSPACE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1556482 // ELEMNAME_STYLESHEET_STRING (<unidirectional association>)
	relation 1556482 --->
	  a role_name "ELEMNAME_STYLESHEET_STRING" init_value " \"stylesheet\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1556482 // ELEMNAME_STYLESHEET_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1556610 // ELEMNAME_TARGETATTRIBUTE_STRING (<unidirectional association>)
	relation 1556610 --->
	  a role_name "ELEMNAME_TARGETATTRIBUTE_STRING" init_value " \"target-attribute\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

 pattern-by-example support"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1556610 // ELEMNAME_TARGETATTRIBUTE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1556738 // ELEMNAME_TARGETCOMMENT_STRING (<unidirectional association>)
	relation 1556738 --->
	  a role_name "ELEMNAME_TARGETCOMMENT_STRING" init_value " \"target-comment\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1556738 // ELEMNAME_TARGETCOMMENT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1556866 // ELEMNAME_TARGETELEMENT_STRING (<unidirectional association>)
	relation 1556866 --->
	  a role_name "ELEMNAME_TARGETELEMENT_STRING" init_value " \"target-element\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

 pattern-by-example support"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1556866 // ELEMNAME_TARGETELEMENT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1556994 // ELEMNAME_TARGETPI_STRING (<unidirectional association>)
	relation 1556994 --->
	  a role_name "ELEMNAME_TARGETPI_STRING" init_value " \"target-pi\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1556994 // ELEMNAME_TARGETPI_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1557122 // ELEMNAME_TARGETTEXT_STRING (<unidirectional association>)
	relation 1557122 --->
	  a role_name "ELEMNAME_TARGETTEXT_STRING" init_value " \"target-text\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1557122 // ELEMNAME_TARGETTEXT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1557250 // ELEMNAME_TEMPLATE_STRING (<unidirectional association>)
	relation 1557250 --->
	  a role_name "ELEMNAME_TEMPLATE_STRING" init_value " \"template\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1557250 // ELEMNAME_TEMPLATE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1557378 // ELEMNAME_TEXT_STRING (<unidirectional association>)
	relation 1557378 --->
	  a role_name "ELEMNAME_TEXT_STRING" init_value " \"text\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1557378 // ELEMNAME_TEXT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1557506 // ELEMNAME_TRANSFORM_STRING (<unidirectional association>)
	relation 1557506 --->
	  a role_name "ELEMNAME_TRANSFORM_STRING" init_value " \"transform\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1557506 // ELEMNAME_TRANSFORM_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1557634 // ELEMNAME_URL_STRING (<unidirectional association>)
	relation 1557634 --->
	  a role_name "ELEMNAME_URL_STRING" init_value " \"uri\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

 pattern-by-example support"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1557634 // ELEMNAME_URL_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1557762 // ELEMNAME_USE_STRING (<unidirectional association>)
	relation 1557762 --->
	  a role_name "ELEMNAME_USE_STRING" init_value " \"use\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1557762 // ELEMNAME_USE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1557890 // ELEMNAME_VALUEOF_STRING (<unidirectional association>)
	relation 1557890 --->
	  a role_name "ELEMNAME_VALUEOF_STRING" init_value " \"value-of\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1557890 // ELEMNAME_VALUEOF_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1558018 // ELEMNAME_VARIABLE_STRING (<unidirectional association>)
	relation 1558018 --->
	  a role_name "ELEMNAME_VARIABLE_STRING" init_value " \"variable\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1558018 // ELEMNAME_VARIABLE_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1558146 // ELEMNAME_WHEN_STRING (<unidirectional association>)
	relation 1558146 --->
	  a role_name "ELEMNAME_WHEN_STRING" init_value " \"when\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1558146 // ELEMNAME_WHEN_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1558274 // ELEMNAME_WITHPARAM_STRING (<unidirectional association>)
	relation 1558274 --->
	  a role_name "ELEMNAME_WITHPARAM_STRING" init_value " \"with-param\"" class_relation const_relation public
	    comment " Next free number: 90 (88 and 89 used for EXSLT elements);

Literals for XSL element names.  Note that there are more
names than IDs, because some names map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1558274 // ELEMNAME_WITHPARAM_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1558402 // EXSLT_ELEMNAME_FUNCTION_STRING (<unidirectional association>)
	relation 1558402 --->
	  a role_name "EXSLT_ELEMNAME_FUNCTION_STRING" init_value " \"function\"" class_relation const_relation public
	    comment "
Literals for EXSLT function elements.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1558402 // EXSLT_ELEMNAME_FUNCTION_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1558530 // EXSLT_ELEMNAME_FUNCRESULT_STRING (<unidirectional association>)
	relation 1558530 --->
	  a role_name "EXSLT_ELEMNAME_FUNCRESULT_STRING" init_value " \"result\"" class_relation const_relation public
	    comment "
Literals for EXSLT function elements.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1558530 // EXSLT_ELEMNAME_FUNCRESULT_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 786690 "EXSLT_ELEMNAME_FUNCTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 88"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 786818 "EXSLT_ELEMNAME_FUNCRESULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 89"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1558658 // ATTRNAME_AMOUNT (<unidirectional association>)
	relation 1558658 --->
	  a role_name "ATTRNAME_AMOUNT" init_value " \"amount\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1558658 // ATTRNAME_AMOUNT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1558786 // ATTRNAME_ANCESTOR (<unidirectional association>)
	relation 1558786 --->
	  a role_name "ATTRNAME_ANCESTOR" init_value " \"ancestor\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1558786 // ATTRNAME_ANCESTOR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1558914 // ATTRNAME_ARCHIVE (<unidirectional association>)
	relation 1558914 --->
	  a role_name "ATTRNAME_ARCHIVE" init_value " \"archive\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1558914 // ATTRNAME_ARCHIVE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1559042 // ATTRNAME_ATTRIBUTE (<unidirectional association>)
	relation 1559042 --->
	  a role_name "ATTRNAME_ATTRIBUTE" init_value " \"attribute\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1559042 // ATTRNAME_ATTRIBUTE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1559170 // ATTRNAME_ATTRIBUTE_SET (<unidirectional association>)
	relation 1559170 --->
	  a role_name "ATTRNAME_ATTRIBUTE_SET" init_value " \"attribute-set\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1559170 // ATTRNAME_ATTRIBUTE_SET (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1559298 // ATTRNAME_CASEORDER (<unidirectional association>)
	relation 1559298 --->
	  a role_name "ATTRNAME_CASEORDER" init_value " \"case-order\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1559298 // ATTRNAME_CASEORDER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1559426 // ATTRNAME_CLASS (<unidirectional association>)
	relation 1559426 --->
	  a role_name "ATTRNAME_CLASS" init_value " \"class\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1559426 // ATTRNAME_CLASS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1559554 // ATTRNAME_CLASSID (<unidirectional association>)
	relation 1559554 --->
	  a role_name "ATTRNAME_CLASSID" init_value " \"classid\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1559554 // ATTRNAME_CLASSID (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1559682 // ATTRNAME_CODEBASE (<unidirectional association>)
	relation 1559682 --->
	  a role_name "ATTRNAME_CODEBASE" init_value " \"codebase\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1559682 // ATTRNAME_CODEBASE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1559810 // ATTRNAME_CODETYPE (<unidirectional association>)
	relation 1559810 --->
	  a role_name "ATTRNAME_CODETYPE" init_value " \"type\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1559810 // ATTRNAME_CODETYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1559938 // ATTRNAME_CONDITION (<unidirectional association>)
	relation 1559938 --->
	  a role_name "ATTRNAME_CONDITION" init_value " \"condition\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1559938 // ATTRNAME_CONDITION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1560066 // ATTRNAME_COPYTYPE (<unidirectional association>)
	relation 1560066 --->
	  a role_name "ATTRNAME_COPYTYPE" init_value " \"copy-type\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1560066 // ATTRNAME_COPYTYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1560194 // ATTRNAME_COUNT (<unidirectional association>)
	relation 1560194 --->
	  a role_name "ATTRNAME_COUNT" init_value " \"count\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1560194 // ATTRNAME_COUNT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1560322 // ATTRNAME_DATATYPE (<unidirectional association>)
	relation 1560322 --->
	  a role_name "ATTRNAME_DATATYPE" init_value " \"data-type\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1560322 // ATTRNAME_DATATYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1560450 // ATTRNAME_DECIMALSEPARATOR (<unidirectional association>)
	relation 1560450 --->
	  a role_name "ATTRNAME_DECIMALSEPARATOR" init_value " \"decimal-separator\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1560450 // ATTRNAME_DECIMALSEPARATOR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1560578 // ATTRNAME_DEFAULT (<unidirectional association>)
	relation 1560578 --->
	  a role_name "ATTRNAME_DEFAULT" init_value " \"default\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1560578 // ATTRNAME_DEFAULT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1560706 // ATTRNAME_DEFAULTSPACE (<unidirectional association>)
	relation 1560706 --->
	  a role_name "ATTRNAME_DEFAULTSPACE" init_value " \"default-space\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1560706 // ATTRNAME_DEFAULTSPACE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1560834 // ATTRNAME_DEPTH (<unidirectional association>)
	relation 1560834 --->
	  a role_name "ATTRNAME_DEPTH" init_value " \"with-children\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1560834 // ATTRNAME_DEPTH (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1560962 // ATTRNAME_DIGIT (<unidirectional association>)
	relation 1560962 --->
	  a role_name "ATTRNAME_DIGIT" init_value " \"digit\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1560962 // ATTRNAME_DIGIT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1561090 // ATTRNAME_DIGITGROUPSEP (<unidirectional association>)
	relation 1561090 --->
	  a role_name "ATTRNAME_DIGITGROUPSEP" init_value " \"digit-group-sep\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1561090 // ATTRNAME_DIGITGROUPSEP (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1561218 // ATTRNAME_DISABLE_OUTPUT_ESCAPING (<unidirectional association>)
	relation 1561218 --->
	  a role_name "ATTRNAME_DISABLE_OUTPUT_ESCAPING" init_value " \"disable-output-escaping\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1561218 // ATTRNAME_DISABLE_OUTPUT_ESCAPING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1561346 // ATTRNAME_ELEMENT (<unidirectional association>)
	relation 1561346 --->
	  a role_name "ATTRNAME_ELEMENT" init_value " \"element\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1561346 // ATTRNAME_ELEMENT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1561474 // ATTRNAME_ELEMENTS (<unidirectional association>)
	relation 1561474 --->
	  a role_name "ATTRNAME_ELEMENTS" init_value " \"elements\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1561474 // ATTRNAME_ELEMENTS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1561602 // ATTRNAME_EXCLUDE_RESULT_PREFIXES (<unidirectional association>)
	relation 1561602 --->
	  a role_name "ATTRNAME_EXCLUDE_RESULT_PREFIXES" init_value "\"exclude-result-prefixes\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1561602 // ATTRNAME_EXCLUDE_RESULT_PREFIXES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1561730 // ATTRNAME_EXPR (<unidirectional association>)
	relation 1561730 --->
	  a role_name "ATTRNAME_EXPR" init_value " \"expr\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1561730 // ATTRNAME_EXPR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1561858 // ATTRNAME_EXTENSIONELEMENTPREFIXES (<unidirectional association>)
	relation 1561858 --->
	  a role_name "ATTRNAME_EXTENSIONELEMENTPREFIXES" init_value " \"extension-element-prefixes\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1561858 // ATTRNAME_EXTENSIONELEMENTPREFIXES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1561986 // ATTRNAME_FORMAT (<unidirectional association>)
	relation 1561986 --->
	  a role_name "ATTRNAME_FORMAT" init_value " \"format\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1561986 // ATTRNAME_FORMAT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1562114 // ATTRNAME_FROM (<unidirectional association>)
	relation 1562114 --->
	  a role_name "ATTRNAME_FROM" init_value " \"from\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1562114 // ATTRNAME_FROM (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1562242 // ATTRNAME_GROUPINGSEPARATOR (<unidirectional association>)
	relation 1562242 --->
	  a role_name "ATTRNAME_GROUPINGSEPARATOR" init_value " \"grouping-separator\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1562242 // ATTRNAME_GROUPINGSEPARATOR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1562370 // ATTRNAME_GROUPINGSIZE (<unidirectional association>)
	relation 1562370 --->
	  a role_name "ATTRNAME_GROUPINGSIZE" init_value " \"grouping-size\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1562370 // ATTRNAME_GROUPINGSIZE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1562498 // ATTRNAME_HREF (<unidirectional association>)
	relation 1562498 --->
	  a role_name "ATTRNAME_HREF" init_value " \"href\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1562498 // ATTRNAME_HREF (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1562626 // ATTRNAME_ID (<unidirectional association>)
	relation 1562626 --->
	  a role_name "ATTRNAME_ID" init_value " \"id\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1562626 // ATTRNAME_ID (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1562754 // ATTRNAME_IMPORTANCE (<unidirectional association>)
	relation 1562754 --->
	  a role_name "ATTRNAME_IMPORTANCE" init_value " \"importance\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1562754 // ATTRNAME_IMPORTANCE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1562882 // ATTRNAME_INDENTRESULT (<unidirectional association>)
	relation 1562882 --->
	  a role_name "ATTRNAME_INDENTRESULT" init_value " \"indent-result\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1562882 // ATTRNAME_INDENTRESULT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1563010 // ATTRNAME_INFINITY (<unidirectional association>)
	relation 1563010 --->
	  a role_name "ATTRNAME_INFINITY" init_value " \"infinity\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1563010 // ATTRNAME_INFINITY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1563138 // ATTRNAME_LANG (<unidirectional association>)
	relation 1563138 --->
	  a role_name "ATTRNAME_LANG" init_value " \"lang\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1563138 // ATTRNAME_LANG (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1563266 // ATTRNAME_LETTERVALUE (<unidirectional association>)
	relation 1563266 --->
	  a role_name "ATTRNAME_LETTERVALUE" init_value " \"letter-value\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1563266 // ATTRNAME_LETTERVALUE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1563394 // ATTRNAME_LEVEL (<unidirectional association>)
	relation 1563394 --->
	  a role_name "ATTRNAME_LEVEL" init_value " \"level\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1563394 // ATTRNAME_LEVEL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1563522 // ATTRNAME_MATCH (<unidirectional association>)
	relation 1563522 --->
	  a role_name "ATTRNAME_MATCH" init_value " \"match\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1563522 // ATTRNAME_MATCH (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1563650 // ATTRNAME_METHOD (<unidirectional association>)
	relation 1563650 --->
	  a role_name "ATTRNAME_METHOD" init_value " \"calls\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1563650 // ATTRNAME_METHOD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1563778 // ATTRNAME_MINUSSIGN (<unidirectional association>)
	relation 1563778 --->
	  a role_name "ATTRNAME_MINUSSIGN" init_value " \"minus-sign\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1563778 // ATTRNAME_MINUSSIGN (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1563906 // ATTRNAME_MODE (<unidirectional association>)
	relation 1563906 --->
	  a role_name "ATTRNAME_MODE" init_value " \"mode\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1563906 // ATTRNAME_MODE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1564034 // ATTRNAME_NAME (<unidirectional association>)
	relation 1564034 --->
	  a role_name "ATTRNAME_NAME" init_value " \"name\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1564034 // ATTRNAME_NAME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1564162 // ATTRNAME_NAMESPACE (<unidirectional association>)
	relation 1564162 --->
	  a role_name "ATTRNAME_NAMESPACE" init_value " \"namespace\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1564162 // ATTRNAME_NAMESPACE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1564290 // ATTRNAME_NAN (<unidirectional association>)
	relation 1564290 --->
	  a role_name "ATTRNAME_NAN" init_value " \"NaN\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1564290 // ATTRNAME_NAN (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1564418 // ATTRNAME_NDIGITSPERGROUP (<unidirectional association>)
	relation 1564418 --->
	  a role_name "ATTRNAME_NDIGITSPERGROUP" init_value " \"n-digits-per-group\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1564418 // ATTRNAME_NDIGITSPERGROUP (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1564546 // ATTRNAME_NS (<unidirectional association>)
	relation 1564546 --->
	  a role_name "ATTRNAME_NS" init_value " \"ns\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1564546 // ATTRNAME_NS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1564674 // ATTRNAME_ONLY (<unidirectional association>)
	relation 1564674 --->
	  a role_name "ATTRNAME_ONLY" init_value " \"only\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1564674 // ATTRNAME_ONLY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1564802 // ATTRNAME_ORDER (<unidirectional association>)
	relation 1564802 --->
	  a role_name "ATTRNAME_ORDER" init_value " \"order\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1564802 // ATTRNAME_ORDER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1564930 // ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS (<unidirectional association>)
	relation 1564930 --->
	  a role_name "ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS" init_value " \"cdata-section-elements\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1564930 // ATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1565058 // ATTRNAME_OUTPUT_DOCTYPE_PUBLIC (<unidirectional association>)
	relation 1565058 --->
	  a role_name "ATTRNAME_OUTPUT_DOCTYPE_PUBLIC" init_value " \"doctype-public\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1565058 // ATTRNAME_OUTPUT_DOCTYPE_PUBLIC (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1565186 // ATTRNAME_OUTPUT_DOCTYPE_SYSTEM (<unidirectional association>)
	relation 1565186 --->
	  a role_name "ATTRNAME_OUTPUT_DOCTYPE_SYSTEM" init_value " \"doctype-system\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1565186 // ATTRNAME_OUTPUT_DOCTYPE_SYSTEM (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1565314 // ATTRNAME_OUTPUT_ENCODING (<unidirectional association>)
	relation 1565314 --->
	  a role_name "ATTRNAME_OUTPUT_ENCODING" init_value " \"encoding\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1565314 // ATTRNAME_OUTPUT_ENCODING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1565442 // ATTRNAME_OUTPUT_INDENT (<unidirectional association>)
	relation 1565442 --->
	  a role_name "ATTRNAME_OUTPUT_INDENT" init_value " \"indent\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1565442 // ATTRNAME_OUTPUT_INDENT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1565570 // ATTRNAME_OUTPUT_MEDIATYPE (<unidirectional association>)
	relation 1565570 --->
	  a role_name "ATTRNAME_OUTPUT_MEDIATYPE" init_value " \"media-type\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1565570 // ATTRNAME_OUTPUT_MEDIATYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1565698 // ATTRNAME_OUTPUT_METHOD (<unidirectional association>)
	relation 1565698 --->
	  a role_name "ATTRNAME_OUTPUT_METHOD" init_value " \"method\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

 qname,"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1565698 // ATTRNAME_OUTPUT_METHOD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1565826 // ATTRNAME_OUTPUT_OMITXMLDECL (<unidirectional association>)
	relation 1565826 --->
	  a role_name "ATTRNAME_OUTPUT_OMITXMLDECL" init_value " \"omit-xml-declaration\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1565826 // ATTRNAME_OUTPUT_OMITXMLDECL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1565954 // ATTRNAME_OUTPUT_STANDALONE (<unidirectional association>)
	relation 1565954 --->
	  a role_name "ATTRNAME_OUTPUT_STANDALONE" init_value " \"standalone\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1565954 // ATTRNAME_OUTPUT_STANDALONE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1566082 // ATTRNAME_OUTPUT_VERSION (<unidirectional association>)
	relation 1566082 --->
	  a role_name "ATTRNAME_OUTPUT_VERSION" init_value " \"version\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1566082 // ATTRNAME_OUTPUT_VERSION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1566210 // ATTRNAME_PATTERNSEPARATOR (<unidirectional association>)
	relation 1566210 --->
	  a role_name "ATTRNAME_PATTERNSEPARATOR" init_value " \"pattern-separator\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1566210 // ATTRNAME_PATTERNSEPARATOR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1566338 // ATTRNAME_PERCENT (<unidirectional association>)
	relation 1566338 --->
	  a role_name "ATTRNAME_PERCENT" init_value " \"percent\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1566338 // ATTRNAME_PERCENT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1566466 // ATTRNAME_PERMILLE (<unidirectional association>)
	relation 1566466 --->
	  a role_name "ATTRNAME_PERMILLE" init_value " \"per-mille\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1566466 // ATTRNAME_PERMILLE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1566594 // ATTRNAME_PRIORITY (<unidirectional association>)
	relation 1566594 --->
	  a role_name "ATTRNAME_PRIORITY" init_value " \"priority\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1566594 // ATTRNAME_PRIORITY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1566722 // ATTRNAME_REFID (<unidirectional association>)
	relation 1566722 --->
	  a role_name "ATTRNAME_REFID" init_value " \"refID\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1566722 // ATTRNAME_REFID (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1566850 // ATTRNAME_RESULTNS (<unidirectional association>)
	relation 1566850 --->
	  a role_name "ATTRNAME_RESULTNS" init_value " \"result-ns\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1566850 // ATTRNAME_RESULTNS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1566978 // ATTRNAME_RESULT_PREFIX (<unidirectional association>)
	relation 1566978 --->
	  a role_name "ATTRNAME_RESULT_PREFIX" init_value " \"result-prefix\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1566978 // ATTRNAME_RESULT_PREFIX (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1567106 // ATTRNAME_SELECT (<unidirectional association>)
	relation 1567106 --->
	  a role_name "ATTRNAME_SELECT" init_value " \"select\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1567106 // ATTRNAME_SELECT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1567234 // ATTRNAME_SEQUENCESRC (<unidirectional association>)
	relation 1567234 --->
	  a role_name "ATTRNAME_SEQUENCESRC" init_value " \"sequence-src\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1567234 // ATTRNAME_SEQUENCESRC (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1567362 // ATTRNAME_STYLE (<unidirectional association>)
	relation 1567362 --->
	  a role_name "ATTRNAME_STYLE" init_value " \"style\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1567362 // ATTRNAME_STYLE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1567490 // ATTRNAME_STYLESHEET_PREFIX (<unidirectional association>)
	relation 1567490 --->
	  a role_name "ATTRNAME_STYLESHEET_PREFIX" init_value " \"stylesheet-prefix\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1567490 // ATTRNAME_STYLESHEET_PREFIX (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1567618 // ATTRNAME_TERMINATE (<unidirectional association>)
	relation 1567618 --->
	  a role_name "ATTRNAME_TERMINATE" init_value " \"terminate\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1567618 // ATTRNAME_TERMINATE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1567746 // ATTRNAME_TEST (<unidirectional association>)
	relation 1567746 --->
	  a role_name "ATTRNAME_TEST" init_value " \"test\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1567746 // ATTRNAME_TEST (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1567874 // ATTRNAME_TOSTRING (<unidirectional association>)
	relation 1567874 --->
	  a role_name "ATTRNAME_TOSTRING" init_value " \"to-string\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1567874 // ATTRNAME_TOSTRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1568002 // ATTRNAME_TYPE (<unidirectional association>)
	relation 1568002 --->
	  a role_name "ATTRNAME_TYPE" init_value " \"type\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1568002 // ATTRNAME_TYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1568130 // ATTRNAME_USE (<unidirectional association>)
	relation 1568130 --->
	  a role_name "ATTRNAME_USE" init_value " \"use\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1568130 // ATTRNAME_USE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1568258 // ATTRNAME_USEATTRIBUTESETS (<unidirectional association>)
	relation 1568258 --->
	  a role_name "ATTRNAME_USEATTRIBUTESETS" init_value " \"use-attribute-sets\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1568258 // ATTRNAME_USEATTRIBUTESETS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1568386 // ATTRNAME_VALUE (<unidirectional association>)
	relation 1568386 --->
	  a role_name "ATTRNAME_VALUE" init_value " \"value\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1568386 // ATTRNAME_VALUE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1568514 // ATTRNAME_VERSION (<unidirectional association>)
	relation 1568514 --->
	  a role_name "ATTRNAME_VERSION" init_value " \"version\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1568514 // ATTRNAME_VERSION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1568642 // ATTRNAME_XMLNS (<unidirectional association>)
	relation 1568642 --->
	  a role_name "ATTRNAME_XMLNS" init_value " \"xmlns:\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

 namespace declaration prefix -- NOT an attribute by itself"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1568642 // ATTRNAME_XMLNS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1568770 // ATTRNAME_XMLNSDEF (<unidirectional association>)
	relation 1568770 --->
	  a role_name "ATTRNAME_XMLNSDEF" init_value " \"xmlns\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

 default namespace"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1568770 // ATTRNAME_XMLNSDEF (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1568898 // ATTRNAME_XMLSPACE (<unidirectional association>)
	relation 1568898 --->
	  a role_name "ATTRNAME_XMLSPACE" init_value " \"xml:space\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1568898 // ATTRNAME_XMLSPACE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1569026 // ATTRNAME_ZERODIGIT (<unidirectional association>)
	relation 1569026 --->
	  a role_name "ATTRNAME_ZERODIGIT" init_value " \"zero-digit\"" class_relation const_relation public
	    comment "
Literals for XSL attribute names.  Note that there may be more
names than IDs, because some names may map to the same ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1569026 // ATTRNAME_ZERODIGIT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 786946 "TATTRNAME_OUTPUT_METHOD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 787074 "TATTRNAME_AMOUNT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 787202 "TATTRNAME_ANCESTOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 787330 "TATTRNAME_ARCHIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 787458 "TATTRNAME_ATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 787586 "TATTRNAME_ATTRIBUTE_SET"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 787714 "TATTRNAME_CASEORDER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 787842 "TATTRNAME_CLASS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 787970 "TATTRNAME_CLASSID"
	class_attribute const_attribute public explicit_type "int"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 788098 "TATTRNAME_CODEBASE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 788226 "TATTRNAME_CODETYPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 788354 "TATTRNAME_CONDITION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 788482 "TATTRNAME_COPYTYPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 788610 "TATTRNAME_COUNT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 788738 "TATTRNAME_DATATYPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 788866 "TATTRNAME_DEFAULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 788994 "TATTRNAME_DEFAULTSPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 789122 "TATTRNAME_DEPTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 789250 "TATTRNAME_DIGITGROUPSEP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 19"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 789378 "TATTRNAME_DISABLE_OUTPUT_ESCAPING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 789506 "TATTRNAME_ELEMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 21"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 789634 "TATTRNAME_ELEMENTS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 22"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 789762 "TATTRNAME_EXPR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 23"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 789890 "TATTRNAME_EXTENSIONELEMENTPREFIXES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 24"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 790018 "TATTRNAME_FORMAT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 25"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 790146 "TATTRNAME_FROM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 26"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 790274 "TATTRNAME_GROUPINGSEPARATOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 27"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 790402 "TATTRNAME_GROUPINGSIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 28"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 790530 "TATTRNAME_HREF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 29"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 790658 "TATTRNAME_ID"
	class_attribute const_attribute public explicit_type "int"
	init_value " 30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 790786 "TATTRNAME_IMPORTANCE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 31"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 790914 "TATTRNAME_INDENTRESULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 791042 "TATTRNAME_LANG"
	class_attribute const_attribute public explicit_type "int"
	init_value " 33"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 791170 "TATTRNAME_LETTERVALUE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 34"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 791298 "TATTRNAME_LEVEL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 35"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 791426 "TATTRNAME_MATCH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 36"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 791554 "TATTRNAME_METHOD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 37"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 791682 "TATTRNAME_MODE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 38"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 791810 "TATTRNAME_NAME"
	class_attribute const_attribute public explicit_type "int"
	init_value " 39"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 791938 "TATTRNAME_NAMESPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 40"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 792066 "TATTRNAME_NDIGITSPERGROUP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 41"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 792194 "TATTRNAME_NS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 42"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 792322 "TATTRNAME_ONLY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 43"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 792450 "TATTRNAME_ORDER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 44"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 792578 "TATTRNAME_OUTPUT_CDATA_SECTION_ELEMENTS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 45"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 792706 "TATTRNAME_OUTPUT_DOCTYPE_PUBLIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 46"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 792834 "TATTRNAME_OUTPUT_DOCTYPE_SYSTEM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 47"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 792962 "TATTRNAME_OUTPUT_ENCODING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 48"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 793090 "TATTRNAME_OUTPUT_INDENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 49"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 793218 "TATTRNAME_OUTPUT_MEDIATYPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 50"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 793346 "TATTRNAME_OUTPUT_STANDALONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 51"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 793474 "TATTRNAME_OUTPUT_VERSION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 52"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 793602 "TATTRNAME_OUTPUT_OMITXMLDECL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 53"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 793730 "TATTRNAME_PRIORITY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 54"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 793858 "TATTRNAME_REFID"
	class_attribute const_attribute public explicit_type "int"
	init_value " 55"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 793986 "TATTRNAME_RESULTNS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 56"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 794114 "TATTRNAME_SELECT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 57"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 794242 "TATTRNAME_SEQUENCESRC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 58"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 794370 "TATTRNAME_STYLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 59"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 794498 "TATTRNAME_TEST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 60"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 794626 "TATTRNAME_TOSTRING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 61"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 794754 "TATTRNAME_TYPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 62"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 794882 "TATTRNAME_USE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 63"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 795010 "TATTRNAME_USEATTRIBUTESETS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 64"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 795138 "TATTRNAME_VALUE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 65"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 795266 "TATTRNAME_XMLNSDEF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 66"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 795394 "TATTRNAME_XMLNS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 67"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 795522 "TATTRNAME_XMLSPACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 68"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      attribute 795650 "TATTRNAME_EXCLUDE_RESULT_PREFIXES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 69"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " IDs for XSL attribute types. These are associated
with the string literals in the TransformerImpl class.
Don't change the numbers. NOTE THAT THESE ARE NOT IN
ALPHABETICAL ORDER!

"
      end

      classrelation 1569154 // ATTRVAL_OUTPUT_METHOD_HTML (<unidirectional association>)
	relation 1569154 --->
	  a role_name "ATTRVAL_OUTPUT_METHOD_HTML" init_value " \"html\"" class_relation const_relation public
	    comment " Mnemonics for the possible values of the xsl:output element's
method= attribute:
<ul>
<li>ATTRVAL_OUTPUT_METHOD_XML = Use an XML formatter to
produce the output document (basic XSLT operation).</li>
<li>ATTRVAL_OUTPUT_METHOD_HTML: Use an HTML formatter to
produce the output document. When generating HTML documents,
this may yield better results; it does things like escaping
characters in href attributes.</li>
</li>ATTRVAL_OUTPUT_METHOD_TEXT:  Use a Text formatter to
produce the output document. Generally the right choice if your
stylesheet wants to take over _all_ the details of formatting,
most often when producing something that isn't an XML or HTML
document.</li>
</ul>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1569154 // ATTRVAL_OUTPUT_METHOD_HTML (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1569282 // ATTRVAL_OUTPUT_METHOD_XML (<unidirectional association>)
	relation 1569282 --->
	  a role_name "ATTRVAL_OUTPUT_METHOD_XML" init_value " \"xml\"" class_relation const_relation public
	    comment " Mnemonics for the possible values of the xsl:output element's
method= attribute:
<ul>
<li>ATTRVAL_OUTPUT_METHOD_XML = Use an XML formatter to
produce the output document (basic XSLT operation).</li>
<li>ATTRVAL_OUTPUT_METHOD_HTML: Use an HTML formatter to
produce the output document. When generating HTML documents,
this may yield better results; it does things like escaping
characters in href attributes.</li>
</li>ATTRVAL_OUTPUT_METHOD_TEXT:  Use a Text formatter to
produce the output document. Generally the right choice if your
stylesheet wants to take over _all_ the details of formatting,
most often when producing something that isn't an XML or HTML
document.</li>
</ul>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1569282 // ATTRVAL_OUTPUT_METHOD_XML (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1569410 // ATTRVAL_OUTPUT_METHOD_TEXT (<unidirectional association>)
	relation 1569410 --->
	  a role_name "ATTRVAL_OUTPUT_METHOD_TEXT" init_value " \"text\"" class_relation const_relation public
	    comment " Mnemonics for the possible values of the xsl:output element's
method= attribute:
<ul>
<li>ATTRVAL_OUTPUT_METHOD_XML = Use an XML formatter to
produce the output document (basic XSLT operation).</li>
<li>ATTRVAL_OUTPUT_METHOD_HTML: Use an HTML formatter to
produce the output document. When generating HTML documents,
this may yield better results; it does things like escaping
characters in href attributes.</li>
</li>ATTRVAL_OUTPUT_METHOD_TEXT:  Use a Text formatter to
produce the output document. Generally the right choice if your
stylesheet wants to take over _all_ the details of formatting,
most often when producing something that isn't an XML or HTML
document.</li>
</ul>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1569410 // ATTRVAL_OUTPUT_METHOD_TEXT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 795778 "ATTRVAL_PRESERVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " For space-att
"
      end

      attribute 795906 "ATTRVAL_STRIP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " For space-att
"
      end

      attribute 796034 "ATTRVAL_YES"
	class_attribute const_attribute public explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " For indent-result          
"
      end

      attribute 796162 "ATTRVAL_NO"
	class_attribute const_attribute public explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " For indent-result          
"
      end

      classrelation 1569538 // ATTRVAL_ALPHABETIC (<unidirectional association>)
	relation 1569538 --->
	  a role_name "ATTRVAL_ALPHABETIC" init_value " \"alphabetic\"" class_relation const_relation public
	    comment " For letter-value attribute (part of conversion attributes).          
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1569538 // ATTRVAL_ALPHABETIC (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1569666 // ATTRVAL_OTHER (<unidirectional association>)
	relation 1569666 --->
	  a role_name "ATTRVAL_OTHER" init_value " \"other\"" class_relation const_relation public
	    comment " For letter-value attribute (part of conversion attributes).          
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1569666 // ATTRVAL_OTHER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1569794 // ATTRVAL_TRADITIONAL (<unidirectional association>)
	relation 1569794 --->
	  a role_name "ATTRVAL_TRADITIONAL" init_value " \"traditional\"" class_relation const_relation public
	    comment " For letter-value attribute (part of conversion attributes).          
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1569794 // ATTRVAL_TRADITIONAL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1569922 // ATTRVAL_SINGLE (<unidirectional association>)
	relation 1569922 --->
	  a role_name "ATTRVAL_SINGLE" init_value " \"single\"" class_relation const_relation public
	    comment " For level attribute in xsl:number.          
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1569922 // ATTRVAL_SINGLE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1570050 // ATTRVAL_MULTI (<unidirectional association>)
	relation 1570050 --->
	  a role_name "ATTRVAL_MULTI" init_value " \"multiple\"" class_relation const_relation public
	    comment " For level attribute in xsl:number.          
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1570050 // ATTRVAL_MULTI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1570178 // ATTRVAL_ANY (<unidirectional association>)
	relation 1570178 --->
	  a role_name "ATTRVAL_ANY" init_value " \"any\"" class_relation const_relation public
	    comment " For level attribute in xsl:number.          
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1570178 // ATTRVAL_ANY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1570306 // ATTRVAL_DEFAULT_PREFIX (<unidirectional association>)
	relation 1570306 --->
	  a role_name "ATTRVAL_DEFAULT_PREFIX" init_value " \"#default\"" class_relation const_relation public
	    comment " For Stylesheet-prefix and result-prefix in xsl:namespace-alias          
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1570306 // ATTRVAL_DEFAULT_PREFIX (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 796290 "NUMBERLETTER_ALPHABETIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivalents for above        
"
      end

      attribute 796418 "NUMBERLETTER_TRADITIONAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivalents for above        
"
      end

      attribute 796546 "NUMBERLEVEL_SINGLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivelents for above        
"
      end

      attribute 796674 "NUMBERLEVEL_MULTI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivelents for above        
"
      end

      attribute 796802 "NUMBERLEVEL_ANY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivelents for above        
"
      end

      attribute 796930 "MAX_MULTI_COUNTING_DEPTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivelents for above        
"
      end

      classrelation 1570434 // ATTRVAL_THIS (<unidirectional association>)
	relation 1570434 --->
	  a role_name "ATTRVAL_THIS" init_value " \".\"" class_relation const_relation public
	    comment " some stuff for my patterns-by-example         
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1570434 // ATTRVAL_THIS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1570562 // ATTRVAL_PARENT (<unidirectional association>)
	relation 1570562 --->
	  a role_name "ATTRVAL_PARENT" init_value " \"..\"" class_relation const_relation public
	    comment " some stuff for my patterns-by-example         
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1570562 // ATTRVAL_PARENT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1570690 // ATTRVAL_ANCESTOR (<unidirectional association>)
	relation 1570690 --->
	  a role_name "ATTRVAL_ANCESTOR" init_value " \"ancestor\"" class_relation const_relation public
	    comment " some stuff for my patterns-by-example         
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1570690 // ATTRVAL_ANCESTOR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1570818 // ATTRVAL_ID (<unidirectional association>)
	relation 1570818 --->
	  a role_name "ATTRVAL_ID" init_value " \"id\"" class_relation const_relation public
	    comment " some stuff for my patterns-by-example         
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1570818 // ATTRVAL_ID (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1570946 // ATTRVAL_DATATYPE_TEXT (<unidirectional association>)
	relation 1570946 --->
	  a role_name "ATTRVAL_DATATYPE_TEXT" init_value " \"text\"" class_relation const_relation public
	    comment " Stuff for sorting      
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1570946 // ATTRVAL_DATATYPE_TEXT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1571074 // ATTRVAL_DATATYPE_NUMBER (<unidirectional association>)
	relation 1571074 --->
	  a role_name "ATTRVAL_DATATYPE_NUMBER" init_value " \"number\"" class_relation const_relation public
	    comment " Stuff for sorting      
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1571074 // ATTRVAL_DATATYPE_NUMBER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1571202 // ATTRVAL_ORDER_ASCENDING (<unidirectional association>)
	relation 1571202 --->
	  a role_name "ATTRVAL_ORDER_ASCENDING" init_value " \"ascending\"" class_relation const_relation public
	    comment " Stuff for sorting      
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1571202 // ATTRVAL_ORDER_ASCENDING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1571330 // ATTRVAL_ORDER_DESCENDING (<unidirectional association>)
	relation 1571330 --->
	  a role_name "ATTRVAL_ORDER_DESCENDING" init_value " \"descending\"" class_relation const_relation public
	    comment " Stuff for sorting      
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1571330 // ATTRVAL_ORDER_DESCENDING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1571458 // ATTRVAL_CASEORDER_UPPER (<unidirectional association>)
	relation 1571458 --->
	  a role_name "ATTRVAL_CASEORDER_UPPER" init_value " \"upper-first\"" class_relation const_relation public
	    comment " Stuff for sorting      
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1571458 // ATTRVAL_CASEORDER_UPPER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1571586 // ATTRVAL_CASEORDER_LOWER (<unidirectional association>)
	relation 1571586 --->
	  a role_name "ATTRVAL_CASEORDER_LOWER" init_value " \"lower-first\"" class_relation const_relation public
	    comment " Stuff for sorting      
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1571586 // ATTRVAL_CASEORDER_LOWER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 797058 "SORTDATATYPE_TEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivelents for DATATYPE attribute 
"
      end

      attribute 797186 "SORTDATATYPE_NUMBER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivelents for DATATYPE attribute 
"
      end

      attribute 797314 "SORTORDER_ASCENDING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivelents for ORDER attribute 
"
      end

      attribute 797442 "SORTORDER_DESCENDING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivelents for ORDER attribute 
"
      end

      attribute 797570 "SORTCASEORDER_UPPERFIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivelents for CASE-ORDER attribute 
"
      end

      attribute 797698 "SORTCASEORDER_LOWERFIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Integer equivelents for CASE-ORDER attribute 
"
      end

      classrelation 1571714 // ATTRVAL_INFINITY (<unidirectional association>)
	relation 1571714 --->
	  a role_name "ATTRVAL_INFINITY" init_value " \"Infinity\"" class_relation const_relation public
	    comment " some stuff for Decimal-format       
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1571714 // ATTRVAL_INFINITY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1571842 // ATTRVAL_NAN (<unidirectional association>)
	relation 1571842 --->
	  a role_name "ATTRVAL_NAN" init_value " \"NaN\"" class_relation const_relation public
	    comment " some stuff for Decimal-format       
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1571842 // ATTRVAL_NAN (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1571970 // DEFAULT_DECIMAL_FORMAT (<unidirectional association>)
	relation 1571970 --->
	  a role_name "DEFAULT_DECIMAL_FORMAT" init_value " \"#default\"" class_relation const_relation public
	    comment " some stuff for Decimal-format       
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1571970 // DEFAULT_DECIMAL_FORMAT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 1572098 // ATTRNAME_XXXX (<unidirectional association>)
	relation 1572098 --->
	  a role_name "ATTRNAME_XXXX" init_value " \"XXXX\"" class_relation const_relation public
	    comment " temp dummy         
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1572098 // ATTRNAME_XXXX (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end
  end

  deploymentview 150658 "templates"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 403714 "Constants"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 587138 // Constants
      end
      comment "Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


Copyright 1999-2004 The Apache Software Foundation.

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


$Id: Constants.java,v 1.2.4.1 2005/09/10 19:50:56 jeffsuttor Exp $
"
    end
  end
end
