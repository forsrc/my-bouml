format 222
"geom" // jdk1.8::java::awt::geom
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/awt/geom/"
  java_package "java.awt.geom"
  classview 148994 "geom"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 380546 "RectangularShape"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>RectangularShape</code> is the base class for a number of
{@link Shape} objects whose geometry is defined by a rectangular frame.
This class does not directly specify any specific geometry by
itself, but merely provides manipulation methods inherited by
a whole category of <code>Shape</code> objects.
The manipulation methods provided by this class can be used to
query and modify the rectangular frame, which provides a reference
for the subclasses to define their geometry.

@author      Jim Graham
@since 1.2
"
      classrelation 679426 // <realization>
	relation 679426 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 679426 // <realization>
	  b parent class_ref 379394 // Shape
      end

      classrelation 679554 // <realization>
	relation 679554 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 679554 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      operation 2167554 "RectangularShape"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is an abstract class that cannot be instantiated directly.

@see Arc2D
@see Ellipse2D
@see Rectangle2D
@see RoundRectangle2D
@since 1.2
"
      end

      operation 2167682 "getX"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the upper-left corner of
the framing rectangle in <code>double</code> precision.
@return the X coordinate of the upper-left corner of
the framing rectangle.
@since 1.2
"
      end

      operation 2167810 "getY"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the upper-left corner of
the framing rectangle in <code>double</code> precision.
@return the Y coordinate of the upper-left corner of
the framing rectangle.
@since 1.2
"
      end

      operation 2167938 "getWidth"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width of the framing rectangle in
<code>double</code> precision.
@return the width of the framing rectangle.
@since 1.2
"
      end

      operation 2168066 "getHeight"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of the framing rectangle
in <code>double</code> precision.
@return the height of the framing rectangle.
@since 1.2
"
      end

      operation 2168194 "getMinX"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smallest X coordinate of the framing
rectangle of the <code>Shape</code> in <code>double</code>
precision.
@return the smallest X coordinate of the framing
         rectangle of the <code>Shape</code>.
@since 1.2
"
      end

      operation 2168322 "getMinY"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smallest Y coordinate of the framing
rectangle of the <code>Shape</code> in <code>double</code>
precision.
@return the smallest Y coordinate of the framing
         rectangle of the <code>Shape</code>.
@since 1.2
"
      end

      operation 2168450 "getMaxX"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the largest X coordinate of the framing
rectangle of the <code>Shape</code> in <code>double</code>
precision.
@return the largest X coordinate of the framing
         rectangle of the <code>Shape</code>.
@since 1.2
"
      end

      operation 2168578 "getMaxY"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the largest Y coordinate of the framing
rectangle of the <code>Shape</code> in <code>double</code>
precision.
@return the largest Y coordinate of the framing
         rectangle of the <code>Shape</code>.
@since 1.2
"
      end

      operation 2168706 "getCenterX"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the center of the framing
rectangle of the <code>Shape</code> in <code>double</code>
precision.
@return the X coordinate of the center of the framing rectangle
         of the <code>Shape</code>.
@since 1.2
"
      end

      operation 2168834 "getCenterY"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the center of the framing
rectangle of the <code>Shape</code> in <code>double</code>
precision.
@return the Y coordinate of the center of the framing rectangle
         of the <code>Shape</code>.
@since 1.2
"
      end

      operation 2168962 "getFrame"
	public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Transient
"
	
	
	
	comment "Returns the framing {@link Rectangle2D}
that defines the overall shape of this object.
@return a <code>Rectangle2D</code>, specified in
<code>double</code> coordinates.
@see #setFrame(double, double, double, double)
@see #setFrame(Point2D, Dimension2D)
@see #setFrame(Rectangle2D)
@since 1.2
"
      end

      operation 2169090 "isEmpty"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the <code>RectangularShape</code> is empty.
When the <code>RectangularShape</code> is empty, it encloses no
area.
@return <code>true</code> if the <code>RectangularShape</code> is empty;
         <code>false</code> otherwise.
@since 1.2
"
      end

      operation 2169218 "setFrame"
	abstract public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location and size of the framing rectangle of this
<code>Shape</code> to the specified rectangular values.

@param x the X coordinate of the upper-left corner of the
         specified rectangular shape
@param y the Y coordinate of the upper-left corner of the
         specified rectangular shape
@param w the width of the specified rectangular shape
@param h the height of the specified rectangular shape
@see #getFrame
@since 1.2
"
      end

      operation 2169346 "setFrame"
	public explicit_return_type "void"
	nparams 2
	  param inout name "loc" type class_ref 380802 // Point2D
	  param inout name "size" type class_ref 381186 // Dimension2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location and size of the framing rectangle of this
<code>Shape</code> to the specified {@link Point2D} and
{@link Dimension2D}, respectively.  The framing rectangle is used
by the subclasses of <code>RectangularShape</code> to define
their geometry.
@param loc the specified <code>Point2D</code>
@param size the specified <code>Dimension2D</code>
@see #getFrame
@since 1.2
"
      end

      operation 2169474 "setFrame"
	public explicit_return_type "void"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the framing rectangle of this <code>Shape</code> to
be the specified <code>Rectangle2D</code>.  The framing rectangle is
used by the subclasses of <code>RectangularShape</code> to define
their geometry.
@param r the specified <code>Rectangle2D</code>
@see #getFrame
@since 1.2
"
      end

      operation 2169602 "setFrameFromDiagonal"
	public explicit_return_type "void"
	nparams 4
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the diagonal of the framing rectangle of this <code>Shape</code>
based on the two specified coordinates.  The framing rectangle is
used by the subclasses of <code>RectangularShape</code> to define
their geometry.

@param x1 the X coordinate of the start point of the specified diagonal
@param y1 the Y coordinate of the start point of the specified diagonal
@param x2 the X coordinate of the end point of the specified diagonal
@param y2 the Y coordinate of the end point of the specified diagonal
@since 1.2
"
      end

      operation 2169730 "setFrameFromDiagonal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "p1" type class_ref 380802 // Point2D
	  param inout name "p2" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the diagonal of the framing rectangle of this <code>Shape</code>
based on two specified <code>Point2D</code> objects.  The framing
rectangle is used by the subclasses of <code>RectangularShape</code>
to define their geometry.

@param p1 the start <code>Point2D</code> of the specified diagonal
@param p2 the end <code>Point2D</code> of the specified diagonal
@since 1.2
"
      end

      operation 2169858 "setFrameFromCenter"
	public explicit_return_type "void"
	nparams 4
	  param in name "centerX" explicit_type "double"
	  param in name "centerY" explicit_type "double"
	  param in name "cornerX" explicit_type "double"
	  param in name "cornerY" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the framing rectangle of this <code>Shape</code>
based on the specified center point coordinates and corner point
coordinates.  The framing rectangle is used by the subclasses of
<code>RectangularShape</code> to define their geometry.

@param centerX the X coordinate of the specified center point
@param centerY the Y coordinate of the specified center point
@param cornerX the X coordinate of the specified corner point
@param cornerY the Y coordinate of the specified corner point
@since 1.2
"
      end

      operation 2169986 "setFrameFromCenter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "center" type class_ref 380802 // Point2D
	  param inout name "corner" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the framing rectangle of this <code>Shape</code> based on a
specified center <code>Point2D</code> and corner
<code>Point2D</code>.  The framing rectangle is used by the subclasses
of <code>RectangularShape</code> to define their geometry.
@param center the specified center <code>Point2D</code>
@param corner the specified corner <code>Point2D</code>
@since 1.2
"
      end

      operation 2170114 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 2170242 "intersects"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 2170370 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 2170498 "getBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 2170626 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 2
	  param inout name "at" type class_ref 381058 // AffineTransform
	  param in name "flatness" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator object that iterates along the
<code>Shape</code> object's boundary and provides access to a
flattened view of the outline of the <code>Shape</code>
object's geometry.
<p>
Only SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point types will
be returned by the iterator.
<p>
The amount of subdivision of the curved segments is controlled
by the <code>flatness</code> parameter, which specifies the
maximum distance that any point on the unflattened transformed
curve can deviate from the returned flattened path segments.
An optional {@link AffineTransform} can
be specified so that the coordinates returned in the iteration are
transformed accordingly.
@param at an optional <code>AffineTransform</code> to be applied to the
         coordinates as they are returned in the iteration,
         or <code>null</code> if untransformed coordinates are desired.
@param flatness the maximum distance that the line segments used to
         approximate the curved segments are allowed to deviate
         from any point on the original curve
@return a <code>PathIterator</code> object that provides access to
         the <code>Shape</code> object's flattened geometry.
@since 1.2
"
      end

      operation 2170754 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object of the same class and with the same
contents as this object.
@return     a clone of this instance.
@exception  OutOfMemoryError            if there is not enough memory.
@see        java.lang.Cloneable
@since      1.2
"
      end
    end

    class 380674 "Rectangle2D"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Rectangle2D</code> class describes a rectangle
defined by a location {@code (x,y)} and dimension
{@code (w x h)}.
<p>
This class is only the abstract superclass for all objects that
store a 2D rectangle.
The actual storage representation of the coordinates is left to
the subclass.

@author      Jim Graham
@since 1.2
"
      classrelation 735234 // <generalisation>
	relation 735234 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 735234 // <generalisation>
	  b parent class_ref 380546 // RectangularShape
      end

      attribute 514818 "OUT_LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bitmask that indicates that a point lies to the left of
this <code>Rectangle2D</code>.
@since 1.2

"
      end

      attribute 514946 "OUT_TOP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bitmask that indicates that a point lies above
this <code>Rectangle2D</code>.
@since 1.2

"
      end

      attribute 515074 "OUT_RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bitmask that indicates that a point lies to the right of
this <code>Rectangle2D</code>.
@since 1.2

"
      end

      attribute 515202 "OUT_BOTTOM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bitmask that indicates that a point lies below
this <code>Rectangle2D</code>.
@since 1.2

"
      end

      class 402690 "Float"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 735362 // <generalisation>
	  relation 735362 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 735362 // <generalisation>
	    b parent class_ref 380674 // Rectangle2D
	end

	classrelation 735490 // <realization>
	  relation 735490 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 735490 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 515330 "x"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of this <code>Rectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 515458 "y"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of this <code>Rectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 515586 "width"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The width of this <code>Rectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 515714 "height"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The height of this <code>Rectangle2D</code>.
@since 1.2
@serial

"
	end

	operation 2312706 "Float"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new <code>Rectangle2D</code>, initialized to
location (0.0,&nbsp;0.0) and size (0.0,&nbsp;0.0).
@since 1.2
"
	end

	operation 2312834 "Float"
	  public explicit_return_type ""
	  nparams 4
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	    param in name "w" explicit_type "float"
	    param in name "h" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>Rectangle2D</code>
from the specified <code>float</code> coordinates.

@param x the X coordinate of the upper-left corner
         of the newly constructed <code>Rectangle2D</code>
@param y the Y coordinate of the upper-left corner
         of the newly constructed <code>Rectangle2D</code>
@param w the width of the newly constructed
         <code>Rectangle2D</code>
@param h the height of the newly constructed
         <code>Rectangle2D</code>
@since 1.2
"
	end

	operation 2312962 "getX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2313090 "getY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2313218 "getWidth"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2313346 "getHeight"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2313474 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2313602 "setRect"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	    param in name "w" explicit_type "float"
	    param in name "h" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the location and size of this <code>Rectangle2D</code>
to the specified <code>float</code> values.

@param x the X coordinate of the upper-left corner
         of this <code>Rectangle2D</code>
@param y the Y coordinate of the upper-left corner
         of this <code>Rectangle2D</code>
@param w the width of this <code>Rectangle2D</code>
@param h the height of this <code>Rectangle2D</code>
@since 1.2
"
	end

	operation 2313730 "setRect"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2313858 "setRect"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "r" type class_ref 380674 // Rectangle2D
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2313986 "outcode"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2314114 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2314242 "createIntersection"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 1
	    param inout name "r" type class_ref 380674 // Rectangle2D
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2314370 "createUnion"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 1
	    param inout name "r" type class_ref 380674 // Rectangle2D
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2314498 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the <code>String</code> representation of this
<code>Rectangle2D</code>.
@return a <code>String</code> representing this
<code>Rectangle2D</code>.
@since 1.2
"
	end

	attribute 515842 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 3798716824173675777L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      class 402818 "Double"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 735618 // <generalisation>
	  relation 735618 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 735618 // <generalisation>
	    b parent class_ref 380674 // Rectangle2D
	end

	classrelation 735746 // <realization>
	  relation 735746 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 735746 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 515970 "x"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of this <code>Rectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 516098 "y"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of this <code>Rectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 516226 "width"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The width of this <code>Rectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 516354 "height"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The height of this <code>Rectangle2D</code>.
@since 1.2
@serial

"
	end

	operation 2314626 "Double"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new <code>Rectangle2D</code>, initialized to
location (0,&nbsp;0) and size (0,&nbsp;0).
@since 1.2
"
	end

	operation 2314754 "Double"
	  public explicit_return_type ""
	  nparams 4
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>Rectangle2D</code>
from the specified <code>double</code> coordinates.

@param x the X coordinate of the upper-left corner
         of the newly constructed <code>Rectangle2D</code>
@param y the Y coordinate of the upper-left corner
         of the newly constructed <code>Rectangle2D</code>
@param w the width of the newly constructed
         <code>Rectangle2D</code>
@param h the height of the newly constructed
         <code>Rectangle2D</code>
@since 1.2
"
	end

	operation 2314882 "getX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2315010 "getY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2315138 "getWidth"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2315266 "getHeight"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2315394 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2315522 "setRect"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2315650 "setRect"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "r" type class_ref 380674 // Rectangle2D
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2315778 "outcode"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2315906 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2316034 "createIntersection"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 1
	    param inout name "r" type class_ref 380674 // Rectangle2D
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2316162 "createUnion"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 1
	    param inout name "r" type class_ref 380674 // Rectangle2D
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 2316290 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the <code>String</code> representation of this
<code>Rectangle2D</code>.
@return a <code>String</code> representing this
<code>Rectangle2D</code>.
@since 1.2
"
	end

	attribute 516482 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 7771313791441850493L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      operation 2316418 "Rectangle2D"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is an abstract class that cannot be instantiated directly.
Type-specific implementation subclasses are available for
instantiation and provide a number of formats for storing
the information necessary to satisfy the various accessor
methods below.

@see java.awt.geom.Rectangle2D.Float
@see java.awt.geom.Rectangle2D.Double
@see java.awt.Rectangle
@since 1.2
"
      end

      operation 2316546 "setRect"
	abstract public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location and size of this <code>Rectangle2D</code>
to the specified <code>double</code> values.

@param x the X coordinate of the upper-left corner
         of this <code>Rectangle2D</code>
@param y the Y coordinate of the upper-left corner
         of this <code>Rectangle2D</code>
@param w the width of this <code>Rectangle2D</code>
@param h the height of this <code>Rectangle2D</code>
@since 1.2
"
      end

      operation 2316674 "setRect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>Rectangle2D</code> to be the same as the specified
<code>Rectangle2D</code>.
@param r the specified <code>Rectangle2D</code>
@since 1.2
"
      end

      operation 2316802 "intersectsLine"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified line segment intersects the interior of this
<code>Rectangle2D</code>.

@param x1 the X coordinate of the start point of the specified
          line segment
@param y1 the Y coordinate of the start point of the specified
          line segment
@param x2 the X coordinate of the end point of the specified
          line segment
@param y2 the Y coordinate of the end point of the specified
          line segment
@return <code>true</code> if the specified line segment intersects
the interior of this <code>Rectangle2D</code>; <code>false</code>
otherwise.
@since 1.2
"
      end

      operation 2316930 "intersectsLine"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "l" type class_ref 402946 // Line2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified line segment intersects the interior of this
<code>Rectangle2D</code>.
@param l the specified {@link Line2D} to test for intersection
with the interior of this <code>Rectangle2D</code>
@return <code>true</code> if the specified <code>Line2D</code>
intersects the interior of this <code>Rectangle2D</code>;
<code>false</code> otherwise.
@since 1.2
"
      end

      operation 2317058 "outcode"
	abstract public explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines where the specified coordinates lie with respect
to this <code>Rectangle2D</code>.
This method computes a binary OR of the appropriate mask values
indicating, for each side of this <code>Rectangle2D</code>,
whether or not the specified coordinates are on the same side
of the edge as the rest of this <code>Rectangle2D</code>.
@param x the specified X coordinate
@param y the specified Y coordinate
@return the logical OR of all appropriate out codes.
@see #OUT_LEFT
@see #OUT_TOP
@see #OUT_RIGHT
@see #OUT_BOTTOM
@since 1.2
"
      end

      operation 2317186 "outcode"
	public explicit_return_type "int"
	nparams 1
	  param inout name "p" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines where the specified {@link Point2D} lies with
respect to this <code>Rectangle2D</code>.
This method computes a binary OR of the appropriate mask values
indicating, for each side of this <code>Rectangle2D</code>,
whether or not the specified <code>Point2D</code> is on the same
side of the edge as the rest of this <code>Rectangle2D</code>.
@param p the specified <code>Point2D</code>
@return the logical OR of all appropriate out codes.
@see #OUT_LEFT
@see #OUT_TOP
@see #OUT_RIGHT
@see #OUT_BOTTOM
@since 1.2
"
      end

      operation 2317314 "setFrame"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location and size of the outer bounds of this
<code>Rectangle2D</code> to the specified rectangular values.

@param x the X coordinate of the upper-left corner
         of this <code>Rectangle2D</code>
@param y the Y coordinate of the upper-left corner
         of this <code>Rectangle2D</code>
@param w the width of this <code>Rectangle2D</code>
@param h the height of this <code>Rectangle2D</code>
@since 1.2
"
      end

      operation 2317442 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 2317570 "contains"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 2317698 "intersects"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 2317826 "contains"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 2317954 "createIntersection"
	abstract public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>Rectangle2D</code> object representing the
intersection of this <code>Rectangle2D</code> with the specified
<code>Rectangle2D</code>.
@param r the <code>Rectangle2D</code> to be intersected with
this <code>Rectangle2D</code>
@return the largest <code>Rectangle2D</code> contained in both
         the specified <code>Rectangle2D</code> and in this
         <code>Rectangle2D</code>.
@since 1.2
"
      end

      operation 2318082 "intersect"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "src1" type class_ref 380674 // Rectangle2D
	  param inout name "src2" type class_ref 380674 // Rectangle2D
	  param inout name "dest" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Intersects the pair of specified source <code>Rectangle2D</code>
objects and puts the result into the specified destination
<code>Rectangle2D</code> object.  One of the source rectangles
can also be the destination to avoid creating a third Rectangle2D
object, but in this case the original points of this source
rectangle will be overwritten by this method.
@param src1 the first of a pair of <code>Rectangle2D</code>
objects to be intersected with each other
@param src2 the second of a pair of <code>Rectangle2D</code>
objects to be intersected with each other
@param dest the <code>Rectangle2D</code> that holds the
results of the intersection of <code>src1</code> and
<code>src2</code>
@since 1.2
"
      end

      operation 2318210 "createUnion"
	abstract public return_type class_ref 380674 // Rectangle2D
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>Rectangle2D</code> object representing the
union of this <code>Rectangle2D</code> with the specified
<code>Rectangle2D</code>.
@param r the <code>Rectangle2D</code> to be combined with
this <code>Rectangle2D</code>
@return the smallest <code>Rectangle2D</code> containing both
the specified <code>Rectangle2D</code> and this
<code>Rectangle2D</code>.
@since 1.2
"
      end

      operation 2318338 "union"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "src1" type class_ref 380674 // Rectangle2D
	  param inout name "src2" type class_ref 380674 // Rectangle2D
	  param inout name "dest" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unions the pair of source <code>Rectangle2D</code> objects
and puts the result into the specified destination
<code>Rectangle2D</code> object.  One of the source rectangles
can also be the destination to avoid creating a third Rectangle2D
object, but in this case the original points of this source
rectangle will be overwritten by this method.
@param src1 the first of a pair of <code>Rectangle2D</code>
objects to be combined with each other
@param src2 the second of a pair of <code>Rectangle2D</code>
objects to be combined with each other
@param dest the <code>Rectangle2D</code> that holds the
results of the union of <code>src1</code> and
<code>src2</code>
@since 1.2
"
      end

      operation 2318466 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "newx" explicit_type "double"
	  param in name "newy" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a point, specified by the double precision arguments
<code>newx</code> and <code>newy</code>, to this
<code>Rectangle2D</code>.  The resulting <code>Rectangle2D</code>
is the smallest <code>Rectangle2D</code> that
contains both the original <code>Rectangle2D</code> and the
specified point.
<p>
After adding a point, a call to <code>contains</code> with the
added point as an argument does not necessarily return
<code>true</code>. The <code>contains</code> method does not
return <code>true</code> for points on the right or bottom
edges of a rectangle. Therefore, if the added point falls on
the left or bottom edge of the enlarged rectangle,
<code>contains</code> returns <code>false</code> for that point.
@param newx the X coordinate of the new point
@param newy the Y coordinate of the new point
@since 1.2
"
      end

      operation 2318594 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the <code>Point2D</code> object <code>pt</code> to this
<code>Rectangle2D</code>.
The resulting <code>Rectangle2D</code> is the smallest
<code>Rectangle2D</code> that contains both the original
<code>Rectangle2D</code> and the specified <code>Point2D</code>.
<p>
After adding a point, a call to <code>contains</code> with the
added point as an argument does not necessarily return
<code>true</code>. The <code>contains</code>
method does not return <code>true</code> for points on the right
or bottom edges of a rectangle. Therefore, if the added point falls
on the left or bottom edge of the enlarged rectangle,
<code>contains</code> returns <code>false</code> for that point.
@param     pt the new <code>Point2D</code> to add to this
<code>Rectangle2D</code>.
@since 1.2
"
      end

      operation 2318722 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a <code>Rectangle2D</code> object to this
<code>Rectangle2D</code>.  The resulting <code>Rectangle2D</code>
is the union of the two <code>Rectangle2D</code> objects.
@param r the <code>Rectangle2D</code> to add to this
<code>Rectangle2D</code>.
@since 1.2
"
      end

      operation 2318850 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration object that defines the boundary of this
<code>Rectangle2D</code>.
The iterator for this class is multi-threaded safe, which means
that this <code>Rectangle2D</code> class guarantees that
modifications to the geometry of this <code>Rectangle2D</code>
object do not affect any iterations of that geometry that
are already in process.
@param at an optional <code>AffineTransform</code> to be applied to
the coordinates as they are returned in the iteration, or
<code>null</code> if untransformed coordinates are desired
@return    the <code>PathIterator</code> object that returns the
         geometry of the outline of this
         <code>Rectangle2D</code>, one segment at a time.
@since 1.2
"
      end

      operation 2318978 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 2
	  param inout name "at" type class_ref 381058 // AffineTransform
	  param in name "flatness" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration object that defines the boundary of the
flattened <code>Rectangle2D</code>.  Since rectangles are already
flat, the <code>flatness</code> parameter is ignored.
The iterator for this class is multi-threaded safe, which means
that this <code>Rectangle2D</code> class guarantees that
modifications to the geometry of this <code>Rectangle2D</code>
object do not affect any iterations of that geometry that
are already in process.
@param at an optional <code>AffineTransform</code> to be applied to
the coordinates as they are returned in the iteration, or
<code>null</code> if untransformed coordinates are desired
@param flatness the maximum distance that the line segments used to
approximate the curved segments are allowed to deviate from any
point on the original curve.  Since rectangles are already flat,
the <code>flatness</code> parameter is ignored.
@return    the <code>PathIterator</code> object that returns the
         geometry of the outline of this
         <code>Rectangle2D</code>, one segment at a time.
@since 1.2
"
      end

      operation 2319106 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hashcode for this <code>Rectangle2D</code>.
@return the hashcode for this <code>Rectangle2D</code>.
@since 1.2
"
      end

      operation 2319234 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the specified <code>Object</code> is
equal to this <code>Rectangle2D</code>.  The specified
<code>Object</code> is equal to this <code>Rectangle2D</code>
if it is an instance of <code>Rectangle2D</code> and if its
location and size are the same as this <code>Rectangle2D</code>.
@param obj an <code>Object</code> to be compared with this
<code>Rectangle2D</code>.
@return     <code>true</code> if <code>obj</code> is an instance
                    of <code>Rectangle2D</code> and has
                    the same values; <code>false</code> otherwise.
@since 1.2
"
      end
    end

    class 380802 "Point2D"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Point2D</code> class defines a point representing a location
in {@code (x,y)} coordinate space.
<p>
This class is only the abstract superclass for all objects that
store a 2D coordinate.
The actual storage representation of the coordinates is left to
the subclass.

@author      Jim Graham
@since 1.2
"
      class 866946 "Float"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 2961666 // <generalisation>
	  relation 2961666 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 2961666 // <generalisation>
	    b parent class_ref 380802 // Point2D
	end

	classrelation 2961794 // <realization>
	  relation 2961794 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 2961794 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1416322 "x"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of this <code>Point2D</code>.
@since 1.2
@serial

"
	end

	attribute 1416450 "y"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of this <code>Point2D</code>.
@since 1.2
@serial

"
	end

	operation 6295938 "Float"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>Point2D</code> with
coordinates (0,&nbsp;0).
@since 1.2
"
	end

	operation 6296066 "Float"
	  public explicit_return_type ""
	  nparams 2
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>Point2D</code> with
the specified coordinates.

@param x the X coordinate of the newly
         constructed <code>Point2D</code>
@param y the Y coordinate of the newly
         constructed <code>Point2D</code>
@since 1.2
"
	end

	operation 6296194 "getX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6296322 "getY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6296450 "setLocation"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6296578 "setLocation"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the location of this <code>Point2D</code> to the
specified <code>float</code> coordinates.

@param x the new X coordinate of this {@code Point2D}
@param y the new Y coordinate of this {@code Point2D}
@since 1.2
"
	end

	operation 6296706 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a <code>String</code> that represents the value
of this <code>Point2D</code>.
@return a string representation of this <code>Point2D</code>.
@since 1.2
"
	end

	attribute 1416578 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -2870572449815403710L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      classrelation 2961538 // <realization>
	relation 2961538 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2961538 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      class 873858 "Double"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 2961922 // <generalisation>
	  relation 2961922 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 2961922 // <generalisation>
	    b parent class_ref 380802 // Point2D
	end

	classrelation 2962050 // <realization>
	  relation 2962050 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 2962050 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1416706 "x"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of this <code>Point2D</code>.
@since 1.2
@serial

"
	end

	attribute 1416834 "y"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of this <code>Point2D</code>.
@since 1.2
@serial

"
	end

	operation 6296834 "Double"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>Point2D</code> with
coordinates (0,&nbsp;0).
@since 1.2
"
	end

	operation 6296962 "Double"
	  public explicit_return_type ""
	  nparams 2
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>Point2D</code> with the
specified coordinates.

@param x the X coordinate of the newly
         constructed <code>Point2D</code>
@param y the Y coordinate of the newly
         constructed <code>Point2D</code>
@since 1.2
"
	end

	operation 6297090 "getX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6297218 "getY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6297346 "setLocation"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6297474 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a <code>String</code> that represents the value
of this <code>Point2D</code>.
@return a string representation of this <code>Point2D</code>.
@since 1.2
"
	end

	attribute 1416962 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 6150783262733311327L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      operation 6297602 "Point2D"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is an abstract class that cannot be instantiated directly.
Type-specific implementation subclasses are available for
instantiation and provide a number of formats for storing
the information necessary to satisfy the various accessor
methods below.

@see java.awt.geom.Point2D.Float
@see java.awt.geom.Point2D.Double
@see java.awt.Point
@since 1.2
"
      end

      operation 6297730 "getX"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of this <code>Point2D</code> in
<code>double</code> precision.
@return the X coordinate of this <code>Point2D</code>.
@since 1.2
"
      end

      operation 6297858 "getY"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of this <code>Point2D</code> in
<code>double</code> precision.
@return the Y coordinate of this <code>Point2D</code>.
@since 1.2
"
      end

      operation 6297986 "setLocation"
	abstract public explicit_return_type "void"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of this <code>Point2D</code> to the
specified <code>double</code> coordinates.

@param x the new X coordinate of this {@code Point2D}
@param y the new Y coordinate of this {@code Point2D}
@since 1.2
"
      end

      operation 6298114 "setLocation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of this <code>Point2D</code> to the same
coordinates as the specified <code>Point2D</code> object.
@param p the specified <code>Point2D</code> to which to set
this <code>Point2D</code>
@since 1.2
"
      end

      operation 6298242 "distanceSq"
	class_operation public explicit_return_type "double"
	nparams 4
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the distance between two points.

@param x1 the X coordinate of the first specified point
@param y1 the Y coordinate of the first specified point
@param x2 the X coordinate of the second specified point
@param y2 the Y coordinate of the second specified point
@return the square of the distance between the two
sets of specified coordinates.
@since 1.2
"
      end

      operation 6298370 "distance"
	class_operation public explicit_return_type "double"
	nparams 4
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the distance between two points.

@param x1 the X coordinate of the first specified point
@param y1 the Y coordinate of the first specified point
@param x2 the X coordinate of the second specified point
@param y2 the Y coordinate of the second specified point
@return the distance between the two sets of specified
coordinates.
@since 1.2
"
      end

      operation 6298498 "distanceSq"
	public explicit_return_type "double"
	nparams 2
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the distance from this
<code>Point2D</code> to a specified point.

@param px the X coordinate of the specified point to be measured
          against this <code>Point2D</code>
@param py the Y coordinate of the specified point to be measured
          against this <code>Point2D</code>
@return the square of the distance between this
<code>Point2D</code> and the specified point.
@since 1.2
"
      end

      operation 6298626 "distanceSq"
	public explicit_return_type "double"
	nparams 1
	  param inout name "pt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the distance from this
<code>Point2D</code> to a specified <code>Point2D</code>.

@param pt the specified point to be measured
          against this <code>Point2D</code>
@return the square of the distance between this
<code>Point2D</code> to a specified <code>Point2D</code>.
@since 1.2
"
      end

      operation 6298754 "distance"
	public explicit_return_type "double"
	nparams 2
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the distance from this <code>Point2D</code> to
a specified point.

@param px the X coordinate of the specified point to be measured
          against this <code>Point2D</code>
@param py the Y coordinate of the specified point to be measured
          against this <code>Point2D</code>
@return the distance between this <code>Point2D</code>
and a specified point.
@since 1.2
"
      end

      operation 6298882 "distance"
	public explicit_return_type "double"
	nparams 1
	  param inout name "pt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the distance from this <code>Point2D</code> to a
specified <code>Point2D</code>.

@param pt the specified point to be measured
          against this <code>Point2D</code>
@return the distance between this <code>Point2D</code> and
the specified <code>Point2D</code>.
@since 1.2
"
      end

      operation 6299010 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object of the same class and with the
same contents as this object.
@return     a clone of this instance.
@exception  OutOfMemoryError            if there is not enough memory.
@see        java.lang.Cloneable
@since      1.2
"
      end

      operation 6299138 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hashcode for this <code>Point2D</code>.
@return      a hash code for this <code>Point2D</code>.
"
      end

      operation 6299266 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not two points are equal. Two instances of
<code>Point2D</code> are equal if the values of their
<code>x</code> and <code>y</code> member fields, representing
their position in the coordinate space, are the same.
@param obj an object to be compared with this <code>Point2D</code>
@return <code>true</code> if the object to be compared is
        an instance of <code>Point2D</code> and has
        the same values; <code>false</code> otherwise.
@since 1.2
"
      end
    end

    class 380930 "PathIterator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>PathIterator</code> interface provides the mechanism
for objects that implement the {@link java.awt.Shape Shape}
interface to return the geometry of their boundary by allowing
a caller to retrieve the path of that boundary a segment at a
time.  This interface allows these objects to retrieve the path of
their boundary a segment at a time by using 1st through 3rd order
B&eacute;zier curves, which are lines and quadratic or cubic
B&eacute;zier splines.
<p>
Multiple subpaths can be expressed by using a \"MOVETO\" segment to
create a discontinuity in the geometry to move from the end of
one subpath to the beginning of the next.
<p>
Each subpath can be closed manually by ending the last segment in
the subpath on the same coordinate as the beginning \"MOVETO\" segment
for that subpath or by using a \"CLOSE\" segment to append a line
segment from the last point back to the first.
Be aware that manually closing an outline as opposed to using a
\"CLOSE\" segment to close the path might result in different line
style decorations being used at the end points of the subpath.
For example, the {@link java.awt.BasicStroke BasicStroke} object
uses a line \"JOIN\" decoration to connect the first and last points
if a \"CLOSE\" segment is encountered, whereas simply ending the path
on the same coordinate as the beginning coordinate results in line
\"CAP\" decorations being used at the ends.

@see java.awt.Shape
@see java.awt.BasicStroke

@author Jim Graham
"
      attribute 499842 "WIND_EVEN_ODD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The winding rule constant for specifying an even-odd rule
for determining the interior of a path.
The even-odd rule specifies that a point lies inside the
path if a ray drawn in any direction from that point to
infinity is crossed by path segments an odd number of times.

"
      end

      attribute 499970 "WIND_NON_ZERO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The winding rule constant for specifying a non-zero rule
for determining the interior of a path.
The non-zero rule specifies that a point lies inside the
path if a ray drawn in any direction from that point to
infinity is crossed by path segments a different number
of times in the counter-clockwise direction than the
clockwise direction.

"
      end

      attribute 500098 "SEG_MOVETO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The segment type constant for a point that specifies the
starting location for a new subpath.

"
      end

      attribute 500226 "SEG_LINETO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The segment type constant for a point that specifies the
end point of a line to be drawn from the most recently
specified point.

"
      end

      attribute 500354 "SEG_QUADTO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The segment type constant for the pair of points that specify
a quadratic parametric curve to be drawn from the most recently
specified point.
The curve is interpolated by solving the parametric control
equation in the range <code>(t=[0..1])</code> using
the most recently specified (current) point (CP),
the first control point (P1),
and the final interpolated control point (P2).
The parametric control equation for this curve is:
<pre>
         P(t) = B(2,0)*CP + B(2,1)*P1 + B(2,2)*P2
         0 &lt;= t &lt;= 1

       B(n,m) = mth coefficient of nth degree Bernstein polynomial
              = C(n,m) * t^(m) * (1 - t)^(n-m)
       C(n,m) = Combinations of n things, taken m at a time
              = n! / (m! * (n-m)!)
</pre>

"
      end

      attribute 500482 "SEG_CUBICTO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The segment type constant for the set of 3 points that specify
a cubic parametric curve to be drawn from the most recently
specified point.
The curve is interpolated by solving the parametric control
equation in the range <code>(t=[0..1])</code> using
the most recently specified (current) point (CP),
the first control point (P1),
the second control point (P2),
and the final interpolated control point (P3).
The parametric control equation for this curve is:
<pre>
         P(t) = B(3,0)*CP + B(3,1)*P1 + B(3,2)*P2 + B(3,3)*P3
         0 &lt;= t &lt;= 1

       B(n,m) = mth coefficient of nth degree Bernstein polynomial
              = C(n,m) * t^(m) * (1 - t)^(n-m)
       C(n,m) = Combinations of n things, taken m at a time
              = n! / (m! * (n-m)!)
</pre>
This form of curve is commonly known as a B&eacute;zier curve.

"
      end

      attribute 500610 "SEG_CLOSE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Native
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The segment type constant that specifies that
the preceding subpath should be closed by appending a line segment
back to the point corresponding to the most recent SEG_MOVETO.

"
      end

      operation 2173186 "getWindingRule"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the winding rule for determining the interior of the
path.
@return the winding rule.
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
"
      end

      operation 2173314 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the iteration is complete.
@return <code>true</code> if all the segments have
been read; <code>false</code> otherwise.
"
      end

      operation 2173442 "next"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the iterator to the next segment of the path forwards
along the primary direction of traversal as long as there are
more points in that direction.
"
      end

      operation 2173570 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "float"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path-segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A float array of length 6 must be passed in and can be used to
store the coordinates of the point(s).
Each point is stored as a pair of float x,y coordinates.
SEG_MOVETO and SEG_LINETO types returns one point,
SEG_QUADTO returns two points,
SEG_CUBICTO returns 3 points
and SEG_CLOSE does not return any points.
@param coords an array that holds the data returned from
this method
@return the path-segment type of the current path segment.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end

      operation 2173698 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path-segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A double array of length 6 must be passed in and can be used to
store the coordinates of the point(s).
Each point is stored as a pair of double x,y coordinates.
SEG_MOVETO and SEG_LINETO types returns one point,
SEG_QUADTO returns two points,
SEG_CUBICTO returns 3 points
and SEG_CLOSE does not return any points.
@param coords an array that holds the data returned from
this method
@return the path-segment type of the current path segment.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end
    end

    class 381058 "AffineTransform"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>AffineTransform</code> class represents a 2D affine transform
that performs a linear mapping from 2D coordinates to other 2D
coordinates that preserves the \"straightness\" and
\"parallelness\" of lines.  Affine transformations can be constructed
using sequences of translations, scales, flips, rotations, and shears.
<p>
Such a coordinate transformation can be represented by a 3 row by
3 column matrix with an implied last row of [ 0 0 1 ].  This matrix
transforms source coordinates {@code (x,y)} into
destination coordinates {@code (x',y')} by considering
them to be a column vector and multiplying the coordinate vector
by the matrix according to the following process:
<pre>
     [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
     [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
     [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
</pre>
<h3><a name=\"quadrantapproximation\">Handling 90-Degree Rotations</a></h3>
<p>
In some variations of the <code>rotate</code> methods in the
<code>AffineTransform</code> class, a double-precision argument
specifies the angle of rotation in radians.
These methods have special handling for rotations of approximately
90 degrees (including multiples such as 180, 270, and 360 degrees),
so that the common case of quadrant rotation is handled more
efficiently.
This special handling can cause angles very close to multiples of
90 degrees to be treated as if they were exact multiples of
90 degrees.
For small multiples of 90 degrees the range of angles treated
as a quadrant rotation is approximately 0.00000121 degrees wide.
This section explains why such special care is needed and how
it is implemented.
<p>
Since 90 degrees is represented as <code>PI/2</code> in radians,
and since PI is a transcendental (and therefore irrational) number,
it is not possible to exactly represent a multiple of 90 degrees as
an exact double precision value measured in radians.
As a result it is theoretically impossible to describe quadrant
rotations (90, 180, 270 or 360 degrees) using these values.
Double precision floating point values can get very close to
non-zero multiples of <code>PI/2</code> but never close enough
for the sine or cosine to be exactly 0.0, 1.0 or -1.0.
The implementations of <code>Math.sin()</code> and
<code>Math.cos()</code> correspondingly never return 0.0
for any case other than <code>Math.sin(0.0)</code>.
These same implementations do, however, return exactly 1.0 and
-1.0 for some range of numbers around each multiple of 90
degrees since the correct answer is so close to 1.0 or -1.0 that
the double precision significand cannot represent the difference
as accurately as it can for numbers that are near 0.0.
<p>
The net result of these issues is that if the
<code>Math.sin()</code> and <code>Math.cos()</code> methods
are used to directly generate the values for the matrix modifications
during these radian-based rotation operations then the resulting
transform is never strictly classifiable as a quadrant rotation
even for a simple case like <code>rotate(Math.PI/2.0)</code>,
due to minor variations in the matrix caused by the non-0.0 values
obtained for the sine and cosine.
If these transforms are not classified as quadrant rotations then
subsequent code which attempts to optimize further operations based
upon the type of the transform will be relegated to its most general
implementation.
<p>
Because quadrant rotations are fairly common,
this class should handle these cases reasonably quickly, both in
applying the rotations to the transform and in applying the resulting
transform to the coordinates.
To facilitate this optimal handling, the methods which take an angle
of rotation measured in radians attempt to detect angles that are
intended to be quadrant rotations and treat them as such.
These methods therefore treat an angle <em>theta</em> as a quadrant
rotation if either <code>Math.sin(<em>theta</em>)</code> or
<code>Math.cos(<em>theta</em>)</code> returns exactly 1.0 or -1.0.
As a rule of thumb, this property holds true for a range of
approximately 0.0000000211 radians (or 0.00000121 degrees) around
small multiples of <code>Math.PI/2.0</code>.

@author Jim Graham
@since 1.2
"
      classrelation 3024386 // <realization>
	relation 3024386 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3024386 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3024514 // <realization>
	relation 3024514 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3024514 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1544194 "TYPE_UNKNOWN"
	class_attribute const_attribute private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant is only useful for the cached type field.
It indicates that the type has been decached and must be recalculated.

"
      end

      attribute 1544322 "TYPE_IDENTITY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant indicates that the transform defined by this object
is an identity transform.
An identity transform is one in which the output coordinates are
always the same as the input coordinates.
If this transform is anything other than the identity transform,
the type will either be the constant GENERAL_TRANSFORM or a
combination of the appropriate flag bits for the various coordinate
conversions that this transform performs.
@see #TYPE_TRANSLATION
@see #TYPE_UNIFORM_SCALE
@see #TYPE_GENERAL_SCALE
@see #TYPE_FLIP
@see #TYPE_QUADRANT_ROTATION
@see #TYPE_GENERAL_ROTATION
@see #TYPE_GENERAL_TRANSFORM
@see #getType
@since 1.2

"
      end

      attribute 1544450 "TYPE_TRANSLATION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag bit indicates that the transform defined by this object
performs a translation in addition to the conversions indicated
by other flag bits.
A translation moves the coordinates by a constant amount in x
and y without changing the length or angle of vectors.
@see #TYPE_IDENTITY
@see #TYPE_UNIFORM_SCALE
@see #TYPE_GENERAL_SCALE
@see #TYPE_FLIP
@see #TYPE_QUADRANT_ROTATION
@see #TYPE_GENERAL_ROTATION
@see #TYPE_GENERAL_TRANSFORM
@see #getType
@since 1.2

"
      end

      attribute 1544578 "TYPE_UNIFORM_SCALE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag bit indicates that the transform defined by this object
performs a uniform scale in addition to the conversions indicated
by other flag bits.
A uniform scale multiplies the length of vectors by the same amount
in both the x and y directions without changing the angle between
vectors.
This flag bit is mutually exclusive with the TYPE_GENERAL_SCALE flag.
@see #TYPE_IDENTITY
@see #TYPE_TRANSLATION
@see #TYPE_GENERAL_SCALE
@see #TYPE_FLIP
@see #TYPE_QUADRANT_ROTATION
@see #TYPE_GENERAL_ROTATION
@see #TYPE_GENERAL_TRANSFORM
@see #getType
@since 1.2

"
      end

      attribute 1544706 "TYPE_GENERAL_SCALE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag bit indicates that the transform defined by this object
performs a general scale in addition to the conversions indicated
by other flag bits.
A general scale multiplies the length of vectors by different
amounts in the x and y directions without changing the angle
between perpendicular vectors.
This flag bit is mutually exclusive with the TYPE_UNIFORM_SCALE flag.
@see #TYPE_IDENTITY
@see #TYPE_TRANSLATION
@see #TYPE_UNIFORM_SCALE
@see #TYPE_FLIP
@see #TYPE_QUADRANT_ROTATION
@see #TYPE_GENERAL_ROTATION
@see #TYPE_GENERAL_TRANSFORM
@see #getType
@since 1.2

"
      end

      attribute 1544834 "TYPE_MASK_SCALE"
	class_attribute const_attribute public explicit_type "int"
	init_value " (TYPE_UNIFORM_SCALE |
                                               TYPE_GENERAL_SCALE)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant is a bit mask for any of the scale flag bits.
@see #TYPE_UNIFORM_SCALE
@see #TYPE_GENERAL_SCALE
@since 1.2

"
      end

      attribute 1544962 "TYPE_FLIP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 64"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag bit indicates that the transform defined by this object
performs a mirror image flip about some axis which changes the
normally right handed coordinate system into a left handed
system in addition to the conversions indicated by other flag bits.
A right handed coordinate system is one where the positive X
axis rotates counterclockwise to overlay the positive Y axis
similar to the direction that the fingers on your right hand
curl when you stare end on at your thumb.
A left handed coordinate system is one where the positive X
axis rotates clockwise to overlay the positive Y axis similar
to the direction that the fingers on your left hand curl.
There is no mathematical way to determine the angle of the
original flipping or mirroring transformation since all angles
of flip are identical given an appropriate adjusting rotation.
@see #TYPE_IDENTITY
@see #TYPE_TRANSLATION
@see #TYPE_UNIFORM_SCALE
@see #TYPE_GENERAL_SCALE
@see #TYPE_QUADRANT_ROTATION
@see #TYPE_GENERAL_ROTATION
@see #TYPE_GENERAL_TRANSFORM
@see #getType
@since 1.2

"
      end

      attribute 1545090 "TYPE_QUADRANT_ROTATION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " NOTE: TYPE_FLIP was added after GENERAL_TRANSFORM was in public
circulation and the flag bits could no longer be conveniently
renumbered without introducing binary incompatibility in outside
code.


This flag bit indicates that the transform defined by this object
performs a quadrant rotation by some multiple of 90 degrees in
addition to the conversions indicated by other flag bits.
A rotation changes the angles of vectors by the same amount
regardless of the original direction of the vector and without
changing the length of the vector.
This flag bit is mutually exclusive with the TYPE_GENERAL_ROTATION flag.
@see #TYPE_IDENTITY
@see #TYPE_TRANSLATION
@see #TYPE_UNIFORM_SCALE
@see #TYPE_GENERAL_SCALE
@see #TYPE_FLIP
@see #TYPE_GENERAL_ROTATION
@see #TYPE_GENERAL_TRANSFORM
@see #getType
@since 1.2

"
      end

      attribute 1545218 "TYPE_GENERAL_ROTATION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This flag bit indicates that the transform defined by this object
performs a rotation by an arbitrary angle in addition to the
conversions indicated by other flag bits.
A rotation changes the angles of vectors by the same amount
regardless of the original direction of the vector and without
changing the length of the vector.
This flag bit is mutually exclusive with the
TYPE_QUADRANT_ROTATION flag.
@see #TYPE_IDENTITY
@see #TYPE_TRANSLATION
@see #TYPE_UNIFORM_SCALE
@see #TYPE_GENERAL_SCALE
@see #TYPE_FLIP
@see #TYPE_QUADRANT_ROTATION
@see #TYPE_GENERAL_TRANSFORM
@see #getType
@since 1.2

"
      end

      attribute 1545346 "TYPE_MASK_ROTATION"
	class_attribute const_attribute public explicit_type "int"
	init_value " (TYPE_QUADRANT_ROTATION |
                                                  TYPE_GENERAL_ROTATION)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant is a bit mask for any of the rotation flag bits.
@see #TYPE_QUADRANT_ROTATION
@see #TYPE_GENERAL_ROTATION
@since 1.2

"
      end

      attribute 1545474 "TYPE_GENERAL_TRANSFORM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant indicates that the transform defined by this object
performs an arbitrary conversion of the input coordinates.
If this transform can be classified by any of the above constants,
the type will either be the constant TYPE_IDENTITY or a
combination of the appropriate flag bits for the various coordinate
conversions that this transform performs.
@see #TYPE_IDENTITY
@see #TYPE_TRANSLATION
@see #TYPE_UNIFORM_SCALE
@see #TYPE_GENERAL_SCALE
@see #TYPE_FLIP
@see #TYPE_QUADRANT_ROTATION
@see #TYPE_GENERAL_ROTATION
@see #getType
@since 1.2

"
      end

      attribute 1545602 "APPLY_IDENTITY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant is used for the internal state variable to indicate
that no calculations need to be performed and that the source
coordinates only need to be copied to their destinations to
complete the transformation equation of this transform.
@see #APPLY_TRANSLATE
@see #APPLY_SCALE
@see #APPLY_SHEAR
@see #state

"
      end

      attribute 1545730 "APPLY_TRANSLATE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant is used for the internal state variable to indicate
that the translation components of the matrix (m02 and m12) need
to be added to complete the transformation equation of this transform.
@see #APPLY_IDENTITY
@see #APPLY_SCALE
@see #APPLY_SHEAR
@see #state

"
      end

      attribute 1545858 "APPLY_SCALE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant is used for the internal state variable to indicate
that the scaling components of the matrix (m00 and m11) need
to be factored in to complete the transformation equation of
this transform.  If the APPLY_SHEAR bit is also set then it
indicates that the scaling components are not both 0.0.  If the
APPLY_SHEAR bit is not also set then it indicates that the
scaling components are not both 1.0.  If neither the APPLY_SHEAR
nor the APPLY_SCALE bits are set then the scaling components
are both 1.0, which means that the x and y components contribute
to the transformed coordinate, but they are not multiplied by
any scaling factor.
@see #APPLY_IDENTITY
@see #APPLY_TRANSLATE
@see #APPLY_SHEAR
@see #state

"
      end

      attribute 1545986 "APPLY_SHEAR"
	class_attribute const_attribute package explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This constant is used for the internal state variable to indicate
that the shearing components of the matrix (m01 and m10) need
to be factored in to complete the transformation equation of this
transform.  The presence of this bit in the state variable changes
the interpretation of the APPLY_SCALE bit as indicated in its
documentation.
@see #APPLY_IDENTITY
@see #APPLY_TRANSLATE
@see #APPLY_SCALE
@see #state

"
      end

      attribute 1546114 "HI_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "For methods which combine together the state of two separate
transforms and dispatch based upon the combination, these constants
specify how far to shift one of the states so that the two states
are mutually non-interfering and provide constants for testing the
bits of the shifted (HI) state.  The methods in this class use
the convention that the state of \"this\" transform is unshifted and
the state of the \"other\" or \"argument\" transform is shifted (HI).

"
      end

      attribute 1546242 "HI_IDENTITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " APPLY_IDENTITY << HI_SHIFT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1546370 "HI_TRANSLATE"
	class_attribute const_attribute private explicit_type "int"
	init_value " APPLY_TRANSLATE << HI_SHIFT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1546498 "HI_SCALE"
	class_attribute const_attribute private explicit_type "int"
	init_value " APPLY_SCALE << HI_SHIFT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1546626 "HI_SHEAR"
	class_attribute const_attribute private explicit_type "int"
	init_value " APPLY_SHEAR << HI_SHIFT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1546754 "m00"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The X coordinate scaling element of the 3x3
affine transformation matrix.

@serial

"
      end

      attribute 1546882 "m10"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Y coordinate shearing element of the 3x3
affine transformation matrix.

@serial

"
      end

      attribute 1547010 "m01"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The X coordinate shearing element of the 3x3
affine transformation matrix.

@serial

"
      end

      attribute 1547138 "m11"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Y coordinate scaling element of the 3x3
affine transformation matrix.

@serial

"
      end

      attribute 1547266 "m02"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The X coordinate of the translation element of the
3x3 affine transformation matrix.

@serial

"
      end

      attribute 1547394 "m12"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Y coordinate of the translation element of the
3x3 affine transformation matrix.

@serial

"
      end

      attribute 1547522 "state"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This field keeps track of which components of the matrix need to
be applied when performing a transformation.
@see #APPLY_IDENTITY
@see #APPLY_TRANSLATE
@see #APPLY_SCALE
@see #APPLY_SHEAR

"
      end

      attribute 1547650 "type"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This field caches the current transformation type of the matrix.
@see #TYPE_IDENTITY
@see #TYPE_TRANSLATION
@see #TYPE_UNIFORM_SCALE
@see #TYPE_GENERAL_SCALE
@see #TYPE_FLIP
@see #TYPE_QUADRANT_ROTATION
@see #TYPE_GENERAL_ROTATION
@see #TYPE_GENERAL_TRANSFORM
@see #TYPE_UNKNOWN
@see #getType

"
      end

      operation 6499330 "AffineTransform"
	private explicit_return_type ""
	nparams 7
	  param in name "m00" explicit_type "double"
	  param in name "m10" explicit_type "double"
	  param in name "m01" explicit_type "double"
	  param in name "m11" explicit_type "double"
	  param in name "m02" explicit_type "double"
	  param in name "m12" explicit_type "double"
	  param in name "state" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6499458 "AffineTransform"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>AffineTransform</code> representing the
Identity transformation.
@since 1.2
"
      end

      operation 6499586 "AffineTransform"
	public explicit_return_type ""
	nparams 1
	  param inout name "Tx" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>AffineTransform</code> that is a copy of
the specified <code>AffineTransform</code> object.
@param Tx the <code>AffineTransform</code> object to copy
@since 1.2
"
      end

      operation 6499714 "AffineTransform"
	public explicit_return_type ""
	nparams 6
	  param in name "m00" explicit_type "float"
	  param in name "m10" explicit_type "float"
	  param in name "m01" explicit_type "float"
	  param in name "m11" explicit_type "float"
	  param in name "m02" explicit_type "float"
	  param in name "m12" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ConstructorProperties({ \"scaleX\", \"shearY\", \"shearX\", \"scaleY\", \"translateX\", \"translateY\" })
"
	
	
	
	comment "Constructs a new <code>AffineTransform</code> from 6 floating point
values representing the 6 specifiable entries of the 3x3
transformation matrix.

@param m00 the X coordinate scaling element of the 3x3 matrix
@param m10 the Y coordinate shearing element of the 3x3 matrix
@param m01 the X coordinate shearing element of the 3x3 matrix
@param m11 the Y coordinate scaling element of the 3x3 matrix
@param m02 the X coordinate translation element of the 3x3 matrix
@param m12 the Y coordinate translation element of the 3x3 matrix
@since 1.2
"
      end

      operation 6499842 "AffineTransform"
	public explicit_return_type ""
	nparams 1
	  param inout name "flatmatrix" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>AffineTransform</code> from an array of
floating point values representing either the 4 non-translation
entries or the 6 specifiable entries of the 3x3 transformation
matrix.  The values are retrieved from the array as
{&nbsp;m00&nbsp;m10&nbsp;m01&nbsp;m11&nbsp;[m02&nbsp;m12]}.
@param flatmatrix the float array containing the values to be set
in the new <code>AffineTransform</code> object. The length of the
array is assumed to be at least 4. If the length of the array is
less than 6, only the first 4 values are taken. If the length of
the array is greater than 6, the first 6 values are taken.
@since 1.2
"
      end

      operation 6499970 "AffineTransform"
	public explicit_return_type ""
	nparams 6
	  param in name "m00" explicit_type "double"
	  param in name "m10" explicit_type "double"
	  param in name "m01" explicit_type "double"
	  param in name "m11" explicit_type "double"
	  param in name "m02" explicit_type "double"
	  param in name "m12" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>AffineTransform</code> from 6 double
precision values representing the 6 specifiable entries of the 3x3
transformation matrix.

@param m00 the X coordinate scaling element of the 3x3 matrix
@param m10 the Y coordinate shearing element of the 3x3 matrix
@param m01 the X coordinate shearing element of the 3x3 matrix
@param m11 the Y coordinate scaling element of the 3x3 matrix
@param m02 the X coordinate translation element of the 3x3 matrix
@param m12 the Y coordinate translation element of the 3x3 matrix
@since 1.2
"
      end

      operation 6500098 "AffineTransform"
	public explicit_return_type ""
	nparams 1
	  param inout name "flatmatrix" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>AffineTransform</code> from an array of
double precision values representing either the 4 non-translation
entries or the 6 specifiable entries of the 3x3 transformation
matrix. The values are retrieved from the array as
{&nbsp;m00&nbsp;m10&nbsp;m01&nbsp;m11&nbsp;[m02&nbsp;m12]}.
@param flatmatrix the double array containing the values to be set
in the new <code>AffineTransform</code> object. The length of the
array is assumed to be at least 4. If the length of the array is
less than 6, only the first 4 values are taken. If the length of
the array is greater than 6, the first 6 values are taken.
@since 1.2
"
      end

      operation 6500226 "getTranslateInstance"
	class_operation public return_type class_ref 381058 // AffineTransform
	nparams 2
	  param in name "tx" explicit_type "double"
	  param in name "ty" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a transform representing a translation transformation.
The matrix representing the returned transform is:
<pre>
         [   1    0    tx  ]
         [   0    1    ty  ]
         [   0    0    1   ]
</pre>
@param tx the distance by which coordinates are translated in the
X axis direction
@param ty the distance by which coordinates are translated in the
Y axis direction
@return an <code>AffineTransform</code> object that represents a
 translation transformation, created with the specified vector.
@since 1.2
"
      end

      operation 6500354 "getRotateInstance"
	class_operation public return_type class_ref 381058 // AffineTransform
	nparams 1
	  param in name "theta" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a transform representing a rotation transformation.
The matrix representing the returned transform is:
<pre>
         [   cos(theta)    -sin(theta)    0   ]
         [   sin(theta)     cos(theta)    0   ]
         [       0              0         1   ]
</pre>
Rotating by a positive angle theta rotates points on the positive
X axis toward the positive Y axis.
Note also the discussion of
<a href=\"#quadrantapproximation\">Handling 90-Degree Rotations</a>
above.
@param theta the angle of rotation measured in radians
@return an <code>AffineTransform</code> object that is a rotation
 transformation, created with the specified angle of rotation.
@since 1.2
"
      end

      operation 6500482 "getRotateInstance"
	class_operation public return_type class_ref 381058 // AffineTransform
	nparams 3
	  param in name "theta" explicit_type "double"
	  param in name "anchorx" explicit_type "double"
	  param in name "anchory" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a transform that rotates coordinates around an anchor point.
This operation is equivalent to translating the coordinates so
that the anchor point is at the origin (S1), then rotating them
about the new origin (S2), and finally translating so that the
intermediate origin is restored to the coordinates of the original
anchor point (S3).
<p>
This operation is equivalent to the following sequence of calls:
<pre>
    AffineTransform Tx = new AffineTransform();
    Tx.translate(anchorx, anchory);    // S3: final translation
    Tx.rotate(theta);                  // S2: rotate around anchor
    Tx.translate(-anchorx, -anchory);  // S1: translate anchor to origin
</pre>
The matrix representing the returned transform is:
<pre>
         [   cos(theta)    -sin(theta)    x-x*cos+y*sin  ]
         [   sin(theta)     cos(theta)    y-x*sin-y*cos  ]
         [       0              0               1        ]
</pre>
Rotating by a positive angle theta rotates points on the positive
X axis toward the positive Y axis.
Note also the discussion of
<a href=\"#quadrantapproximation\">Handling 90-Degree Rotations</a>
above.

@param theta the angle of rotation measured in radians
@param anchorx the X coordinate of the rotation anchor point
@param anchory the Y coordinate of the rotation anchor point
@return an <code>AffineTransform</code> object that rotates
 coordinates around the specified point by the specified angle of
 rotation.
@since 1.2
"
      end

      operation 6500610 "getRotateInstance"
	class_operation public return_type class_ref 381058 // AffineTransform
	nparams 2
	  param in name "vecx" explicit_type "double"
	  param in name "vecy" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a transform that rotates coordinates according to
a rotation vector.
All coordinates rotate about the origin by the same amount.
The amount of rotation is such that coordinates along the former
positive X axis will subsequently align with the vector pointing
from the origin to the specified vector coordinates.
If both <code>vecx</code> and <code>vecy</code> are 0.0,
an identity transform is returned.
This operation is equivalent to calling:
<pre>
    AffineTransform.getRotateInstance(Math.atan2(vecy, vecx));
</pre>

@param vecx the X coordinate of the rotation vector
@param vecy the Y coordinate of the rotation vector
@return an <code>AffineTransform</code> object that rotates
 coordinates according to the specified rotation vector.
@since 1.6
"
      end

      operation 6500738 "getRotateInstance"
	class_operation public return_type class_ref 381058 // AffineTransform
	nparams 4
	  param in name "vecx" explicit_type "double"
	  param in name "vecy" explicit_type "double"
	  param in name "anchorx" explicit_type "double"
	  param in name "anchory" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a transform that rotates coordinates around an anchor
point according to a rotation vector.
All coordinates rotate about the specified anchor coordinates
by the same amount.
The amount of rotation is such that coordinates along the former
positive X axis will subsequently align with the vector pointing
from the origin to the specified vector coordinates.
If both <code>vecx</code> and <code>vecy</code> are 0.0,
an identity transform is returned.
This operation is equivalent to calling:
<pre>
    AffineTransform.getRotateInstance(Math.atan2(vecy, vecx),
                                      anchorx, anchory);
</pre>

@param vecx the X coordinate of the rotation vector
@param vecy the Y coordinate of the rotation vector
@param anchorx the X coordinate of the rotation anchor point
@param anchory the Y coordinate of the rotation anchor point
@return an <code>AffineTransform</code> object that rotates
 coordinates around the specified point according to the
 specified rotation vector.
@since 1.6
"
      end

      operation 6500866 "getQuadrantRotateInstance"
	class_operation public return_type class_ref 381058 // AffineTransform
	nparams 1
	  param in name "numquadrants" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a transform that rotates coordinates by the specified
number of quadrants.
This operation is equivalent to calling:
<pre>
    AffineTransform.getRotateInstance(numquadrants * Math.PI / 2.0);
</pre>
Rotating by a positive number of quadrants rotates points on
the positive X axis toward the positive Y axis.
@param numquadrants the number of 90 degree arcs to rotate by
@return an <code>AffineTransform</code> object that rotates
 coordinates by the specified number of quadrants.
@since 1.6
"
      end

      operation 6500994 "getQuadrantRotateInstance"
	class_operation public return_type class_ref 381058 // AffineTransform
	nparams 3
	  param in name "numquadrants" explicit_type "int"
	  param in name "anchorx" explicit_type "double"
	  param in name "anchory" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a transform that rotates coordinates by the specified
number of quadrants around the specified anchor point.
This operation is equivalent to calling:
<pre>
    AffineTransform.getRotateInstance(numquadrants * Math.PI / 2.0,
                                      anchorx, anchory);
</pre>
Rotating by a positive number of quadrants rotates points on
the positive X axis toward the positive Y axis.

@param numquadrants the number of 90 degree arcs to rotate by
@param anchorx the X coordinate of the rotation anchor point
@param anchory the Y coordinate of the rotation anchor point
@return an <code>AffineTransform</code> object that rotates
 coordinates by the specified number of quadrants around the
 specified anchor point.
@since 1.6
"
      end

      operation 6501122 "getScaleInstance"
	class_operation public return_type class_ref 381058 // AffineTransform
	nparams 2
	  param in name "sx" explicit_type "double"
	  param in name "sy" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a transform representing a scaling transformation.
The matrix representing the returned transform is:
<pre>
         [   sx   0    0   ]
         [   0    sy   0   ]
         [   0    0    1   ]
</pre>
@param sx the factor by which coordinates are scaled along the
X axis direction
@param sy the factor by which coordinates are scaled along the
Y axis direction
@return an <code>AffineTransform</code> object that scales
 coordinates by the specified factors.
@since 1.2
"
      end

      operation 6501250 "getShearInstance"
	class_operation public return_type class_ref 381058 // AffineTransform
	nparams 2
	  param in name "shx" explicit_type "double"
	  param in name "shy" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a transform representing a shearing transformation.
The matrix representing the returned transform is:
<pre>
         [   1   shx   0   ]
         [  shy   1    0   ]
         [   0    0    1   ]
</pre>
@param shx the multiplier by which coordinates are shifted in the
direction of the positive X axis as a factor of their Y coordinate
@param shy the multiplier by which coordinates are shifted in the
direction of the positive Y axis as a factor of their X coordinate
@return an <code>AffineTransform</code> object that shears
 coordinates by the specified multipliers.
@since 1.2
"
      end

      operation 6501378 "getType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the flag bits describing the conversion properties of
this transform.
The return value is either one of the constants TYPE_IDENTITY
or TYPE_GENERAL_TRANSFORM, or a combination of the
appropriate flag bits.
A valid combination of flag bits is an exclusive OR operation
that can combine
the TYPE_TRANSLATION flag bit
in addition to either of the
TYPE_UNIFORM_SCALE or TYPE_GENERAL_SCALE flag bits
as well as either of the
TYPE_QUADRANT_ROTATION or TYPE_GENERAL_ROTATION flag bits.
@return the OR combination of any of the indicated flags that
apply to this transform
@see #TYPE_IDENTITY
@see #TYPE_TRANSLATION
@see #TYPE_UNIFORM_SCALE
@see #TYPE_GENERAL_SCALE
@see #TYPE_QUADRANT_ROTATION
@see #TYPE_GENERAL_ROTATION
@see #TYPE_GENERAL_TRANSFORM
@since 1.2
"
      end

      operation 6501506 "calculateType"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
	comment "This is the utility function to calculate the flag bits when
they have not been cached.
@see #getType
"
      end

      operation 6501634 "getDeterminant"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
	comment "Returns the determinant of the matrix representation of the transform.
The determinant is useful both to determine if the transform can
be inverted and to get a single value representing the
combined X and Y scaling of the transform.
<p>
If the determinant is non-zero, then this transform is
invertible and the various methods that depend on the inverse
transform do not need to throw a
{@link NoninvertibleTransformException}.
If the determinant is zero then this transform can not be
inverted since the transform maps all input coordinates onto
a line or a point.
If the determinant is near enough to zero then inverse transform
operations might not carry enough precision to produce meaningful
results.
<p>
If this transform represents a uniform scale, as indicated by
the <code>getType</code> method then the determinant also
represents the square of the uniform scale factor by which all of
the points are expanded from or contracted towards the origin.
If this transform represents a non-uniform scale or more general
transform then the determinant is not likely to represent a
value useful for any purpose other than determining if inverse
transforms are possible.
<p>
Mathematically, the determinant is calculated using the formula:
<pre>
         |  m00  m01  m02  |
         |  m10  m11  m12  |  =  m00 * m11 - m01 * m10
         |   0    0    1   |
</pre>

@return the determinant of the matrix used to transform the
coordinates.
@see #getType
@see #createInverse
@see #inverseTransform
@see #TYPE_UNIFORM_SCALE
@since 1.2
"
      end

      operation 6501762 "updateState"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Manually recalculates the state of the transform when the matrix
changes too much to predict the effects on the state.
The following table specifies what the various settings of the
state field say about the values of the corresponding matrix
element fields.
Note that the rules governing the SCALE fields are slightly
different depending on whether the SHEAR flag is also set.
<pre>
                    SCALE            SHEAR          TRANSLATE
                   m00/m11          m01/m10          m02/m12

IDENTITY             1.0              0.0              0.0
TRANSLATE (TR)       1.0              0.0          not both 0.0
SCALE (SC)       not both 1.0         0.0              0.0
TR | SC          not both 1.0         0.0          not both 0.0
SHEAR (SH)           0.0          not both 0.0         0.0
TR | SH              0.0          not both 0.0     not both 0.0
SC | SH          not both 0.0     not both 0.0         0.0
TR | SC | SH     not both 0.0     not both 0.0     not both 0.0
</pre>
"
      end

      operation 6501890 "stateError"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method used internally to throw exceptions when
a case was forgotten in a switch statement.
"
      end

      operation 6502018 "getMatrix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flatmatrix" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the 6 specifiable values in the 3x3 affine transformation
matrix and places them into an array of double precisions values.
The values are stored in the array as
{&nbsp;m00&nbsp;m10&nbsp;m01&nbsp;m11&nbsp;m02&nbsp;m12&nbsp;}.
An array of 4 doubles can also be specified, in which case only the
first four elements representing the non-transform
parts of the array are retrieved and the values are stored into
the array as {&nbsp;m00&nbsp;m10&nbsp;m01&nbsp;m11&nbsp;}
@param flatmatrix the double array used to store the returned
values.
@see #getScaleX
@see #getScaleY
@see #getShearX
@see #getShearY
@see #getTranslateX
@see #getTranslateY
@since 1.2
"
      end

      operation 6502146 "getScaleX"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate scaling element (m00) of the 3x3
affine transformation matrix.
@return a double value that is the X coordinate of the scaling
 element of the affine transformation matrix.
@see #getMatrix
@since 1.2
"
      end

      operation 6502274 "getScaleY"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate scaling element (m11) of the 3x3
affine transformation matrix.
@return a double value that is the Y coordinate of the scaling
 element of the affine transformation matrix.
@see #getMatrix
@since 1.2
"
      end

      operation 6502402 "getShearX"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate shearing element (m01) of the 3x3
affine transformation matrix.
@return a double value that is the X coordinate of the shearing
 element of the affine transformation matrix.
@see #getMatrix
@since 1.2
"
      end

      operation 6502530 "getShearY"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate shearing element (m10) of the 3x3
affine transformation matrix.
@return a double value that is the Y coordinate of the shearing
 element of the affine transformation matrix.
@see #getMatrix
@since 1.2
"
      end

      operation 6502658 "getTranslateX"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the translation element (m02) of the
3x3 affine transformation matrix.
@return a double value that is the X coordinate of the translation
 element of the affine transformation matrix.
@see #getMatrix
@since 1.2
"
      end

      operation 6502786 "getTranslateY"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the translation element (m12) of the
3x3 affine transformation matrix.
@return a double value that is the Y coordinate of the translation
 element of the affine transformation matrix.
@see #getMatrix
@since 1.2
"
      end

      operation 6502914 "translate"
	public explicit_return_type "void"
	nparams 2
	  param in name "tx" explicit_type "double"
	  param in name "ty" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Concatenates this transform with a translation transformation.
This is equivalent to calling concatenate(T), where T is an
<code>AffineTransform</code> represented by the following matrix:
<pre>
         [   1    0    tx  ]
         [   0    1    ty  ]
         [   0    0    1   ]
</pre>
@param tx the distance by which coordinates are translated in the
X axis direction
@param ty the distance by which coordinates are translated in the
Y axis direction
@since 1.2
"
      end

      attribute 1547778 "rot90conversion"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        /* IDENTITY => */        APPLY_SHEAR,
        /* TRANSLATE (TR) => */  APPLY_SHEAR | APPLY_TRANSLATE,
        /* SCALE (SC) => */      APPLY_SHEAR,
        /* SC | TR => */         APPLY_SHEAR | APPLY_TRANSLATE,
        /* SHEAR (SH) => */      APPLY_SCALE,
        /* SH | TR => */         APPLY_SCALE | APPLY_TRANSLATE,
        /* SH | SC => */         APPLY_SHEAR | APPLY_SCALE,
        /* SH | SC | TR => */    APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Utility methods to optimize rotate methods.
 These tables translate the flags during predictable quadrant
 rotations where the shear and scale values are swapped and negated.
"
      end

      operation 6503042 "rotate90"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6503170 "rotate180"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6503298 "rotate270"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6503426 "rotate"
	public explicit_return_type "void"
	nparams 1
	  param in name "theta" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Concatenates this transform with a rotation transformation.
This is equivalent to calling concatenate(R), where R is an
<code>AffineTransform</code> represented by the following matrix:
<pre>
         [   cos(theta)    -sin(theta)    0   ]
         [   sin(theta)     cos(theta)    0   ]
         [       0              0         1   ]
</pre>
Rotating by a positive angle theta rotates points on the positive
X axis toward the positive Y axis.
Note also the discussion of
<a href=\"#quadrantapproximation\">Handling 90-Degree Rotations</a>
above.
@param theta the angle of rotation measured in radians
@since 1.2
"
      end

      operation 6503554 "rotate"
	public explicit_return_type "void"
	nparams 3
	  param in name "theta" explicit_type "double"
	  param in name "anchorx" explicit_type "double"
	  param in name "anchory" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Concatenates this transform with a transform that rotates
coordinates around an anchor point.
This operation is equivalent to translating the coordinates so
that the anchor point is at the origin (S1), then rotating them
about the new origin (S2), and finally translating so that the
intermediate origin is restored to the coordinates of the original
anchor point (S3).
<p>
This operation is equivalent to the following sequence of calls:
<pre>
    translate(anchorx, anchory);      // S3: final translation
    rotate(theta);                    // S2: rotate around anchor
    translate(-anchorx, -anchory);    // S1: translate anchor to origin
</pre>
Rotating by a positive angle theta rotates points on the positive
X axis toward the positive Y axis.
Note also the discussion of
<a href=\"#quadrantapproximation\">Handling 90-Degree Rotations</a>
above.

@param theta the angle of rotation measured in radians
@param anchorx the X coordinate of the rotation anchor point
@param anchory the Y coordinate of the rotation anchor point
@since 1.2
"
      end

      operation 6503682 "rotate"
	public explicit_return_type "void"
	nparams 2
	  param in name "vecx" explicit_type "double"
	  param in name "vecy" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Concatenates this transform with a transform that rotates
coordinates according to a rotation vector.
All coordinates rotate about the origin by the same amount.
The amount of rotation is such that coordinates along the former
positive X axis will subsequently align with the vector pointing
from the origin to the specified vector coordinates.
If both <code>vecx</code> and <code>vecy</code> are 0.0,
no additional rotation is added to this transform.
This operation is equivalent to calling:
<pre>
         rotate(Math.atan2(vecy, vecx));
</pre>

@param vecx the X coordinate of the rotation vector
@param vecy the Y coordinate of the rotation vector
@since 1.6
"
      end

      operation 6503810 "rotate"
	public explicit_return_type "void"
	nparams 4
	  param in name "vecx" explicit_type "double"
	  param in name "vecy" explicit_type "double"
	  param in name "anchorx" explicit_type "double"
	  param in name "anchory" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Concatenates this transform with a transform that rotates
coordinates around an anchor point according to a rotation
vector.
All coordinates rotate about the specified anchor coordinates
by the same amount.
The amount of rotation is such that coordinates along the former
positive X axis will subsequently align with the vector pointing
from the origin to the specified vector coordinates.
If both <code>vecx</code> and <code>vecy</code> are 0.0,
the transform is not modified in any way.
This method is equivalent to calling:
<pre>
    rotate(Math.atan2(vecy, vecx), anchorx, anchory);
</pre>

@param vecx the X coordinate of the rotation vector
@param vecy the Y coordinate of the rotation vector
@param anchorx the X coordinate of the rotation anchor point
@param anchory the Y coordinate of the rotation anchor point
@since 1.6
"
      end

      operation 6503938 "quadrantRotate"
	public explicit_return_type "void"
	nparams 1
	  param in name "numquadrants" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Concatenates this transform with a transform that rotates
coordinates by the specified number of quadrants.
This is equivalent to calling:
<pre>
    rotate(numquadrants * Math.PI / 2.0);
</pre>
Rotating by a positive number of quadrants rotates points on
the positive X axis toward the positive Y axis.
@param numquadrants the number of 90 degree arcs to rotate by
@since 1.6
"
      end

      operation 6504066 "quadrantRotate"
	public explicit_return_type "void"
	nparams 3
	  param in name "numquadrants" explicit_type "int"
	  param in name "anchorx" explicit_type "double"
	  param in name "anchory" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Concatenates this transform with a transform that rotates
coordinates by the specified number of quadrants around
the specified anchor point.
This method is equivalent to calling:
<pre>
    rotate(numquadrants * Math.PI / 2.0, anchorx, anchory);
</pre>
Rotating by a positive number of quadrants rotates points on
the positive X axis toward the positive Y axis.

@param numquadrants the number of 90 degree arcs to rotate by
@param anchorx the X coordinate of the rotation anchor point
@param anchory the Y coordinate of the rotation anchor point
@since 1.6
"
      end

      operation 6504194 "scale"
	public explicit_return_type "void"
	nparams 2
	  param in name "sx" explicit_type "double"
	  param in name "sy" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
	comment "Concatenates this transform with a scaling transformation.
This is equivalent to calling concatenate(S), where S is an
<code>AffineTransform</code> represented by the following matrix:
<pre>
         [   sx   0    0   ]
         [   0    sy   0   ]
         [   0    0    1   ]
</pre>
@param sx the factor by which coordinates are scaled along the
X axis direction
@param sy the factor by which coordinates are scaled along the
Y axis direction
@since 1.2
"
      end

      operation 6504322 "shear"
	public explicit_return_type "void"
	nparams 2
	  param in name "shx" explicit_type "double"
	  param in name "shy" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Concatenates this transform with a shearing transformation.
This is equivalent to calling concatenate(SH), where SH is an
<code>AffineTransform</code> represented by the following matrix:
<pre>
         [   1   shx   0   ]
         [  shy   1    0   ]
         [   0    0    1   ]
</pre>
@param shx the multiplier by which coordinates are shifted in the
direction of the positive X axis as a factor of their Y coordinate
@param shy the multiplier by which coordinates are shifted in the
direction of the positive Y axis as a factor of their X coordinate
@since 1.2
"
      end

      operation 6504450 "setToIdentity"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this transform to the Identity transform.
@since 1.2
"
      end

      operation 6504578 "setToTranslation"
	public explicit_return_type "void"
	nparams 2
	  param in name "tx" explicit_type "double"
	  param in name "ty" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to a translation transformation.
The matrix representing this transform becomes:
<pre>
         [   1    0    tx  ]
         [   0    1    ty  ]
         [   0    0    1   ]
</pre>
@param tx the distance by which coordinates are translated in the
X axis direction
@param ty the distance by which coordinates are translated in the
Y axis direction
@since 1.2
"
      end

      operation 6504706 "setToRotation"
	public explicit_return_type "void"
	nparams 1
	  param in name "theta" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to a rotation transformation.
The matrix representing this transform becomes:
<pre>
         [   cos(theta)    -sin(theta)    0   ]
         [   sin(theta)     cos(theta)    0   ]
         [       0              0         1   ]
</pre>
Rotating by a positive angle theta rotates points on the positive
X axis toward the positive Y axis.
Note also the discussion of
<a href=\"#quadrantapproximation\">Handling 90-Degree Rotations</a>
above.
@param theta the angle of rotation measured in radians
@since 1.2
"
      end

      operation 6504834 "setToRotation"
	public explicit_return_type "void"
	nparams 3
	  param in name "theta" explicit_type "double"
	  param in name "anchorx" explicit_type "double"
	  param in name "anchory" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to a translated rotation transformation.
This operation is equivalent to translating the coordinates so
that the anchor point is at the origin (S1), then rotating them
about the new origin (S2), and finally translating so that the
intermediate origin is restored to the coordinates of the original
anchor point (S3).
<p>
This operation is equivalent to the following sequence of calls:
<pre>
    setToTranslation(anchorx, anchory); // S3: final translation
    rotate(theta);                      // S2: rotate around anchor
    translate(-anchorx, -anchory);      // S1: translate anchor to origin
</pre>
The matrix representing this transform becomes:
<pre>
         [   cos(theta)    -sin(theta)    x-x*cos+y*sin  ]
         [   sin(theta)     cos(theta)    y-x*sin-y*cos  ]
         [       0              0               1        ]
</pre>
Rotating by a positive angle theta rotates points on the positive
X axis toward the positive Y axis.
Note also the discussion of
<a href=\"#quadrantapproximation\">Handling 90-Degree Rotations</a>
above.

@param theta the angle of rotation measured in radians
@param anchorx the X coordinate of the rotation anchor point
@param anchory the Y coordinate of the rotation anchor point
@since 1.2
"
      end

      operation 6504962 "setToRotation"
	public explicit_return_type "void"
	nparams 2
	  param in name "vecx" explicit_type "double"
	  param in name "vecy" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to a rotation transformation that rotates
coordinates according to a rotation vector.
All coordinates rotate about the origin by the same amount.
The amount of rotation is such that coordinates along the former
positive X axis will subsequently align with the vector pointing
from the origin to the specified vector coordinates.
If both <code>vecx</code> and <code>vecy</code> are 0.0,
the transform is set to an identity transform.
This operation is equivalent to calling:
<pre>
    setToRotation(Math.atan2(vecy, vecx));
</pre>

@param vecx the X coordinate of the rotation vector
@param vecy the Y coordinate of the rotation vector
@since 1.6
"
      end

      operation 6505090 "setToRotation"
	public explicit_return_type "void"
	nparams 4
	  param in name "vecx" explicit_type "double"
	  param in name "vecy" explicit_type "double"
	  param in name "anchorx" explicit_type "double"
	  param in name "anchory" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to a rotation transformation that rotates
coordinates around an anchor point according to a rotation
vector.
All coordinates rotate about the specified anchor coordinates
by the same amount.
The amount of rotation is such that coordinates along the former
positive X axis will subsequently align with the vector pointing
from the origin to the specified vector coordinates.
If both <code>vecx</code> and <code>vecy</code> are 0.0,
the transform is set to an identity transform.
This operation is equivalent to calling:
<pre>
    setToTranslation(Math.atan2(vecy, vecx), anchorx, anchory);
</pre>

@param vecx the X coordinate of the rotation vector
@param vecy the Y coordinate of the rotation vector
@param anchorx the X coordinate of the rotation anchor point
@param anchory the Y coordinate of the rotation anchor point
@since 1.6
"
      end

      operation 6505218 "setToQuadrantRotation"
	public explicit_return_type "void"
	nparams 1
	  param in name "numquadrants" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to a rotation transformation that rotates
coordinates by the specified number of quadrants.
This operation is equivalent to calling:
<pre>
    setToRotation(numquadrants * Math.PI / 2.0);
</pre>
Rotating by a positive number of quadrants rotates points on
the positive X axis toward the positive Y axis.
@param numquadrants the number of 90 degree arcs to rotate by
@since 1.6
"
      end

      operation 6505346 "setToQuadrantRotation"
	public explicit_return_type "void"
	nparams 3
	  param in name "numquadrants" explicit_type "int"
	  param in name "anchorx" explicit_type "double"
	  param in name "anchory" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to a translated rotation transformation
that rotates coordinates by the specified number of quadrants
around the specified anchor point.
This operation is equivalent to calling:
<pre>
    setToRotation(numquadrants * Math.PI / 2.0, anchorx, anchory);
</pre>
Rotating by a positive number of quadrants rotates points on
the positive X axis toward the positive Y axis.

@param numquadrants the number of 90 degree arcs to rotate by
@param anchorx the X coordinate of the rotation anchor point
@param anchory the Y coordinate of the rotation anchor point
@since 1.6
"
      end

      operation 6505474 "setToScale"
	public explicit_return_type "void"
	nparams 2
	  param in name "sx" explicit_type "double"
	  param in name "sy" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to a scaling transformation.
The matrix representing this transform becomes:
<pre>
         [   sx   0    0   ]
         [   0    sy   0   ]
         [   0    0    1   ]
</pre>
@param sx the factor by which coordinates are scaled along the
X axis direction
@param sy the factor by which coordinates are scaled along the
Y axis direction
@since 1.2
"
      end

      operation 6505602 "setToShear"
	public explicit_return_type "void"
	nparams 2
	  param in name "shx" explicit_type "double"
	  param in name "shy" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to a shearing transformation.
The matrix representing this transform becomes:
<pre>
         [   1   shx   0   ]
         [  shy   1    0   ]
         [   0    0    1   ]
</pre>
@param shx the multiplier by which coordinates are shifted in the
direction of the positive X axis as a factor of their Y coordinate
@param shy the multiplier by which coordinates are shifted in the
direction of the positive Y axis as a factor of their X coordinate
@since 1.2
"
      end

      operation 6505730 "setTransform"
	public explicit_return_type "void"
	nparams 1
	  param inout name "Tx" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to a copy of the transform in the specified
<code>AffineTransform</code> object.
@param Tx the <code>AffineTransform</code> object from which to
copy the transform
@since 1.2
"
      end

      operation 6505858 "setTransform"
	public explicit_return_type "void"
	nparams 6
	  param in name "m00" explicit_type "double"
	  param in name "m10" explicit_type "double"
	  param in name "m01" explicit_type "double"
	  param in name "m11" explicit_type "double"
	  param in name "m02" explicit_type "double"
	  param in name "m12" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to the matrix specified by the 6
double precision values.

@param m00 the X coordinate scaling element of the 3x3 matrix
@param m10 the Y coordinate shearing element of the 3x3 matrix
@param m01 the X coordinate shearing element of the 3x3 matrix
@param m11 the Y coordinate scaling element of the 3x3 matrix
@param m02 the X coordinate translation element of the 3x3 matrix
@param m12 the Y coordinate translation element of the 3x3 matrix
@since 1.2
"
      end

      operation 6505986 "concatenate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "Tx" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
	comment "Concatenates an <code>AffineTransform</code> <code>Tx</code> to
this <code>AffineTransform</code> Cx in the most commonly useful
way to provide a new user space
that is mapped to the former user space by <code>Tx</code>.
Cx is updated to perform the combined transformation.
Transforming a point p by the updated transform Cx' is
equivalent to first transforming p by <code>Tx</code> and then
transforming the result by the original transform Cx like this:
Cx'(p) = Cx(Tx(p))
In matrix notation, if this transform Cx is
represented by the matrix [this] and <code>Tx</code> is represented
by the matrix [Tx] then this method does the following:
<pre>
         [this] = [this] x [Tx]
</pre>
@param Tx the <code>AffineTransform</code> object to be
concatenated with this <code>AffineTransform</code> object.
@see #preConcatenate
@since 1.2
"
      end

      operation 6506114 "preConcatenate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "Tx" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
	comment "Concatenates an <code>AffineTransform</code> <code>Tx</code> to
this <code>AffineTransform</code> Cx
in a less commonly used way such that <code>Tx</code> modifies the
coordinate transformation relative to the absolute pixel
space rather than relative to the existing user space.
Cx is updated to perform the combined transformation.
Transforming a point p by the updated transform Cx' is
equivalent to first transforming p by the original transform
Cx and then transforming the result by
<code>Tx</code> like this:
Cx'(p) = Tx(Cx(p))
In matrix notation, if this transform Cx
is represented by the matrix [this] and <code>Tx</code> is
represented by the matrix [Tx] then this method does the
following:
<pre>
         [this] = [Tx] x [this]
</pre>
@param Tx the <code>AffineTransform</code> object to be
concatenated with this <code>AffineTransform</code> object.
@see #concatenate
@since 1.2
"
      end

      operation 6506242 "createInverse"
	public return_type class_ref 381058 // AffineTransform
	nparams 0
	nexceptions 1
	  exception class_ref 890370 // NoninvertibleTransformException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>AffineTransform</code> object representing the
inverse transformation.
The inverse transform Tx' of this transform Tx
maps coordinates transformed by Tx back
to their original coordinates.
In other words, Tx'(Tx(p)) = p = Tx(Tx'(p)).
<p>
If this transform maps all coordinates onto a point or a line
then it will not have an inverse, since coordinates that do
not lie on the destination point or line will not have an inverse
mapping.
The <code>getDeterminant</code> method can be used to determine if this
transform has no inverse, in which case an exception will be
thrown if the <code>createInverse</code> method is called.
@return a new <code>AffineTransform</code> object representing the
inverse transformation.
@see #getDeterminant
@exception NoninvertibleTransformException
if the matrix cannot be inverted.
@since 1.2
"
      end

      operation 6506370 "invert"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 890370 // NoninvertibleTransformException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this transform to the inverse of itself.
The inverse transform Tx' of this transform Tx
maps coordinates transformed by Tx back
to their original coordinates.
In other words, Tx'(Tx(p)) = p = Tx(Tx'(p)).
<p>
If this transform maps all coordinates onto a point or a line
then it will not have an inverse, since coordinates that do
not lie on the destination point or line will not have an inverse
mapping.
The <code>getDeterminant</code> method can be used to determine if this
transform has no inverse, in which case an exception will be
thrown if the <code>invert</code> method is called.
@see #getDeterminant
@exception NoninvertibleTransformException
if the matrix cannot be inverted.
@since 1.6
"
      end

      operation 6506498 "transform"
	public return_type class_ref 380802 // Point2D
	nparams 2
	  param inout name "ptSrc" type class_ref 380802 // Point2D
	  param inout name "ptDst" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms the specified <code>ptSrc</code> and stores the result
in <code>ptDst</code>.
If <code>ptDst</code> is <code>null</code>, a new {@link Point2D}
object is allocated and then the result of the transformation is
stored in this object.
In either case, <code>ptDst</code>, which contains the
transformed point, is returned for convenience.
If <code>ptSrc</code> and <code>ptDst</code> are the same
object, the input point is correctly overwritten with
the transformed point.
@param ptSrc the specified <code>Point2D</code> to be transformed
@param ptDst the specified <code>Point2D</code> that stores the
result of transforming <code>ptSrc</code>
@return the <code>ptDst</code> after transforming
<code>ptSrc</code> and storing the result in <code>ptDst</code>.
@since 1.2
"
      end

      operation 6506626 "transform"
	public explicit_return_type "void"
	nparams 5
	  param inout name "ptSrc" type class_ref 380802 // Point2D
	multiplicity "[]"
	  param in name "srcOff" explicit_type "int"
	  param inout name "ptDst" type class_ref 380802 // Point2D
	multiplicity "[]"
	  param in name "dstOff" explicit_type "int"
	  param in name "numPts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms an array of point objects by this transform.
If any element of the <code>ptDst</code> array is
<code>null</code>, a new <code>Point2D</code> object is allocated
and stored into that element before storing the results of the
transformation.
<p>
Note that this method does not take any precautions to
avoid problems caused by storing results into <code>Point2D</code>
objects that will be used as the source for calculations
further down the source array.
This method does guarantee that if a specified <code>Point2D</code>
object is both the source and destination for the same single point
transform operation then the results will not be stored until
the calculations are complete to avoid storing the results on
top of the operands.
If, however, the destination <code>Point2D</code> object for one
operation is the same object as the source <code>Point2D</code>
object for another operation further down the source array then
the original coordinates in that point are overwritten before
they can be converted.
@param ptSrc the array containing the source point objects
@param ptDst the array into which the transform point objects are
returned
@param srcOff the offset to the first point object to be
transformed in the source array
@param dstOff the offset to the location of the first
transformed point object that is stored in the destination array
@param numPts the number of point objects to be transformed
@since 1.2
"
      end

      operation 6506754 "transform"
	public explicit_return_type "void"
	nparams 5
	  param inout name "srcPts" explicit_type "float"
	multiplicity "[]"
	  param in name "srcOff" explicit_type "int"
	  param inout name "dstPts" explicit_type "float"
	multiplicity "[]"
	  param in name "dstOff" explicit_type "int"
	  param in name "numPts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms an array of floating point coordinates by this transform.
The two coordinate array sections can be exactly the same or
can be overlapping sections of the same array without affecting the
validity of the results.
This method ensures that no source coordinates are overwritten by a
previous operation before they can be transformed.
The coordinates are stored in the arrays starting at the specified
offset in the order <code>[x0, y0, x1, y1, ..., xn, yn]</code>.
@param srcPts the array containing the source point coordinates.
Each point is stored as a pair of x,&nbsp;y coordinates.
@param dstPts the array into which the transformed point coordinates
are returned.  Each point is stored as a pair of x,&nbsp;y
coordinates.
@param srcOff the offset to the first point to be transformed
in the source array
@param dstOff the offset to the location of the first
transformed point that is stored in the destination array
@param numPts the number of points to be transformed
@since 1.2
"
      end

      operation 6506882 "transform"
	public explicit_return_type "void"
	nparams 5
	  param inout name "srcPts" explicit_type "double"
	multiplicity "[]"
	  param in name "srcOff" explicit_type "int"
	  param inout name "dstPts" explicit_type "double"
	multiplicity "[]"
	  param in name "dstOff" explicit_type "int"
	  param in name "numPts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms an array of double precision coordinates by this transform.
The two coordinate array sections can be exactly the same or
can be overlapping sections of the same array without affecting the
validity of the results.
This method ensures that no source coordinates are
overwritten by a previous operation before they can be transformed.
The coordinates are stored in the arrays starting at the indicated
offset in the order <code>[x0, y0, x1, y1, ..., xn, yn]</code>.
@param srcPts the array containing the source point coordinates.
Each point is stored as a pair of x,&nbsp;y coordinates.
@param dstPts the array into which the transformed point
coordinates are returned.  Each point is stored as a pair of
x,&nbsp;y coordinates.
@param srcOff the offset to the first point to be transformed
in the source array
@param dstOff the offset to the location of the first
transformed point that is stored in the destination array
@param numPts the number of point objects to be transformed
@since 1.2
"
      end

      operation 6507010 "transform"
	public explicit_return_type "void"
	nparams 5
	  param inout name "srcPts" explicit_type "float"
	multiplicity "[]"
	  param in name "srcOff" explicit_type "int"
	  param inout name "dstPts" explicit_type "double"
	multiplicity "[]"
	  param in name "dstOff" explicit_type "int"
	  param in name "numPts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms an array of floating point coordinates by this transform
and stores the results into an array of doubles.
The coordinates are stored in the arrays starting at the specified
offset in the order <code>[x0, y0, x1, y1, ..., xn, yn]</code>.
@param srcPts the array containing the source point coordinates.
Each point is stored as a pair of x,&nbsp;y coordinates.
@param dstPts the array into which the transformed point coordinates
are returned.  Each point is stored as a pair of x,&nbsp;y
coordinates.
@param srcOff the offset to the first point to be transformed
in the source array
@param dstOff the offset to the location of the first
transformed point that is stored in the destination array
@param numPts the number of points to be transformed
@since 1.2
"
      end

      operation 6507138 "transform"
	public explicit_return_type "void"
	nparams 5
	  param inout name "srcPts" explicit_type "double"
	multiplicity "[]"
	  param in name "srcOff" explicit_type "int"
	  param inout name "dstPts" explicit_type "float"
	multiplicity "[]"
	  param in name "dstOff" explicit_type "int"
	  param in name "numPts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms an array of double precision coordinates by this transform
and stores the results into an array of floats.
The coordinates are stored in the arrays starting at the specified
offset in the order <code>[x0, y0, x1, y1, ..., xn, yn]</code>.
@param srcPts the array containing the source point coordinates.
Each point is stored as a pair of x,&nbsp;y coordinates.
@param dstPts the array into which the transformed point
coordinates are returned.  Each point is stored as a pair of
x,&nbsp;y coordinates.
@param srcOff the offset to the first point to be transformed
in the source array
@param dstOff the offset to the location of the first
transformed point that is stored in the destination array
@param numPts the number of point objects to be transformed
@since 1.2
"
      end

      operation 6507266 "inverseTransform"
	public return_type class_ref 380802 // Point2D
	nparams 2
	  param inout name "ptSrc" type class_ref 380802 // Point2D
	  param inout name "ptDst" type class_ref 380802 // Point2D
	nexceptions 1
	  exception class_ref 890370 // NoninvertibleTransformException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
	comment "Inverse transforms the specified <code>ptSrc</code> and stores the
result in <code>ptDst</code>.
If <code>ptDst</code> is <code>null</code>, a new
<code>Point2D</code> object is allocated and then the result of the
transform is stored in this object.
In either case, <code>ptDst</code>, which contains the transformed
point, is returned for convenience.
If <code>ptSrc</code> and <code>ptDst</code> are the same
object, the input point is correctly overwritten with the
transformed point.
@param ptSrc the point to be inverse transformed
@param ptDst the resulting transformed point
@return <code>ptDst</code>, which contains the result of the
inverse transform.
@exception NoninvertibleTransformException  if the matrix cannot be
                                        inverted.
@since 1.2
"
      end

      operation 6507394 "inverseTransform"
	public explicit_return_type "void"
	nparams 5
	  param inout name "srcPts" explicit_type "double"
	multiplicity "[]"
	  param in name "srcOff" explicit_type "int"
	  param inout name "dstPts" explicit_type "double"
	multiplicity "[]"
	  param in name "dstOff" explicit_type "int"
	  param in name "numPts" explicit_type "int"
	nexceptions 1
	  exception class_ref 890370 // NoninvertibleTransformException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inverse transforms an array of double precision coordinates by
this transform.
The two coordinate array sections can be exactly the same or
can be overlapping sections of the same array without affecting the
validity of the results.
This method ensures that no source coordinates are
overwritten by a previous operation before they can be transformed.
The coordinates are stored in the arrays starting at the specified
offset in the order <code>[x0, y0, x1, y1, ..., xn, yn]</code>.
@param srcPts the array containing the source point coordinates.
Each point is stored as a pair of x,&nbsp;y coordinates.
@param dstPts the array into which the transformed point
coordinates are returned.  Each point is stored as a pair of
x,&nbsp;y coordinates.
@param srcOff the offset to the first point to be transformed
in the source array
@param dstOff the offset to the location of the first
transformed point that is stored in the destination array
@param numPts the number of point objects to be transformed
@exception NoninvertibleTransformException  if the matrix cannot be
                                        inverted.
@since 1.2
"
      end

      operation 6507522 "deltaTransform"
	public return_type class_ref 380802 // Point2D
	nparams 2
	  param inout name "ptSrc" type class_ref 380802 // Point2D
	  param inout name "ptDst" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms the relative distance vector specified by
<code>ptSrc</code> and stores the result in <code>ptDst</code>.
A relative distance vector is transformed without applying the
translation components of the affine transformation matrix
using the following equations:
<pre>
 [  x' ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ]
 [  y' ] = [  m10  m11 (m12) ] [  y  ] = [ m10x + m11y ]
 [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ]
</pre>
If <code>ptDst</code> is <code>null</code>, a new
<code>Point2D</code> object is allocated and then the result of the
transform is stored in this object.
In either case, <code>ptDst</code>, which contains the
transformed point, is returned for convenience.
If <code>ptSrc</code> and <code>ptDst</code> are the same object,
the input point is correctly overwritten with the transformed
point.
@param ptSrc the distance vector to be delta transformed
@param ptDst the resulting transformed distance vector
@return <code>ptDst</code>, which contains the result of the
transformation.
@since 1.2
"
      end

      operation 6507650 "deltaTransform"
	public explicit_return_type "void"
	nparams 5
	  param inout name "srcPts" explicit_type "double"
	multiplicity "[]"
	  param in name "srcOff" explicit_type "int"
	  param inout name "dstPts" explicit_type "double"
	multiplicity "[]"
	  param in name "dstOff" explicit_type "int"
	  param in name "numPts" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms an array of relative distance vectors by this
transform.
A relative distance vector is transformed without applying the
translation components of the affine transformation matrix
using the following equations:
<pre>
 [  x' ]   [  m00  m01 (m02) ] [  x  ]   [ m00x + m01y ]
 [  y' ] = [  m10  m11 (m12) ] [  y  ] = [ m10x + m11y ]
 [ (1) ]   [  (0)  (0) ( 1 ) ] [ (1) ]   [     (1)     ]
</pre>
The two coordinate array sections can be exactly the same or
can be overlapping sections of the same array without affecting the
validity of the results.
This method ensures that no source coordinates are
overwritten by a previous operation before they can be transformed.
The coordinates are stored in the arrays starting at the indicated
offset in the order <code>[x0, y0, x1, y1, ..., xn, yn]</code>.
@param srcPts the array containing the source distance vectors.
Each vector is stored as a pair of relative x,&nbsp;y coordinates.
@param dstPts the array into which the transformed distance vectors
are returned.  Each vector is stored as a pair of relative
x,&nbsp;y coordinates.
@param srcOff the offset to the first vector to be transformed
in the source array
@param dstOff the offset to the location of the first
transformed vector that is stored in the destination array
@param numPts the number of vector coordinate pairs to be
transformed
@since 1.2
"
      end

      operation 6507778 "createTransformedShape"
	public return_type class_ref 379394 // Shape
	nparams 1
	  param inout name "pSrc" type class_ref 379394 // Shape
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@link Shape} object defined by the geometry of the
specified <code>Shape</code> after it has been transformed by
this transform.
@param pSrc the specified <code>Shape</code> object to be
transformed by this transform.
@return a new <code>Shape</code> object that defines the geometry
of the transformed <code>Shape</code>, or null if {@code pSrc} is null.
@since 1.2
"
      end

      operation 6507906 "_matround"
	class_operation private explicit_return_type "double"
	nparams 1
	  param in name "matval" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Round values to sane precision for printing
 Note that Math.sin(Math.PI) has an error of about 10^-16"
      end

      operation 6508034 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> that represents the value of this
{@link Object}.
@return a <code>String</code> representing the value of this
<code>Object</code>.
@since 1.2
"
      end

      operation 6508162 "isIdentity"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>AffineTransform</code> is
an identity transform.
@return <code>true</code> if this <code>AffineTransform</code> is
an identity transform; <code>false</code> otherwise.
@since 1.2
"
      end

      operation 6508290 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this <code>AffineTransform</code> object.
@return an <code>Object</code> that is a copy of this
<code>AffineTransform</code> object.
@since 1.2
"
      end

      operation 6508418 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hashcode for this transform.
@return      a hash code for this transform.
@since 1.2
"
      end

      operation 6508546 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>AffineTransform</code>
represents the same affine coordinate transform as the specified
argument.
@param obj the <code>Object</code> to test for equality with this
<code>AffineTransform</code>
@return <code>true</code> if <code>obj</code> equals this
<code>AffineTransform</code> object; <code>false</code> otherwise.
@since 1.2
"
      end

      attribute 1547906 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1330973210523860834L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization support.  A readObject method is neccessary because
the state field is part of the implementation of this particular
AffineTransform and not part of the public specification.  The
state variable's value needs to be recalculated on the fly by the
readObject method as it is in the 6-argument matrix constructor.


JDK 1.2 serialVersionUID

"
      end

      operation 6508674 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 2
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6508802 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 381186 "Dimension2D"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Dimension2D</code> class is to encapsulate a width
and a height dimension.
<p>
This class is only the abstract superclass for all objects that
store a 2D dimension.
The actual storage representation of the sizes is left to
the subclass.

@author      Jim Graham
@since 1.2
"
      classrelation 2911618 // <realization>
	relation 2911618 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2911618 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      operation 6174722 "Dimension2D"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is an abstract class that cannot be instantiated directly.
Type-specific implementation subclasses are available for
instantiation and provide a number of formats for storing
the information necessary to satisfy the various accessor
methods below.

@see java.awt.Dimension
@since 1.2
"
      end

      operation 6174850 "getWidth"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width of this <code>Dimension</code> in double
precision.
@return the width of this <code>Dimension</code>.
@since 1.2
"
      end

      operation 6174978 "getHeight"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of this <code>Dimension</code> in double
precision.
@return the height of this <code>Dimension</code>.
@since 1.2
"
      end

      operation 6175106 "setSize"
	abstract public explicit_return_type "void"
	nparams 2
	  param in name "width" explicit_type "double"
	  param in name "height" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the size of this <code>Dimension</code> object to the
specified width and height.
This method is included for completeness, to parallel the
{@link java.awt.Component#getSize getSize} method of
{@link java.awt.Component}.
@param width  the new width for the <code>Dimension</code>
object
@param height  the new height for the <code>Dimension</code>
object
@since 1.2
"
      end

      operation 6175234 "setSize"
	public explicit_return_type "void"
	nparams 1
	  param inout name "d" type class_ref 381186 // Dimension2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the size of this <code>Dimension2D</code> object to
match the specified size.
This method is included for completeness, to parallel the
<code>getSize</code> method of <code>Component</code>.
@param d  the new size for the <code>Dimension2D</code>
object
@since 1.2
"
      end

      operation 6175362 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object of the same class as this object.

@return     a clone of this instance.
@exception  OutOfMemoryError            if there is not enough memory.
@see        java.lang.Cloneable
@since      1.2
"
      end
    end

    class 402946 "Line2D"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This <code>Line2D</code> represents a line segment in {@code (x,y)}
coordinate space.  This class, like all of the Java 2D API, uses a
default coordinate system called <i>user space</i> in which the y-axis
values increase downward and x-axis values increase to the right.  For
more information on the user space coordinate system, see the
<a href=\"https://docs.oracle.com/javase/1.3/docs/guide/2d/spec/j2d-intro.fm2.html#61857\">
Coordinate Systems</a> section of the Java 2D Programmer's Guide.
<p>
This class is only the abstract superclass for all objects that
store a 2D line segment.
The actual storage representation of the coordinates is left to
the subclass.

@author      Jim Graham
@since 1.2
"
      classrelation 3030914 // <realization>
	relation 3030914 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3030914 // <realization>
	  b parent class_ref 379394 // Shape
      end

      classrelation 3031042 // <realization>
	relation 3031042 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3031042 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      class 893570 "Float"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3031170 // <generalisation>
	  relation 3031170 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3031170 // <generalisation>
	    b parent class_ref 402946 // Line2D
	end

	classrelation 3031298 // <realization>
	  relation 3031298 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3031298 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1563650 "x1"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the start point of the line segment.
@since 1.2
@serial

"
	end

	attribute 1563778 "y1"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the start point of the line segment.
@since 1.2
@serial

"
	end

	attribute 1563906 "x2"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the end point of the line segment.
@since 1.2
@serial

"
	end

	attribute 1564034 "y2"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the end point of the line segment.
@since 1.2
@serial

"
	end

	operation 6554626 "Float"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a Line with coordinates (0, 0) &rarr; (0, 0).
@since 1.2
"
	end

	operation 6554754 "Float"
	  public explicit_return_type ""
	  nparams 4
	    param in name "x1" explicit_type "float"
	    param in name "y1" explicit_type "float"
	    param in name "x2" explicit_type "float"
	    param in name "y2" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a Line from the specified coordinates.
@param x1 the X coordinate of the start point
@param y1 the Y coordinate of the start point
@param x2 the X coordinate of the end point
@param y2 the Y coordinate of the end point
@since 1.2
"
	end

	operation 6554882 "Float"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "p1" type class_ref 380802 // Point2D
	    param inout name "p2" type class_ref 380802 // Point2D
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>Line2D</code> from the
specified <code>Point2D</code> objects.
@param p1 the start <code>Point2D</code> of this line segment
@param p2 the end <code>Point2D</code> of this line segment
@since 1.2
"
	end

	operation 6555010 "getX1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6555138 "getY1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6555266 "getP1"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6555394 "getX2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6555522 "getY2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6555650 "getP2"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6555778 "setLine"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6555906 "setLine"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x1" explicit_type "float"
	    param in name "y1" explicit_type "float"
	    param in name "x2" explicit_type "float"
	    param in name "y2" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the location of the end points of this <code>Line2D</code>
to the specified float coordinates.
@param x1 the X coordinate of the start point
@param y1 the Y coordinate of the start point
@param x2 the X coordinate of the end point
@param y2 the Y coordinate of the end point
@since 1.2
"
	end

	operation 6556034 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1564162 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 6161772511649436349L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      class 893698 "Double"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3031426 // <generalisation>
	  relation 3031426 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3031426 // <generalisation>
	    b parent class_ref 402946 // Line2D
	end

	classrelation 3031554 // <realization>
	  relation 3031554 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3031554 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1564290 "x1"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the start point of the line segment.
@since 1.2
@serial

"
	end

	attribute 1564418 "y1"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the start point of the line segment.
@since 1.2
@serial

"
	end

	attribute 1564546 "x2"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the end point of the line segment.
@since 1.2
@serial

"
	end

	attribute 1564674 "y2"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the end point of the line segment.
@since 1.2
@serial

"
	end

	operation 6556162 "Double"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a Line with coordinates (0, 0) &rarr; (0, 0).
@since 1.2
"
	end

	operation 6556290 "Double"
	  public explicit_return_type ""
	  nparams 4
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>Line2D</code> from the
specified coordinates.
@param x1 the X coordinate of the start point
@param y1 the Y coordinate of the start point
@param x2 the X coordinate of the end point
@param y2 the Y coordinate of the end point
@since 1.2
"
	end

	operation 6556418 "Double"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "p1" type class_ref 380802 // Point2D
	    param inout name "p2" type class_ref 380802 // Point2D
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>Line2D</code> from the
specified <code>Point2D</code> objects.
@param p1 the start <code>Point2D</code> of this line segment
@param p2 the end <code>Point2D</code> of this line segment
@since 1.2
"
	end

	operation 6556546 "getX1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6556674 "getY1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6556802 "getP1"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6556930 "getX2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6557058 "getY2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6557186 "getP2"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6557314 "setLine"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6557442 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1564802 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 7979627399746467499L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      operation 6557570 "Line2D"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is an abstract class that cannot be instantiated directly.
Type-specific implementation subclasses are available for
instantiation and provide a number of formats for storing
the information necessary to satisfy the various accessory
methods below.

@see java.awt.geom.Line2D.Float
@see java.awt.geom.Line2D.Double
@since 1.2
"
      end

      operation 6557698 "getX1"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the start point in double precision.
@return the X coordinate of the start point of this
        {@code Line2D} object.
@since 1.2
"
      end

      operation 6557826 "getY1"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the start point in double precision.
@return the Y coordinate of the start point of this
        {@code Line2D} object.
@since 1.2
"
      end

      operation 6557954 "getP1"
	abstract public return_type class_ref 380802 // Point2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the start <code>Point2D</code> of this <code>Line2D</code>.
@return the start <code>Point2D</code> of this <code>Line2D</code>.
@since 1.2
"
      end

      operation 6558082 "getX2"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the end point in double precision.
@return the X coordinate of the end point of this
        {@code Line2D} object.
@since 1.2
"
      end

      operation 6558210 "getY2"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the end point in double precision.
@return the Y coordinate of the end point of this
        {@code Line2D} object.
@since 1.2
"
      end

      operation 6558338 "getP2"
	abstract public return_type class_ref 380802 // Point2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the end <code>Point2D</code> of this <code>Line2D</code>.
@return the end <code>Point2D</code> of this <code>Line2D</code>.
@since 1.2
"
      end

      operation 6558466 "setLine"
	abstract public explicit_return_type "void"
	nparams 4
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points of this <code>Line2D</code> to
the specified double coordinates.
@param x1 the X coordinate of the start point
@param y1 the Y coordinate of the start point
@param x2 the X coordinate of the end point
@param y2 the Y coordinate of the end point
@since 1.2
"
      end

      operation 6558594 "setLine"
	public explicit_return_type "void"
	nparams 2
	  param inout name "p1" type class_ref 380802 // Point2D
	  param inout name "p2" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points of this <code>Line2D</code> to
the specified <code>Point2D</code> coordinates.
@param p1 the start <code>Point2D</code> of the line segment
@param p2 the end <code>Point2D</code> of the line segment
@since 1.2
"
      end

      operation 6558722 "setLine"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 402946 // Line2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points of this <code>Line2D</code> to
the same as those end points of the specified <code>Line2D</code>.
@param l the specified <code>Line2D</code>
@since 1.2
"
      end

      operation 6558850 "relativeCCW"
	class_operation public explicit_return_type "int"
	nparams 6
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an indicator of where the specified point
{@code (px,py)} lies with respect to the line segment from
{@code (x1,y1)} to {@code (x2,y2)}.
The return value can be either 1, -1, or 0 and indicates
in which direction the specified line must pivot around its
first end point, {@code (x1,y1)}, in order to point at the
specified point {@code (px,py)}.
<p>A return value of 1 indicates that the line segment must
turn in the direction that takes the positive X axis towards
the negative Y axis.  In the default coordinate system used by
Java 2D, this direction is counterclockwise.
<p>A return value of -1 indicates that the line segment must
turn in the direction that takes the positive X axis towards
the positive Y axis.  In the default coordinate system, this
direction is clockwise.
<p>A return value of 0 indicates that the point lies
exactly on the line segment.  Note that an indicator value
of 0 is rare and not useful for determining collinearity
because of floating point rounding issues.
<p>If the point is colinear with the line segment, but
not between the end points, then the value will be -1 if the point
lies \"beyond {@code (x1,y1)}\" or 1 if the point lies
\"beyond {@code (x2,y2)}\".

@param x1 the X coordinate of the start point of the
          specified line segment
@param y1 the Y coordinate of the start point of the
          specified line segment
@param x2 the X coordinate of the end point of the
          specified line segment
@param y2 the Y coordinate of the end point of the
          specified line segment
@param px the X coordinate of the specified point to be
          compared with the specified line segment
@param py the Y coordinate of the specified point to be
          compared with the specified line segment
@return an integer that indicates the position of the third specified
                 coordinates with respect to the line segment formed
                 by the first two specified coordinates.
@since 1.2
"
      end

      operation 6558978 "relativeCCW"
	public explicit_return_type "int"
	nparams 2
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an indicator of where the specified point
{@code (px,py)} lies with respect to this line segment.
See the method comments of
{@link #relativeCCW(double, double, double, double, double, double)}
to interpret the return value.
@param px the X coordinate of the specified point
          to be compared with this <code>Line2D</code>
@param py the Y coordinate of the specified point
          to be compared with this <code>Line2D</code>
@return an integer that indicates the position of the specified
        coordinates with respect to this <code>Line2D</code>
@see #relativeCCW(double, double, double, double, double, double)
@since 1.2
"
      end

      operation 6559106 "relativeCCW"
	public explicit_return_type "int"
	nparams 1
	  param inout name "p" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an indicator of where the specified <code>Point2D</code>
lies with respect to this line segment.
See the method comments of
{@link #relativeCCW(double, double, double, double, double, double)}
to interpret the return value.
@param p the specified <code>Point2D</code> to be compared
         with this <code>Line2D</code>
@return an integer that indicates the position of the specified
        <code>Point2D</code> with respect to this <code>Line2D</code>
@see #relativeCCW(double, double, double, double, double, double)
@since 1.2
"
      end

      operation 6559234 "linesIntersect"
	class_operation public explicit_return_type "boolean"
	nparams 8
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	  param in name "x3" explicit_type "double"
	  param in name "y3" explicit_type "double"
	  param in name "x4" explicit_type "double"
	  param in name "y4" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the line segment from {@code (x1,y1)} to
{@code (x2,y2)} intersects the line segment from {@code (x3,y3)}
to {@code (x4,y4)}.

@param x1 the X coordinate of the start point of the first
          specified line segment
@param y1 the Y coordinate of the start point of the first
          specified line segment
@param x2 the X coordinate of the end point of the first
          specified line segment
@param y2 the Y coordinate of the end point of the first
          specified line segment
@param x3 the X coordinate of the start point of the second
          specified line segment
@param y3 the Y coordinate of the start point of the second
          specified line segment
@param x4 the X coordinate of the end point of the second
          specified line segment
@param y4 the Y coordinate of the end point of the second
          specified line segment
@return <code>true</code> if the first specified line segment
                 and the second specified line segment intersect
                 each other; <code>false</code> otherwise.
@since 1.2
"
      end

      operation 6559362 "intersectsLine"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the line segment from {@code (x1,y1)} to
{@code (x2,y2)} intersects this line segment.

@param x1 the X coordinate of the start point of the
          specified line segment
@param y1 the Y coordinate of the start point of the
          specified line segment
@param x2 the X coordinate of the end point of the
          specified line segment
@param y2 the Y coordinate of the end point of the
          specified line segment
@return {@code <true>} if this line segment and the specified line segment
                 intersect each other; <code>false</code> otherwise.
@since 1.2
"
      end

      operation 6559490 "intersectsLine"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "l" type class_ref 402946 // Line2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified line segment intersects this line segment.
@param l the specified <code>Line2D</code>
@return <code>true</code> if this line segment and the specified line
                 segment intersect each other;
                 <code>false</code> otherwise.
@since 1.2
"
      end

      operation 6559618 "ptSegDistSq"
	class_operation public explicit_return_type "double"
	nparams 6
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the distance from a point to a line segment.
The distance measured is the distance between the specified
point and the closest point between the specified end points.
If the specified point intersects the line segment in between the
end points, this method returns 0.0.

@param x1 the X coordinate of the start point of the
          specified line segment
@param y1 the Y coordinate of the start point of the
          specified line segment
@param x2 the X coordinate of the end point of the
          specified line segment
@param y2 the Y coordinate of the end point of the
          specified line segment
@param px the X coordinate of the specified point being
          measured against the specified line segment
@param py the Y coordinate of the specified point being
          measured against the specified line segment
@return a double value that is the square of the distance from the
                 specified point to the specified line segment.
@see #ptLineDistSq(double, double, double, double, double, double)
@since 1.2
"
      end

      operation 6559746 "ptSegDist"
	class_operation public explicit_return_type "double"
	nparams 6
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the distance from a point to a line segment.
The distance measured is the distance between the specified
point and the closest point between the specified end points.
If the specified point intersects the line segment in between the
end points, this method returns 0.0.

@param x1 the X coordinate of the start point of the
          specified line segment
@param y1 the Y coordinate of the start point of the
          specified line segment
@param x2 the X coordinate of the end point of the
          specified line segment
@param y2 the Y coordinate of the end point of the
          specified line segment
@param px the X coordinate of the specified point being
          measured against the specified line segment
@param py the Y coordinate of the specified point being
          measured against the specified line segment
@return a double value that is the distance from the specified point
                         to the specified line segment.
@see #ptLineDist(double, double, double, double, double, double)
@since 1.2
"
      end

      operation 6559874 "ptSegDistSq"
	public explicit_return_type "double"
	nparams 2
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the distance from a point to this line segment.
The distance measured is the distance between the specified
point and the closest point between the current line's end points.
If the specified point intersects the line segment in between the
end points, this method returns 0.0.

@param px the X coordinate of the specified point being
          measured against this line segment
@param py the Y coordinate of the specified point being
          measured against this line segment
@return a double value that is the square of the distance from the
                 specified point to the current line segment.
@see #ptLineDistSq(double, double)
@since 1.2
"
      end

      operation 6560002 "ptSegDistSq"
	public explicit_return_type "double"
	nparams 1
	  param inout name "pt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the distance from a <code>Point2D</code> to
this line segment.
The distance measured is the distance between the specified
point and the closest point between the current line's end points.
If the specified point intersects the line segment in between the
end points, this method returns 0.0.
@param pt the specified <code>Point2D</code> being measured against
          this line segment.
@return a double value that is the square of the distance from the
                 specified <code>Point2D</code> to the current
                 line segment.
@see #ptLineDistSq(Point2D)
@since 1.2
"
      end

      operation 6560130 "ptSegDist"
	public explicit_return_type "double"
	nparams 2
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the distance from a point to this line segment.
The distance measured is the distance between the specified
point and the closest point between the current line's end points.
If the specified point intersects the line segment in between the
end points, this method returns 0.0.

@param px the X coordinate of the specified point being
          measured against this line segment
@param py the Y coordinate of the specified point being
          measured against this line segment
@return a double value that is the distance from the specified
                 point to the current line segment.
@see #ptLineDist(double, double)
@since 1.2
"
      end

      operation 6560258 "ptSegDist"
	public explicit_return_type "double"
	nparams 1
	  param inout name "pt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the distance from a <code>Point2D</code> to this line
segment.
The distance measured is the distance between the specified
point and the closest point between the current line's end points.
If the specified point intersects the line segment in between the
end points, this method returns 0.0.
@param pt the specified <code>Point2D</code> being measured
         against this line segment
@return a double value that is the distance from the specified
                         <code>Point2D</code> to the current line
                         segment.
@see #ptLineDist(Point2D)
@since 1.2
"
      end

      operation 6560386 "ptLineDistSq"
	class_operation public explicit_return_type "double"
	nparams 6
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the distance from a point to a line.
The distance measured is the distance between the specified
point and the closest point on the infinitely-extended line
defined by the specified coordinates.  If the specified point
intersects the line, this method returns 0.0.

@param x1 the X coordinate of the start point of the specified line
@param y1 the Y coordinate of the start point of the specified line
@param x2 the X coordinate of the end point of the specified line
@param y2 the Y coordinate of the end point of the specified line
@param px the X coordinate of the specified point being
          measured against the specified line
@param py the Y coordinate of the specified point being
          measured against the specified line
@return a double value that is the square of the distance from the
                 specified point to the specified line.
@see #ptSegDistSq(double, double, double, double, double, double)
@since 1.2
"
      end

      operation 6560514 "ptLineDist"
	class_operation public explicit_return_type "double"
	nparams 6
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the distance from a point to a line.
The distance measured is the distance between the specified
point and the closest point on the infinitely-extended line
defined by the specified coordinates.  If the specified point
intersects the line, this method returns 0.0.

@param x1 the X coordinate of the start point of the specified line
@param y1 the Y coordinate of the start point of the specified line
@param x2 the X coordinate of the end point of the specified line
@param y2 the Y coordinate of the end point of the specified line
@param px the X coordinate of the specified point being
          measured against the specified line
@param py the Y coordinate of the specified point being
          measured against the specified line
@return a double value that is the distance from the specified
                  point to the specified line.
@see #ptSegDist(double, double, double, double, double, double)
@since 1.2
"
      end

      operation 6560642 "ptLineDistSq"
	public explicit_return_type "double"
	nparams 2
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the distance from a point to this line.
The distance measured is the distance between the specified
point and the closest point on the infinitely-extended line
defined by this <code>Line2D</code>.  If the specified point
intersects the line, this method returns 0.0.

@param px the X coordinate of the specified point being
          measured against this line
@param py the Y coordinate of the specified point being
          measured against this line
@return a double value that is the square of the distance from a
                 specified point to the current line.
@see #ptSegDistSq(double, double)
@since 1.2
"
      end

      operation 6560770 "ptLineDistSq"
	public explicit_return_type "double"
	nparams 1
	  param inout name "pt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the distance from a specified
<code>Point2D</code> to this line.
The distance measured is the distance between the specified
point and the closest point on the infinitely-extended line
defined by this <code>Line2D</code>.  If the specified point
intersects the line, this method returns 0.0.
@param pt the specified <code>Point2D</code> being measured
          against this line
@return a double value that is the square of the distance from a
                 specified <code>Point2D</code> to the current
                 line.
@see #ptSegDistSq(Point2D)
@since 1.2
"
      end

      operation 6560898 "ptLineDist"
	public explicit_return_type "double"
	nparams 2
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the distance from a point to this line.
The distance measured is the distance between the specified
point and the closest point on the infinitely-extended line
defined by this <code>Line2D</code>.  If the specified point
intersects the line, this method returns 0.0.

@param px the X coordinate of the specified point being
          measured against this line
@param py the Y coordinate of the specified point being
          measured against this line
@return a double value that is the distance from a specified point
                 to the current line.
@see #ptSegDist(double, double)
@since 1.2
"
      end

      operation 6561026 "ptLineDist"
	public explicit_return_type "double"
	nparams 1
	  param inout name "pt" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the distance from a <code>Point2D</code> to this line.
The distance measured is the distance between the specified
point and the closest point on the infinitely-extended line
defined by this <code>Line2D</code>.  If the specified point
intersects the line, this method returns 0.0.
@param pt the specified <code>Point2D</code> being measured
@return a double value that is the distance from a specified
                 <code>Point2D</code> to the current line.
@see #ptSegDist(Point2D)
@since 1.2
"
      end

      operation 6561154 "contains"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if a specified coordinate is inside the boundary of this
<code>Line2D</code>.  This method is required to implement the
{@link Shape} interface, but in the case of <code>Line2D</code>
objects it always returns <code>false</code> since a line contains
no area.
@param x the X coordinate of the specified point to be tested
@param y the Y coordinate of the specified point to be tested
@return <code>false</code> because a <code>Line2D</code> contains
no area.
@since 1.2
"
      end

      operation 6561282 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if a given <code>Point2D</code> is inside the boundary of
this <code>Line2D</code>.
This method is required to implement the {@link Shape} interface,
but in the case of <code>Line2D</code> objects it always returns
<code>false</code> since a line contains no area.
@param p the specified <code>Point2D</code> to be tested
@return <code>false</code> because a <code>Line2D</code> contains
no area.
@since 1.2
"
      end

      operation 6561410 "intersects"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6561538 "intersects"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6561666 "contains"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the interior of this <code>Line2D</code> entirely contains
the specified set of rectangular coordinates.
This method is required to implement the <code>Shape</code> interface,
but in the case of <code>Line2D</code> objects it always returns
false since a line contains no area.
@param x the X coordinate of the upper-left corner of the
         specified rectangular area
@param y the Y coordinate of the upper-left corner of the
         specified rectangular area
@param w the width of the specified rectangular area
@param h the height of the specified rectangular area
@return <code>false</code> because a <code>Line2D</code> contains
no area.
@since 1.2
"
      end

      operation 6561794 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the interior of this <code>Line2D</code> entirely contains
the specified <code>Rectangle2D</code>.
This method is required to implement the <code>Shape</code> interface,
but in the case of <code>Line2D</code> objects it always returns
<code>false</code> since a line contains no area.
@param r the specified <code>Rectangle2D</code> to be tested
@return <code>false</code> because a <code>Line2D</code> contains
no area.
@since 1.2
"
      end

      operation 6561922 "getBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6562050 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration object that defines the boundary of this
<code>Line2D</code>.
The iterator for this class is not multi-threaded safe,
which means that this <code>Line2D</code> class does not
guarantee that modifications to the geometry of this
<code>Line2D</code> object do not affect any iterations of that
geometry that are already in process.
@param at the specified {@link AffineTransform}
@return a {@link PathIterator} that defines the boundary of this
         <code>Line2D</code>.
@since 1.2
"
      end

      operation 6562178 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 2
	  param inout name "at" type class_ref 381058 // AffineTransform
	  param in name "flatness" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration object that defines the boundary of this
flattened <code>Line2D</code>.
The iterator for this class is not multi-threaded safe,
which means that this <code>Line2D</code> class does not
guarantee that modifications to the geometry of this
<code>Line2D</code> object do not affect any iterations of that
geometry that are already in process.
@param at the specified <code>AffineTransform</code>
@param flatness the maximum amount that the control points for a
         given curve can vary from colinear before a subdivided
         curve is replaced by a straight line connecting the
         end points.  Since a <code>Line2D</code> object is
         always flat, this parameter is ignored.
@return a <code>PathIterator</code> that defines the boundary of the
                 flattened <code>Line2D</code>
@since 1.2
"
      end

      operation 6562306 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object of the same class as this object.

@return     a clone of this instance.
@exception  OutOfMemoryError            if there is not enough memory.
@see        java.lang.Cloneable
@since      1.2
"
      end
    end

    class 889858 "GeneralPath"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The {@code GeneralPath} class represents a geometric path
constructed from straight lines, and quadratic and cubic
(B&eacute;zier) curves.  It can contain multiple subpaths.
<p>
{@code GeneralPath} is a legacy final class which exactly
implements the behavior of its superclass {@link Path2D.Float}.
Together with {@link Path2D.Double}, the {@link Path2D} classes
provide full implementations of a general geometric path that
support all of the functionality of the {@link Shape} and
{@link PathIterator} interfaces with the ability to explicitly
select different levels of internal coordinate precision.
<p>
Use {@code Path2D.Float} (or this legacy {@code GeneralPath}
subclass) when dealing with data that can be represented
and used with floating point precision.  Use {@code Path2D.Double}
for data that requires the accuracy or range of double precision.

@author Jim Graham
@since 1.2
"
      classrelation 3030658 // <generalisation>
	relation 3030658 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3030658 // <generalisation>
	  b parent class_ref 892546 // Float
      end

      operation 6553730 "GeneralPath"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new empty single precision {@code GeneralPath} object
with a default winding rule of {@link #WIND_NON_ZERO}.

@since 1.2
"
      end

      operation 6553858 "GeneralPath"
	public explicit_return_type ""
	nparams 1
	  param in name "rule" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>GeneralPath</code> object with the specified
winding rule to control operations that require the interior of the
path to be defined.

@param rule the winding rule
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
@since 1.2
"
      end

      operation 6553986 "GeneralPath"
	public explicit_return_type ""
	nparams 2
	  param in name "rule" explicit_type "int"
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>GeneralPath</code> object with the specified
winding rule and the specified initial capacity to store path
coordinates.
This number is an initial guess as to how many path segments
will be added to the path, but the storage is expanded as
needed to store whatever path segments are added.

@param rule the winding rule
@param initialCapacity the estimate for the number of path segments
                       in the path
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
@since 1.2
"
      end

      operation 6554114 "GeneralPath"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 379394 // Shape
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>GeneralPath</code> object from an arbitrary
{@link Shape} object.
All of the initial geometry and the winding rule for this path are
taken from the specified <code>Shape</code> object.

@param s the specified <code>Shape</code> object
@since 1.2
"
      end

      operation 6554242 "GeneralPath"
	package explicit_return_type ""
	nparams 5
	  param in name "windingRule" explicit_type "int"
	  param inout name "pointTypes" explicit_type "byte"
	multiplicity "[]"
	  param in name "numTypes" explicit_type "int"
	  param inout name "pointCoords" explicit_type "float"
	multiplicity "[]"
	  param in name "numCoords" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1563522 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8327096662768731142L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "JDK 1.6 serialVersionUID

"
      end
    end

    class 890370 "NoninvertibleTransformException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>NoninvertibleTransformException</code> class represents
an exception that is thrown if an operation is performed requiring
the inverse of an {@link AffineTransform} object but the
<code>AffineTransform</code> is in a non-invertible state.
"
      classrelation 3032066 // <generalisation>
	relation 3032066 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3032066 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      operation 6563202 "NoninvertibleTransformException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of
<code>NoninvertibleTransformException</code>
with the specified detail message.
@param   s     the detail message
@since   1.2
"
      end
    end

    class 890498 "Arc2D"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<CODE>Arc2D</CODE> is the abstract superclass for all objects that
store a 2D arc defined by a framing rectangle,
start angle, angular extent (length of the arc), and a closure type
(<CODE>OPEN</CODE>, <CODE>CHORD</CODE>, or <CODE>PIE</CODE>).
<p>
<a name=\"inscribes\">
The arc is a partial section of a full ellipse which
inscribes the framing rectangle of its parent {@link RectangularShape}.
</a>
<a name=\"angles\">
The angles are specified relative to the non-square
framing rectangle such that 45 degrees always falls on the line from
the center of the ellipse to the upper right corner of the framing
rectangle.
As a result, if the framing rectangle is noticeably longer along one
axis than the other, the angles to the start and end of the arc segment
will be skewed farther along the longer axis of the frame.
</a>
<p>
The actual storage representation of the coordinates is left to
the subclass.

@author      Jim Graham
@since 1.2
"
      classrelation 3024642 // <generalisation>
	relation 3024642 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3024642 // <generalisation>
	  b parent class_ref 380546 // RectangularShape
      end

      attribute 1548034 "OPEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The closure type for an open arc with no path segments
connecting the two ends of the arc segment.
@since 1.2

"
      end

      attribute 1548162 "CHORD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The closure type for an arc closed by drawing a straight
line segment from the start of the arc segment to the end of the
arc segment.
@since 1.2

"
      end

      attribute 1548290 "PIE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The closure type for an arc closed by drawing straight line
segments from the start of the arc segment to the center
of the full ellipse and from that point to the end of the arc segment.
@since 1.2

"
      end

      class 890626 "Float"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3024770 // <generalisation>
	  relation 3024770 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3024770 // <generalisation>
	    b parent class_ref 890498 // Arc2D
	end

	classrelation 3024898 // <realization>
	  relation 3024898 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3024898 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1548418 "x"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the upper-left corner of the framing
rectangle of the arc.
@since 1.2
@serial

"
	end

	attribute 1548546 "y"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the upper-left corner of the framing
rectangle of the arc.
@since 1.2
@serial

"
	end

	attribute 1548674 "width"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The overall width of the full ellipse of which this arc is
a partial section (not considering the
angular extents).
@since 1.2
@serial

"
	end

	attribute 1548802 "height"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The overall height of the full ellipse of which this arc is
a partial section (not considering the
angular extents).
@since 1.2
@serial

"
	end

	attribute 1548930 "start"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The starting angle of the arc in degrees.
@since 1.2
@serial

"
	end

	attribute 1549058 "extent"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The angular extent of the arc in degrees.
@since 1.2
@serial

"
	end

	operation 6508930 "Float"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new OPEN arc, initialized to location (0, 0),
size (0, 0), angular extents (start = 0, extent = 0).
@since 1.2
"
	end

	operation 6509058 "Float"
	  public explicit_return_type ""
	  nparams 1
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new arc, initialized to location (0, 0),
size (0, 0), angular extents (start = 0, extent = 0), and
the specified closure type.

@param type The closure type for the arc:
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
@since 1.2
"
	end

	operation 6509186 "Float"
	  public explicit_return_type ""
	  nparams 7
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	    param in name "w" explicit_type "float"
	    param in name "h" explicit_type "float"
	    param in name "start" explicit_type "float"
	    param in name "extent" explicit_type "float"
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new arc, initialized to the specified location,
size, angular extents, and closure type.

@param x The X coordinate of the upper-left corner of
         the arc's framing rectangle.
@param y The Y coordinate of the upper-left corner of
         the arc's framing rectangle.
@param w The overall width of the full ellipse of which
         this arc is a partial section.
@param h The overall height of the full ellipse of which this
         arc is a partial section.
@param start The starting angle of the arc in degrees.
@param extent The angular extent of the arc in degrees.
@param type The closure type for the arc:
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
@since 1.2
"
	end

	operation 6509314 "Float"
	  public explicit_return_type ""
	  nparams 4
	    param inout name "ellipseBounds" type class_ref 380674 // Rectangle2D
	    param in name "start" explicit_type "float"
	    param in name "extent" explicit_type "float"
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new arc, initialized to the specified location,
size, angular extents, and closure type.

@param ellipseBounds The framing rectangle that defines the
outer boundary of the full ellipse of which this arc is a
partial section.
@param start The starting angle of the arc in degrees.
@param extent The angular extent of the arc in degrees.
@param type The closure type for the arc:
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
@since 1.2
"
	end

	operation 6509442 "getX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
Note that the arc
<a href=\"Arc2D.html#inscribes\">partially inscribes</a>
the framing rectangle of this {@code RectangularShape}.

@since 1.2
"
	end

	operation 6509570 "getY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
Note that the arc
<a href=\"Arc2D.html#inscribes\">partially inscribes</a>
the framing rectangle of this {@code RectangularShape}.

@since 1.2
"
	end

	operation 6509698 "getWidth"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
Note that the arc
<a href=\"Arc2D.html#inscribes\">partially inscribes</a>
the framing rectangle of this {@code RectangularShape}.

@since 1.2
"
	end

	operation 6509826 "getHeight"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
Note that the arc
<a href=\"Arc2D.html#inscribes\">partially inscribes</a>
the framing rectangle of this {@code RectangularShape}.

@since 1.2
"
	end

	operation 6509954 "getAngleStart"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6510082 "getAngleExtent"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6510210 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6510338 "setArc"
	  public explicit_return_type "void"
	  nparams 7
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	    param in name "angSt" explicit_type "double"
	    param in name "angExt" explicit_type "double"
	    param in name "closure" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6510466 "setAngleStart"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "angSt" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6510594 "setAngleExtent"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "angExt" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6510722 "makeBounds"
	  protected return_type class_ref 380674 // Rectangle2D
	  nparams 4
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1549186 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 9130893014586380278L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end

	operation 6510850 "writeObject"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 173442 // ObjectOutputStream
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes the default serializable fields to the
<code>ObjectOutputStream</code> followed by a byte
indicating the arc type of this <code>Arc2D</code>
instance.

@serialData
<ol>
<li>The default serializable fields.
<li>
followed by a <code>byte</code> indicating the arc type
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
</ol>
"
	end

	operation 6510978 "readObject"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 168962 // ObjectInputStream
	  nexceptions 2
	    exception class_ref 169730 // ClassNotFoundException
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads the default serializable fields from the
<code>ObjectInputStream</code> followed by a byte
indicating the arc type of this <code>Arc2D</code>
instance.

@serialData
<ol>
<li>The default serializable fields.
<li>
followed by a <code>byte</code> indicating the arc type
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
</ol>
"
	end
      end

      class 890754 "Double"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3025026 // <generalisation>
	  relation 3025026 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3025026 // <generalisation>
	    b parent class_ref 890498 // Arc2D
	end

	classrelation 3025154 // <realization>
	  relation 3025154 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3025154 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1549314 "x"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the upper-left corner of the framing
rectangle of the arc.
@since 1.2
@serial

"
	end

	attribute 1549442 "y"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the upper-left corner of the framing
rectangle of the arc.
@since 1.2
@serial

"
	end

	attribute 1549570 "width"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The overall width of the full ellipse of which this arc is
a partial section (not considering the angular extents).
@since 1.2
@serial

"
	end

	attribute 1549698 "height"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The overall height of the full ellipse of which this arc is
a partial section (not considering the angular extents).
@since 1.2
@serial

"
	end

	attribute 1549826 "start"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The starting angle of the arc in degrees.
@since 1.2
@serial

"
	end

	attribute 1549954 "extent"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The angular extent of the arc in degrees.
@since 1.2
@serial

"
	end

	operation 6511106 "Double"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new OPEN arc, initialized to location (0, 0),
size (0, 0), angular extents (start = 0, extent = 0).
@since 1.2
"
	end

	operation 6511234 "Double"
	  public explicit_return_type ""
	  nparams 1
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new arc, initialized to location (0, 0),
size (0, 0), angular extents (start = 0, extent = 0), and
the specified closure type.

@param type The closure type for the arc:
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
@since 1.2
"
	end

	operation 6511362 "Double"
	  public explicit_return_type ""
	  nparams 7
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	    param in name "start" explicit_type "double"
	    param in name "extent" explicit_type "double"
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new arc, initialized to the specified location,
size, angular extents, and closure type.

@param x The X coordinate of the upper-left corner
         of the arc's framing rectangle.
@param y The Y coordinate of the upper-left corner
         of the arc's framing rectangle.
@param w The overall width of the full ellipse of which this
         arc is a partial section.
@param h The overall height of the full ellipse of which this
         arc is a partial section.
@param start The starting angle of the arc in degrees.
@param extent The angular extent of the arc in degrees.
@param type The closure type for the arc:
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
@since 1.2
"
	end

	operation 6511490 "Double"
	  public explicit_return_type ""
	  nparams 4
	    param inout name "ellipseBounds" type class_ref 380674 // Rectangle2D
	    param in name "start" explicit_type "double"
	    param in name "extent" explicit_type "double"
	    param in name "type" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new arc, initialized to the specified location,
size, angular extents, and closure type.

@param ellipseBounds The framing rectangle that defines the
outer boundary of the full ellipse of which this arc is a
partial section.
@param start The starting angle of the arc in degrees.
@param extent The angular extent of the arc in degrees.
@param type The closure type for the arc:
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
@since 1.2
"
	end

	operation 6511618 "getX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
Note that the arc
<a href=\"Arc2D.html#inscribes\">partially inscribes</a>
the framing rectangle of this {@code RectangularShape}.

@since 1.2
"
	end

	operation 6511746 "getY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
Note that the arc
<a href=\"Arc2D.html#inscribes\">partially inscribes</a>
the framing rectangle of this {@code RectangularShape}.

@since 1.2
"
	end

	operation 6511874 "getWidth"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
Note that the arc
<a href=\"Arc2D.html#inscribes\">partially inscribes</a>
the framing rectangle of this {@code RectangularShape}.

@since 1.2
"
	end

	operation 6512002 "getHeight"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
Note that the arc
<a href=\"Arc2D.html#inscribes\">partially inscribes</a>
the framing rectangle of this {@code RectangularShape}.

@since 1.2
"
	end

	operation 6512130 "getAngleStart"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6512258 "getAngleExtent"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6512386 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6512514 "setArc"
	  public explicit_return_type "void"
	  nparams 7
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	    param in name "angSt" explicit_type "double"
	    param in name "angExt" explicit_type "double"
	    param in name "closure" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6512642 "setAngleStart"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "angSt" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6512770 "setAngleExtent"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "angExt" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6512898 "makeBounds"
	  protected return_type class_ref 380674 // Rectangle2D
	  nparams 4
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1550082 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 728264085846882001L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end

	operation 6513026 "writeObject"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 173442 // ObjectOutputStream
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes the default serializable fields to the
<code>ObjectOutputStream</code> followed by a byte
indicating the arc type of this <code>Arc2D</code>
instance.

@serialData
<ol>
<li>The default serializable fields.
<li>
followed by a <code>byte</code> indicating the arc type
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
</ol>
"
	end

	operation 6513154 "readObject"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 168962 // ObjectInputStream
	  nexceptions 2
	    exception class_ref 169730 // ClassNotFoundException
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads the default serializable fields from the
<code>ObjectInputStream</code> followed by a byte
indicating the arc type of this <code>Arc2D</code>
instance.

@serialData
<ol>
<li>The default serializable fields.
<li>
followed by a <code>byte</code> indicating the arc type
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
</ol>
"
	end
      end

      attribute 1550210 "type"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6513282 "Arc2D"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is an abstract class that cannot be instantiated directly.
Type-specific implementation subclasses are available for
instantiation and provide a number of formats for storing
the information necessary to satisfy the various accessor
methods below.
<p>
This constructor creates an object with a default closure
type of {@link #OPEN}.  It is provided only to enable
serialization of subclasses.

@see java.awt.geom.Arc2D.Float
@see java.awt.geom.Arc2D.Double
"
      end

      operation 6513410 "Arc2D"
	protected explicit_return_type ""
	nparams 1
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is an abstract class that cannot be instantiated directly.
Type-specific implementation subclasses are available for
instantiation and provide a number of formats for storing
the information necessary to satisfy the various accessor
methods below.

@param type The closure type of this arc:
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
@see java.awt.geom.Arc2D.Float
@see java.awt.geom.Arc2D.Double
@since 1.2
"
      end

      operation 6513538 "getAngleStart"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the starting angle of the arc.

@return A double value that represents the starting angle
of the arc in degrees.
@see #setAngleStart
@since 1.2
"
      end

      operation 6513666 "getAngleExtent"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the angular extent of the arc.

@return A double value that represents the angular extent
of the arc in degrees.
@see #setAngleExtent
@since 1.2
"
      end

      operation 6513794 "getArcType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the arc closure type of the arc: {@link #OPEN},
{@link #CHORD}, or {@link #PIE}.
@return One of the integer constant closure types defined
in this class.
@see #setArcType
@since 1.2
"
      end

      operation 6513922 "getStartPoint"
	public return_type class_ref 380802 // Point2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the starting point of the arc.  This point is the
intersection of the ray from the center defined by the
starting angle and the elliptical boundary of the arc.

@return A <CODE>Point2D</CODE> object representing the
x,y coordinates of the starting point of the arc.
@since 1.2
"
      end

      operation 6514050 "getEndPoint"
	public return_type class_ref 380802 // Point2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ending point of the arc.  This point is the
intersection of the ray from the center defined by the
starting angle plus the angular extent of the arc and the
elliptical boundary of the arc.

@return A <CODE>Point2D</CODE> object representing the
x,y coordinates  of the ending point of the arc.
@since 1.2
"
      end

      operation 6514178 "setArc"
	abstract public explicit_return_type "void"
	nparams 7
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	  param in name "angSt" explicit_type "double"
	  param in name "angExt" explicit_type "double"
	  param in name "closure" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location, size, angular extents, and closure type of
this arc to the specified double values.

@param x The X coordinate of the upper-left corner of the arc.
@param y The Y coordinate of the upper-left corner of the arc.
@param w The overall width of the full ellipse of which
         this arc is a partial section.
@param h The overall height of the full ellipse of which
         this arc is a partial section.
@param angSt The starting angle of the arc in degrees.
@param angExt The angular extent of the arc in degrees.
@param closure The closure type for the arc:
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
@since 1.2
"
      end

      operation 6514306 "setArc"
	public explicit_return_type "void"
	nparams 5
	  param inout name "loc" type class_ref 380802 // Point2D
	  param inout name "size" type class_ref 381186 // Dimension2D
	  param in name "angSt" explicit_type "double"
	  param in name "angExt" explicit_type "double"
	  param in name "closure" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location, size, angular extents, and closure type of
this arc to the specified values.

@param loc The <CODE>Point2D</CODE> representing the coordinates of
the upper-left corner of the arc.
@param size The <CODE>Dimension2D</CODE> representing the width
and height of the full ellipse of which this arc is
a partial section.
@param angSt The starting angle of the arc in degrees.
@param angExt The angular extent of the arc in degrees.
@param closure The closure type for the arc:
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
@since 1.2
"
      end

      operation 6514434 "setArc"
	public explicit_return_type "void"
	nparams 4
	  param inout name "rect" type class_ref 380674 // Rectangle2D
	  param in name "angSt" explicit_type "double"
	  param in name "angExt" explicit_type "double"
	  param in name "closure" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location, size, angular extents, and closure type of
this arc to the specified values.

@param rect The framing rectangle that defines the
outer boundary of the full ellipse of which this arc is a
partial section.
@param angSt The starting angle of the arc in degrees.
@param angExt The angular extent of the arc in degrees.
@param closure The closure type for the arc:
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
@since 1.2
"
      end

      operation 6514562 "setArc"
	public explicit_return_type "void"
	nparams 1
	  param inout name "a" type class_ref 890498 // Arc2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this arc to be the same as the specified arc.

@param a The <CODE>Arc2D</CODE> to use to set the arc's values.
@since 1.2
"
      end

      operation 6514690 "setArcByCenter"
	public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "radius" explicit_type "double"
	  param in name "angSt" explicit_type "double"
	  param in name "angExt" explicit_type "double"
	  param in name "closure" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position, bounds, angular extents, and closure type of
this arc to the specified values. The arc is defined by a center
point and a radius rather than a framing rectangle for the full ellipse.

@param x The X coordinate of the center of the arc.
@param y The Y coordinate of the center of the arc.
@param radius The radius of the arc.
@param angSt The starting angle of the arc in degrees.
@param angExt The angular extent of the arc in degrees.
@param closure The closure type for the arc:
{@link #OPEN}, {@link #CHORD}, or {@link #PIE}.
@since 1.2
"
      end

      operation 6514818 "setArcByTangent"
	public explicit_return_type "void"
	nparams 4
	  param inout name "p1" type class_ref 380802 // Point2D
	  param inout name "p2" type class_ref 380802 // Point2D
	  param inout name "p3" type class_ref 380802 // Point2D
	  param in name "radius" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the position, bounds, and angular extents of this arc to the
specified value. The starting angle of the arc is tangent to the
line specified by points (p1, p2), the ending angle is tangent to
the line specified by points (p2, p3), and the arc has the
specified radius.

@param p1 The first point that defines the arc. The starting
angle of the arc is tangent to the line specified by points (p1, p2).
@param p2 The second point that defines the arc. The starting
angle of the arc is tangent to the line specified by points (p1, p2).
The ending angle of the arc is tangent to the line specified by
points (p2, p3).
@param p3 The third point that defines the arc. The ending angle
of the arc is tangent to the line specified by points (p2, p3).
@param radius The radius of the arc.
@since 1.2
"
      end

      operation 6514946 "setAngleStart"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "angSt" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the starting angle of this arc to the specified double
value.

@param angSt The starting angle of the arc in degrees.
@see #getAngleStart
@since 1.2
"
      end

      operation 6515074 "setAngleExtent"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "angExt" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the angular extent of this arc to the specified double
value.

@param angExt The angular extent of the arc in degrees.
@see #getAngleExtent
@since 1.2
"
      end

      operation 6515202 "setAngleStart"
	public explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the starting angle of this arc to the angle that the
specified point defines relative to the center of this arc.
The angular extent of the arc will remain the same.

@param p The <CODE>Point2D</CODE> that defines the starting angle.
@see #getAngleStart
@since 1.2
"
      end

      operation 6515330 "setAngles"
	public explicit_return_type "void"
	nparams 4
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the starting angle and angular extent of this arc using two
sets of coordinates. The first set of coordinates is used to
determine the angle of the starting point relative to the arc's
center. The second set of coordinates is used to determine the
angle of the end point relative to the arc's center.
The arc will always be non-empty and extend counterclockwise
from the first point around to the second point.

@param x1 The X coordinate of the arc's starting point.
@param y1 The Y coordinate of the arc's starting point.
@param x2 The X coordinate of the arc's ending point.
@param y2 The Y coordinate of the arc's ending point.
@since 1.2
"
      end

      operation 6515458 "setAngles"
	public explicit_return_type "void"
	nparams 2
	  param inout name "p1" type class_ref 380802 // Point2D
	  param inout name "p2" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the starting angle and angular extent of this arc using
two points. The first point is used to determine the angle of
the starting point relative to the arc's center.
The second point is used to determine the angle of the end point
relative to the arc's center.
The arc will always be non-empty and extend counterclockwise
from the first point around to the second point.

@param p1 The <CODE>Point2D</CODE> that defines the arc's
starting point.
@param p2 The <CODE>Point2D</CODE> that defines the arc's
ending point.
@since 1.2
"
      end

      operation 6515586 "setArcType"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the closure type of this arc to the specified value:
<CODE>OPEN</CODE>, <CODE>CHORD</CODE>, or <CODE>PIE</CODE>.

@param type The integer constant that represents the closure
type of this arc: {@link #OPEN}, {@link #CHORD}, or
{@link #PIE}.

@throws IllegalArgumentException if <code>type</code> is not
0, 1, or 2.+
@see #getArcType
@since 1.2
"
      end

      operation 6515714 "setFrame"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
Note that the arc
<a href=\"Arc2D.html#inscribes\">partially inscribes</a>
the framing rectangle of this {@code RectangularShape}.

@since 1.2
"
      end

      operation 6515842 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the high-precision framing rectangle of the arc.  The framing
rectangle contains only the part of this <code>Arc2D</code> that is
in between the starting and ending angles and contains the pie
wedge, if this <code>Arc2D</code> has a <code>PIE</code> closure type.
<p>
This method differs from the
{@link RectangularShape#getBounds() getBounds} in that the
<code>getBounds</code> method only returns the bounds of the
enclosing ellipse of this <code>Arc2D</code> without considering
the starting and ending angles of this <code>Arc2D</code>.

@return the <CODE>Rectangle2D</CODE> that represents the arc's
framing rectangle.
@since 1.2
"
      end

      operation 6515970 "makeBounds"
	abstract protected return_type class_ref 380674 // Rectangle2D
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Rectangle2D</code> of the appropriate precision
to hold the parameters calculated to be the framing rectangle
of this arc.

@param x The X coordinate of the upper-left corner of the
framing rectangle.
@param y The Y coordinate of the upper-left corner of the
framing rectangle.
@param w The width of the framing rectangle.
@param h The height of the framing rectangle.
@return a <code>Rectangle2D</code> that is the framing rectangle
    of this arc.
@since 1.2
"
      end

      operation 6516098 "normalizeDegrees"
	class_operation package explicit_return_type "double"
	nparams 1
	  param in name "angle" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Normalizes the specified angle into the range -180 to 180.
"
      end

      operation 6516226 "containsAngle"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "angle" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the specified angle is within the
angular extents of the arc.

@param angle The angle to test.

@return <CODE>true</CODE> if the arc contains the angle,
<CODE>false</CODE> if the arc doesn't contain the angle.
@since 1.2
"
      end

      operation 6516354 "contains"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the specified point is inside the boundary
of the arc.

@param x The X coordinate of the point to test.
@param y The Y coordinate of the point to test.

@return <CODE>true</CODE> if the point lies within the bound of
the arc, <CODE>false</CODE> if the point lies outside of the
arc's bounds.
@since 1.2
"
      end

      operation 6516482 "intersects"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the interior of the arc intersects
the interior of the specified rectangle.

@param x The X coordinate of the rectangle's upper-left corner.
@param y The Y coordinate of the rectangle's upper-left corner.
@param w The width of the rectangle.
@param h The height of the rectangle.

@return <CODE>true</CODE> if the arc intersects the rectangle,
<CODE>false</CODE> if the arc doesn't intersect the rectangle.
@since 1.2
"
      end

      operation 6516610 "contains"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the interior of the arc entirely contains
the specified rectangle.

@param x The X coordinate of the rectangle's upper-left corner.
@param y The Y coordinate of the rectangle's upper-left corner.
@param w The width of the rectangle.
@param h The height of the rectangle.

@return <CODE>true</CODE> if the arc contains the rectangle,
<CODE>false</CODE> if the arc doesn't contain the rectangle.
@since 1.2
"
      end

      operation 6516738 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the interior of the arc entirely contains
the specified rectangle.

@param r The <CODE>Rectangle2D</CODE> to test.

@return <CODE>true</CODE> if the arc contains the rectangle,
<CODE>false</CODE> if the arc doesn't contain the rectangle.
@since 1.2
"
      end

      operation 6516866 "contains"
	private explicit_return_type "boolean"
	nparams 5
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	  param inout name "origrect" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6516994 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration object that defines the boundary of the
arc.
This iterator is multithread safe.
<code>Arc2D</code> guarantees that
modifications to the geometry of the arc
do not affect any iterations of that geometry that
are already in process.

@param at an optional <CODE>AffineTransform</CODE> to be applied
to the coordinates as they are returned in the iteration, or null
if the untransformed coordinates are desired.

@return A <CODE>PathIterator</CODE> that defines the arc's boundary.
@since 1.2
"
      end

      operation 6517122 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hashcode for this <code>Arc2D</code>.
@return the hashcode for this <code>Arc2D</code>.
@since 1.6
"
      end

      operation 6517250 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the specified <code>Object</code> is
equal to this <code>Arc2D</code>.  The specified
<code>Object</code> is equal to this <code>Arc2D</code>
if it is an instance of <code>Arc2D</code> and if its
location, size, arc extents and type are the same as this
<code>Arc2D</code>.
@param obj  an <code>Object</code> to be compared with this
            <code>Arc2D</code>.
@return  <code>true</code> if <code>obj</code> is an instance
         of <code>Arc2D</code> and has the same values;
         <code>false</code> otherwise.
@since 1.6
"
      end
    end

    class 890882 "ArcIterator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A utility class to iterate over the path segments of an arc
through the PathIterator interface.

@author      Jim Graham
"
      classrelation 3025282 // <realization>
	relation 3025282 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3025282 // <realization>
	  b parent class_ref 380930 // PathIterator
      end

      attribute 1550338 "x"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1550466 "y"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1550594 "w"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1550722 "h"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1550850 "angStRad"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1550978 "increment"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1551106 "cv"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3025410 // affine (<unidirectional association>)
	relation 3025410 --->
	  a role_name "affine" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3025410 // affine (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      attribute 1551234 "index"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1551362 "arcSegs"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1551490 "lineSegs"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6517378 "ArcIterator"
	package explicit_return_type ""
	nparams 2
	  param inout name "a" type class_ref 890498 // Arc2D
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6517506 "getWindingRule"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the winding rule for determining the insideness of the
path.
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
"
      end

      operation 6517634 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if there are more points to read.
@return true if there are more points to read
"
      end

      operation 6517762 "next"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the iterator to the next segment of the path forwards
along the primary direction of traversal as long as there are
more points in that direction.
"
      end

      operation 6517890 "btan"
	class_operation private explicit_return_type "double"
	nparams 1
	  param in name "increment" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "btan computes the length (k) of the control segments at
the beginning and end of a cubic bezier that approximates
a segment of an arc with extent less than or equal to
90 degrees.  This length (k) will be used to generate the
2 bezier control points for such a segment.

  Assumptions:
    a) arc is centered on 0,0 with radius of 1.0
    b) arc extent is less than 90 degrees
    c) control points should preserve tangent
    d) control segments should have equal length

  Initial data:
    start angle: ang1
    end angle:   ang2 = ang1 + extent
    start point: P1 = (x1, y1) = (cos(ang1), sin(ang1))
    end point:   P4 = (x4, y4) = (cos(ang2), sin(ang2))

  Control points:
    P2 = (x2, y2)
    | x2 = x1 - k * sin(ang1) = cos(ang1) - k * sin(ang1)
    | y2 = y1 + k * cos(ang1) = sin(ang1) + k * cos(ang1)

    P3 = (x3, y3)
    | x3 = x4 + k * sin(ang2) = cos(ang2) + k * sin(ang2)
    | y3 = y4 - k * cos(ang2) = sin(ang2) - k * cos(ang2)

The formula for this length (k) can be found using the
following derivations:

  Midpoints:
    a) bezier (t = 1/2)
       bPm = P1 * (1-t)^3 +
             3 * P2 * t * (1-t)^2 +
             3 * P3 * t^2 * (1-t) +
             P4 * t^3 =
           = (P1 + 3P2 + 3P3 + P4)/8

    b) arc
       aPm = (cos((ang1 + ang2)/2), sin((ang1 + ang2)/2))

  Let angb = (ang2 - ang1)/2; angb is half of the angle
  between ang1 and ang2.

  Solve the equation bPm == aPm

    a) For xm coord:
       x1 + 3*x2 + 3*x3 + x4 = 8*cos((ang1 + ang2)/2)

       cos(ang1) + 3*cos(ang1) - 3*k*sin(ang1) +
       3*cos(ang2) + 3*k*sin(ang2) + cos(ang2) =
       = 8*cos((ang1 + ang2)/2)

       4*cos(ang1) + 4*cos(ang2) + 3*k*(sin(ang2) - sin(ang1)) =
       = 8*cos((ang1 + ang2)/2)

       8*cos((ang1 + ang2)/2)*cos((ang2 - ang1)/2) +
       6*k*sin((ang2 - ang1)/2)*cos((ang1 + ang2)/2) =
       = 8*cos((ang1 + ang2)/2)

       4*cos(angb) + 3*k*sin(angb) = 4

       k = 4 / 3 * (1 - cos(angb)) / sin(angb)

    b) For ym coord we derive the same formula.

Since this formula can generate \"NaN\" values for small
angles, we will derive a safer form that does not involve
dividing by very small values:
    (1 - cos(angb)) / sin(angb) =
    = (1 - cos(angb))*(1 + cos(angb)) / sin(angb)*(1 + cos(angb)) =
    = (1 - cos(angb)^2) / sin(angb)*(1 + cos(angb)) =
    = sin(angb)^2 / sin(angb)*(1 + cos(angb)) =
    = sin(angb) / (1 + cos(angb))

"
      end

      operation 6518018 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A float array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of float x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end

      operation 6518146 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A double array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of double x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end
    end

    class 891010 "Area"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An <code>Area</code> object stores and manipulates a
resolution-independent description of an enclosed area of
2-dimensional space.
<code>Area</code> objects can be transformed and can perform
various Constructive Area Geometry (CAG) operations when combined
with other <code>Area</code> objects.
The CAG operations include area
{@link #add addition}, {@link #subtract subtraction},
{@link #intersect intersection}, and {@link #exclusiveOr exclusive or}.
See the linked method documentation for examples of the various
operations.
<p>
The <code>Area</code> class implements the <code>Shape</code>
interface and provides full support for all of its hit-testing
and path iteration facilities, but an <code>Area</code> is more
specific than a generalized path in a number of ways:
<ul>
<li>Only closed paths and sub-paths are stored.
    <code>Area</code> objects constructed from unclosed paths
    are implicitly closed during construction as if those paths
    had been filled by the <code>Graphics2D.fill</code> method.
<li>The interiors of the individual stored sub-paths are all
    non-empty and non-overlapping.  Paths are decomposed during
    construction into separate component non-overlapping parts,
    empty pieces of the path are discarded, and then these
    non-empty and non-overlapping properties are maintained
    through all subsequent CAG operations.  Outlines of different
    component sub-paths may touch each other, as long as they
    do not cross so that their enclosed areas overlap.
<li>The geometry of the path describing the outline of the
    <code>Area</code> resembles the path from which it was
    constructed only in that it describes the same enclosed
    2-dimensional area, but may use entirely different types
    and ordering of the path segments to do so.
</ul>
Interesting issues which are not always obvious when using
the <code>Area</code> include:
<ul>
<li>Creating an <code>Area</code> from an unclosed (open)
    <code>Shape</code> results in a closed outline in the
    <code>Area</code> object.
<li>Creating an <code>Area</code> from a <code>Shape</code>
    which encloses no area (even when \"closed\") produces an
    empty <code>Area</code>.  A common example of this issue
    is that producing an <code>Area</code> from a line will
    be empty since the line encloses no area.  An empty
    <code>Area</code> will iterate no geometry in its
    <code>PathIterator</code> objects.
<li>A self-intersecting <code>Shape</code> may be split into
    two (or more) sub-paths each enclosing one of the
    non-intersecting portions of the original path.
<li>An <code>Area</code> may take more path segments to
    describe the same geometry even when the original
    outline is simple and obvious.  The analysis that the
    <code>Area</code> class must perform on the path may
    not reflect the same concepts of \"simple and obvious\"
    as a human being perceives.
</ul>

@since 1.2
"
      classrelation 3025538 // <realization>
	relation 3025538 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3025538 // <realization>
	  b parent class_ref 379394 // Shape
      end

      classrelation 3025666 // <realization>
	relation 3025666 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3025666 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3025794 // EmptyCurves (<unidirectional association>)
	relation 3025794 --->
	  a role_name "EmptyCurves" init_value " new Vector()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3025794 // EmptyCurves (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      classrelation 3025922 // curves (<unidirectional association>)
	relation 3025922 --->
	  a role_name "curves" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3025922 // curves (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      operation 6518274 "Area"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor which creates an empty area.
@since 1.2
"
      end

      operation 6518402 "Area"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 379394 // Shape
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>Area</code> class creates an area geometry from the
specified {@link Shape} object.  The geometry is explicitly
closed, if the <code>Shape</code> is not already closed.  The
fill rule (even-odd or winding) specified by the geometry of the
<code>Shape</code> is used to determine the resulting enclosed area.
@param s  the <code>Shape</code> from which the area is constructed
@throws NullPointerException if <code>s</code> is null
@since 1.2
"
      end

      operation 6518530 "pathToCurves"
	class_operation private return_type class_ref 141442 // Vector
	nparams 1
	  param inout name "pi" type class_ref 380930 // PathIterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6518658 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rhs" type class_ref 891010 // Area
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the shape of the specified <code>Area</code> to the
shape of this <code>Area</code>.
The resulting shape of this <code>Area</code> will include
the union of both shapes, or all areas that were contained
in either this or the specified <code>Area</code>.
<pre>
    // Example:
    Area a1 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 0,8]);
    Area a2 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 8,8]);
    a1.add(a2);

       a1(before)     +         a2         =     a1(after)

    ################     ################     ################
    ##############         ##############     ################
    ############             ############     ################
    ##########                 ##########     ################
    ########                     ########     ################
    ######                         ######     ######    ######
    ####                             ####     ####        ####
    ##                                 ##     ##            ##
</pre>
@param   rhs  the <code>Area</code> to be added to the
         current shape
@throws NullPointerException if <code>rhs</code> is null
@since 1.2
"
      end

      operation 6518786 "subtract"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rhs" type class_ref 891010 // Area
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subtracts the shape of the specified <code>Area</code> from the
shape of this <code>Area</code>.
The resulting shape of this <code>Area</code> will include
areas that were contained only in this <code>Area</code>
and not in the specified <code>Area</code>.
<pre>
    // Example:
    Area a1 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 0,8]);
    Area a2 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 8,8]);
    a1.subtract(a2);

       a1(before)     -         a2         =     a1(after)

    ################     ################
    ##############         ##############     ##
    ############             ############     ####
    ##########                 ##########     ######
    ########                     ########     ########
    ######                         ######     ######
    ####                             ####     ####
    ##                                 ##     ##
</pre>
@param   rhs  the <code>Area</code> to be subtracted from the
         current shape
@throws NullPointerException if <code>rhs</code> is null
@since 1.2
"
      end

      operation 6518914 "intersect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rhs" type class_ref 891010 // Area
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the shape of this <code>Area</code> to the intersection of
its current shape and the shape of the specified <code>Area</code>.
The resulting shape of this <code>Area</code> will include
only areas that were contained in both this <code>Area</code>
and also in the specified <code>Area</code>.
<pre>
    // Example:
    Area a1 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 0,8]);
    Area a2 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 8,8]);
    a1.intersect(a2);

     a1(before)   intersect     a2         =     a1(after)

    ################     ################     ################
    ##############         ##############       ############
    ############             ############         ########
    ##########                 ##########           ####
    ########                     ########
    ######                         ######
    ####                             ####
    ##                                 ##
</pre>
@param   rhs  the <code>Area</code> to be intersected with this
         <code>Area</code>
@throws NullPointerException if <code>rhs</code> is null
@since 1.2
"
      end

      operation 6519042 "exclusiveOr"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rhs" type class_ref 891010 // Area
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the shape of this <code>Area</code> to be the combined area
of its current shape and the shape of the specified <code>Area</code>,
minus their intersection.
The resulting shape of this <code>Area</code> will include
only areas that were contained in either this <code>Area</code>
or in the specified <code>Area</code>, but not in both.
<pre>
    // Example:
    Area a1 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 0,8]);
    Area a2 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 8,8]);
    a1.exclusiveOr(a2);

       a1(before)    xor        a2         =     a1(after)

    ################     ################
    ##############         ##############     ##            ##
    ############             ############     ####        ####
    ##########                 ##########     ######    ######
    ########                     ########     ################
    ######                         ######     ######    ######
    ####                             ####     ####        ####
    ##                                 ##     ##            ##
</pre>
@param   rhs  the <code>Area</code> to be exclusive ORed with this
         <code>Area</code>.
@throws NullPointerException if <code>rhs</code> is null
@since 1.2
"
      end

      operation 6519170 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the geometry from this <code>Area</code> and
restores it to an empty area.
@since 1.2
"
      end

      operation 6519298 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this <code>Area</code> object encloses any area.
@return    <code>true</code> if this <code>Area</code> object
represents an empty area; <code>false</code> otherwise.
@since 1.2
"
      end

      operation 6519426 "isPolygonal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this <code>Area</code> consists entirely of
straight edged polygonal geometry.
@return    <code>true</code> if the geometry of this
<code>Area</code> consists entirely of line segments;
<code>false</code> otherwise.
@since 1.2
"
      end

      operation 6519554 "isRectangular"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this <code>Area</code> is rectangular in shape.
@return    <code>true</code> if the geometry of this
<code>Area</code> is rectangular in shape; <code>false</code>
otherwise.
@since 1.2
"
      end

      operation 6519682 "isSingular"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this <code>Area</code> is comprised of a single
closed subpath.  This method returns <code>true</code> if the
path contains 0 or 1 subpaths, or <code>false</code> if the path
contains more than 1 subpath.  The subpaths are counted by the
number of {@link PathIterator#SEG_MOVETO SEG_MOVETO}  segments
that appear in the path.
@return    <code>true</code> if the <code>Area</code> is comprised
of a single basic geometry; <code>false</code> otherwise.
@since 1.2
"
      end

      classrelation 3026050 // cachedBounds (<unidirectional association>)
	relation 3026050 --->
	  a role_name "cachedBounds" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3026050 // cachedBounds (<unidirectional association>)
	  b parent class_ref 380674 // Rectangle2D
      end

      operation 6519810 "invalidateBounds"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6519938 "getCachedBounds"
	private return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6520066 "getBounds2D"
	public return_type class_ref 380674 // Rectangle2D
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a high precision bounding {@link Rectangle2D} that
completely encloses this <code>Area</code>.
<p>
The Area class will attempt to return the tightest bounding
box possible for the Shape.  The bounding box will not be
padded to include the control points of curves in the outline
of the Shape, but should tightly fit the actual geometry of
the outline itself.
@return    the bounding <code>Rectangle2D</code> for the
<code>Area</code>.
@since 1.2
"
      end

      operation 6520194 "getBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a bounding {@link Rectangle} that completely encloses
this <code>Area</code>.
<p>
The Area class will attempt to return the tightest bounding
box possible for the Shape.  The bounding box will not be
padded to include the control points of curves in the outline
of the Shape, but should tightly fit the actual geometry of
the outline itself.  Since the returned object represents
the bounding box with integers, the bounding box can only be
as tight as the nearest integer coordinates that encompass
the geometry of the Shape.
@return    the bounding <code>Rectangle</code> for the
<code>Area</code>.
@since 1.2
"
      end

      operation 6520322 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an exact copy of this <code>Area</code> object.
@return    Created clone object
@since 1.2
"
      end

      operation 6520450 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 891010 // Area
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the geometries of the two <code>Area</code> objects
are equal.
This method will return false if the argument is null.
@param   other  the <code>Area</code> to be compared to this
         <code>Area</code>
@return  <code>true</code> if the two geometries are equal;
         <code>false</code> otherwise.
@since 1.2
"
      end

      operation 6520578 "transform"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms the geometry of this <code>Area</code> using the specified
{@link AffineTransform}.  The geometry is transformed in place, which
permanently changes the enclosed area defined by this object.
@param t  the transformation used to transform the area
@throws NullPointerException if <code>t</code> is null
@since 1.2
"
      end

      operation 6520706 "createTransformedArea"
	public return_type class_ref 891010 // Area
	nparams 1
	  param inout name "t" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>Area</code> object that contains the same
geometry as this <code>Area</code> transformed by the specified
<code>AffineTransform</code>.  This <code>Area</code> object
is unchanged.
@param t  the specified <code>AffineTransform</code> used to transform
          the new <code>Area</code>
@throws NullPointerException if <code>t</code> is null
@return   a new <code>Area</code> object representing the transformed
          geometry.
@since 1.2
"
      end

      operation 6520834 "contains"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6520962 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6521090 "contains"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6521218 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6521346 "intersects"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6521474 "intersects"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6521602 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@link PathIterator} for the outline of this
<code>Area</code> object.  This <code>Area</code> object is unchanged.
@param at an optional <code>AffineTransform</code> to be applied to
the coordinates as they are returned in the iteration, or
<code>null</code> if untransformed coordinates are desired
@return    the <code>PathIterator</code> object that returns the
         geometry of the outline of this <code>Area</code>, one
         segment at a time.
@since 1.2
"
      end

      operation 6521730 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 2
	  param inout name "at" type class_ref 381058 // AffineTransform
	  param in name "flatness" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>PathIterator</code> for the flattened outline of
this <code>Area</code> object.  Only uncurved path segments
represented by the SEG_MOVETO, SEG_LINETO, and SEG_CLOSE point
types are returned by the iterator.  This <code>Area</code>
object is unchanged.
@param at an optional <code>AffineTransform</code> to be
applied to the coordinates as they are returned in the
iteration, or <code>null</code> if untransformed coordinates
are desired
@param flatness the maximum amount that the control points
for a given curve can vary from colinear before a subdivided
curve is replaced by a straight line connecting the end points
@return    the <code>PathIterator</code> object that returns the
geometry of the outline of this <code>Area</code>, one segment
at a time.
@since 1.2
"
      end
    end

    class 891138 "AreaIterator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3026178 // <realization>
	relation 3026178 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3026178 // <realization>
	  b parent class_ref 380930 // PathIterator
      end

      classrelation 3026306 // transform (<unidirectional association>)
	relation 3026306 --->
	  a role_name "transform" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3026306 // transform (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      classrelation 3026434 // curves (<unidirectional association>)
	relation 3026434 --->
	  a role_name "curves" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3026434 // curves (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      attribute 1551618 "index"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1551746 "prevcurve"
	private explicit_type "Curve"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1551874 "thiscurve"
	private explicit_type "Curve"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6521858 "AreaIterator"
	public explicit_return_type ""
	nparams 2
	  param inout name "curves" type class_ref 141442 // Vector
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6521986 "getWindingRule"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6522114 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6522242 "next"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6522370 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6522498 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 891266 "CubicCurve2D"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>CubicCurve2D</code> class defines a cubic parametric curve
segment in {@code (x,y)} coordinate space.
<p>
This class is only the abstract superclass for all objects which
store a 2D cubic curve segment.
The actual storage representation of the coordinates is left to
the subclass.

@author      Jim Graham
@since 1.2
"
      classrelation 3026562 // <realization>
	relation 3026562 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3026562 // <realization>
	  b parent class_ref 379394 // Shape
      end

      classrelation 3026690 // <realization>
	relation 3026690 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3026690 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      class 891394 "Float"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3026818 // <generalisation>
	  relation 3026818 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3026818 // <generalisation>
	    b parent class_ref 891266 // CubicCurve2D
	end

	classrelation 3026946 // <realization>
	  relation 3026946 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3026946 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1552002 "x1"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the start point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1552130 "y1"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the start point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1552258 "ctrlx1"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the first control point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1552386 "ctrly1"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the first control point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1552514 "ctrlx2"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the second control point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1552642 "ctrly2"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the second control point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1552770 "x2"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the end point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1552898 "y2"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the end point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	operation 6522626 "Float"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a CubicCurve with coordinates
(0, 0, 0, 0, 0, 0, 0, 0).
@since 1.2
"
	end

	operation 6522754 "Float"
	  public explicit_return_type ""
	  nparams 8
	    param in name "x1" explicit_type "float"
	    param in name "y1" explicit_type "float"
	    param in name "ctrlx1" explicit_type "float"
	    param in name "ctrly1" explicit_type "float"
	    param in name "ctrlx2" explicit_type "float"
	    param in name "ctrly2" explicit_type "float"
	    param in name "x2" explicit_type "float"
	    param in name "y2" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a {@code CubicCurve2D} from
the specified {@code float} coordinates.

@param x1 the X coordinate for the start point
          of the resulting {@code CubicCurve2D}
@param y1 the Y coordinate for the start point
          of the resulting {@code CubicCurve2D}
@param ctrlx1 the X coordinate for the first control point
              of the resulting {@code CubicCurve2D}
@param ctrly1 the Y coordinate for the first control point
              of the resulting {@code CubicCurve2D}
@param ctrlx2 the X coordinate for the second control point
              of the resulting {@code CubicCurve2D}
@param ctrly2 the Y coordinate for the second control point
              of the resulting {@code CubicCurve2D}
@param x2 the X coordinate for the end point
          of the resulting {@code CubicCurve2D}
@param y2 the Y coordinate for the end point
          of the resulting {@code CubicCurve2D}
@since 1.2
"
	end

	operation 6522882 "getX1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6523010 "getY1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6523138 "getP1"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6523266 "getCtrlX1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6523394 "getCtrlY1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6523522 "getCtrlP1"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6523650 "getCtrlX2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6523778 "getCtrlY2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6523906 "getCtrlP2"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6524034 "getX2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6524162 "getY2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6524290 "getP2"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6524418 "setCurve"
	  public explicit_return_type "void"
	  nparams 8
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "ctrlx1" explicit_type "double"
	    param in name "ctrly1" explicit_type "double"
	    param in name "ctrlx2" explicit_type "double"
	    param in name "ctrly2" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6524546 "setCurve"
	  public explicit_return_type "void"
	  nparams 8
	    param in name "x1" explicit_type "float"
	    param in name "y1" explicit_type "float"
	    param in name "ctrlx1" explicit_type "float"
	    param in name "ctrly1" explicit_type "float"
	    param in name "ctrlx2" explicit_type "float"
	    param in name "ctrly2" explicit_type "float"
	    param in name "x2" explicit_type "float"
	    param in name "y2" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the location of the end points and control points
of this curve to the specified {@code float} coordinates.

@param x1 the X coordinate used to set the start point
          of this {@code CubicCurve2D}
@param y1 the Y coordinate used to set the start point
          of this {@code CubicCurve2D}
@param ctrlx1 the X coordinate used to set the first control point
              of this {@code CubicCurve2D}
@param ctrly1 the Y coordinate used to set the first control point
              of this {@code CubicCurve2D}
@param ctrlx2 the X coordinate used to set the second control point
              of this {@code CubicCurve2D}
@param ctrly2 the Y coordinate used to set the second control point
              of this {@code CubicCurve2D}
@param x2 the X coordinate used to set the end point
          of this {@code CubicCurve2D}
@param y2 the Y coordinate used to set the end point
          of this {@code CubicCurve2D}
@since 1.2
"
	end

	operation 6524674 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1553026 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -1272015596714244385L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      class 891522 "Double"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3027074 // <generalisation>
	  relation 3027074 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3027074 // <generalisation>
	    b parent class_ref 891266 // CubicCurve2D
	end

	classrelation 3027202 // <realization>
	  relation 3027202 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3027202 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1553154 "x1"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the start point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1553282 "y1"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the start point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1553410 "ctrlx1"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the first control point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1553538 "ctrly1"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the first control point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1553666 "ctrlx2"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the second control point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1553794 "ctrly2"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the second control point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1553922 "x2"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the end point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	attribute 1554050 "y2"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the end point
of the cubic curve segment.
@since 1.2
@serial

"
	end

	operation 6524802 "Double"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a CubicCurve with coordinates
(0, 0, 0, 0, 0, 0, 0, 0).
@since 1.2
"
	end

	operation 6524930 "Double"
	  public explicit_return_type ""
	  nparams 8
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "ctrlx1" explicit_type "double"
	    param in name "ctrly1" explicit_type "double"
	    param in name "ctrlx2" explicit_type "double"
	    param in name "ctrly2" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a {@code CubicCurve2D} from
the specified {@code double} coordinates.

@param x1 the X coordinate for the start point
          of the resulting {@code CubicCurve2D}
@param y1 the Y coordinate for the start point
          of the resulting {@code CubicCurve2D}
@param ctrlx1 the X coordinate for the first control point
              of the resulting {@code CubicCurve2D}
@param ctrly1 the Y coordinate for the first control point
              of the resulting {@code CubicCurve2D}
@param ctrlx2 the X coordinate for the second control point
              of the resulting {@code CubicCurve2D}
@param ctrly2 the Y coordinate for the second control point
              of the resulting {@code CubicCurve2D}
@param x2 the X coordinate for the end point
          of the resulting {@code CubicCurve2D}
@param y2 the Y coordinate for the end point
          of the resulting {@code CubicCurve2D}
@since 1.2
"
	end

	operation 6525058 "getX1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6525186 "getY1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6525314 "getP1"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6525442 "getCtrlX1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6525570 "getCtrlY1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6525698 "getCtrlP1"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6525826 "getCtrlX2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6525954 "getCtrlY2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6526082 "getCtrlP2"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6526210 "getX2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6526338 "getY2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6526466 "getP2"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6526594 "setCurve"
	  public explicit_return_type "void"
	  nparams 8
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "ctrlx1" explicit_type "double"
	    param in name "ctrly1" explicit_type "double"
	    param in name "ctrlx2" explicit_type "double"
	    param in name "ctrly2" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6526722 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1554178 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -4202960122839707295L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      operation 6526850 "CubicCurve2D"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is an abstract class that cannot be instantiated directly.
Type-specific implementation subclasses are available for
instantiation and provide a number of formats for storing
the information necessary to satisfy the various accessor
methods below.

@see java.awt.geom.CubicCurve2D.Float
@see java.awt.geom.CubicCurve2D.Double
@since 1.2
"
      end

      operation 6526978 "getX1"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the start point in double precision.
@return the X coordinate of the start point of the
        {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6527106 "getY1"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the start point in double precision.
@return the Y coordinate of the start point of the
        {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6527234 "getP1"
	abstract public return_type class_ref 380802 // Point2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the start point.
@return a {@code Point2D} that is the start point of
        the {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6527362 "getCtrlX1"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the first control point in double precision.
@return the X coordinate of the first control point of the
        {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6527490 "getCtrlY1"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the first control point in double precision.
@return the Y coordinate of the first control point of the
        {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6527618 "getCtrlP1"
	abstract public return_type class_ref 380802 // Point2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first control point.
@return a {@code Point2D} that is the first control point of
        the {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6527746 "getCtrlX2"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the second control point
in double precision.
@return the X coordinate of the second control point of the
        {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6527874 "getCtrlY2"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the second control point
in double precision.
@return the Y coordinate of the second control point of the
        {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6528002 "getCtrlP2"
	abstract public return_type class_ref 380802 // Point2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the second control point.
@return a {@code Point2D} that is the second control point of
        the {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6528130 "getX2"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the end point in double precision.
@return the X coordinate of the end point of the
        {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6528258 "getY2"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the end point in double precision.
@return the Y coordinate of the end point of the
        {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6528386 "getP2"
	abstract public return_type class_ref 380802 // Point2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the end point.
@return a {@code Point2D} that is the end point of
        the {@code CubicCurve2D}.
@since 1.2
"
      end

      operation 6528514 "setCurve"
	abstract public explicit_return_type "void"
	nparams 8
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "ctrlx1" explicit_type "double"
	  param in name "ctrly1" explicit_type "double"
	  param in name "ctrlx2" explicit_type "double"
	  param in name "ctrly2" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points and control points of this curve
to the specified double coordinates.

@param x1 the X coordinate used to set the start point
          of this {@code CubicCurve2D}
@param y1 the Y coordinate used to set the start point
          of this {@code CubicCurve2D}
@param ctrlx1 the X coordinate used to set the first control point
              of this {@code CubicCurve2D}
@param ctrly1 the Y coordinate used to set the first control point
              of this {@code CubicCurve2D}
@param ctrlx2 the X coordinate used to set the second control point
              of this {@code CubicCurve2D}
@param ctrly2 the Y coordinate used to set the second control point
              of this {@code CubicCurve2D}
@param x2 the X coordinate used to set the end point
          of this {@code CubicCurve2D}
@param y2 the Y coordinate used to set the end point
          of this {@code CubicCurve2D}
@since 1.2
"
      end

      operation 6528642 "setCurve"
	public explicit_return_type "void"
	nparams 2
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points and control points of this curve
to the double coordinates at the specified offset in the specified
array.
@param coords a double array containing coordinates
@param offset the index of <code>coords</code> from which to begin
         setting the end points and control points of this curve
         to the coordinates contained in <code>coords</code>
@since 1.2
"
      end

      operation 6528770 "setCurve"
	public explicit_return_type "void"
	nparams 4
	  param inout name "p1" type class_ref 380802 // Point2D
	  param inout name "cp1" type class_ref 380802 // Point2D
	  param inout name "cp2" type class_ref 380802 // Point2D
	  param inout name "p2" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points and control points of this curve
to the specified <code>Point2D</code> coordinates.
@param p1 the first specified <code>Point2D</code> used to set the
         start point of this curve
@param cp1 the second specified <code>Point2D</code> used to set the
         first control point of this curve
@param cp2 the third specified <code>Point2D</code> used to set the
         second control point of this curve
@param p2 the fourth specified <code>Point2D</code> used to set the
         end point of this curve
@since 1.2
"
      end

      operation 6528898 "setCurve"
	public explicit_return_type "void"
	nparams 2
	  param inout name "pts" type class_ref 380802 // Point2D
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points and control points of this curve
to the coordinates of the <code>Point2D</code> objects at the specified
offset in the specified array.
@param pts an array of <code>Point2D</code> objects
@param offset  the index of <code>pts</code> from which to begin setting
         the end points and control points of this curve to the
         points contained in <code>pts</code>
@since 1.2
"
      end

      operation 6529026 "setCurve"
	public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 891266 // CubicCurve2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points and control points of this curve
to the same as those in the specified <code>CubicCurve2D</code>.
@param c the specified <code>CubicCurve2D</code>
@since 1.2
"
      end

      operation 6529154 "getFlatnessSq"
	class_operation public explicit_return_type "double"
	nparams 8
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "ctrlx1" explicit_type "double"
	  param in name "ctrly1" explicit_type "double"
	  param in name "ctrlx2" explicit_type "double"
	  param in name "ctrly2" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the flatness of the cubic curve specified
by the indicated control points. The flatness is the maximum distance
of a control point from the line connecting the end points.

@param x1 the X coordinate that specifies the start point
          of a {@code CubicCurve2D}
@param y1 the Y coordinate that specifies the start point
          of a {@code CubicCurve2D}
@param ctrlx1 the X coordinate that specifies the first control point
              of a {@code CubicCurve2D}
@param ctrly1 the Y coordinate that specifies the first control point
              of a {@code CubicCurve2D}
@param ctrlx2 the X coordinate that specifies the second control point
              of a {@code CubicCurve2D}
@param ctrly2 the Y coordinate that specifies the second control point
              of a {@code CubicCurve2D}
@param x2 the X coordinate that specifies the end point
          of a {@code CubicCurve2D}
@param y2 the Y coordinate that specifies the end point
          of a {@code CubicCurve2D}
@return the square of the flatness of the {@code CubicCurve2D}
         represented by the specified coordinates.
@since 1.2
"
      end

      operation 6529282 "getFlatness"
	class_operation public explicit_return_type "double"
	nparams 8
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "ctrlx1" explicit_type "double"
	  param in name "ctrly1" explicit_type "double"
	  param in name "ctrlx2" explicit_type "double"
	  param in name "ctrly2" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the flatness of the cubic curve specified
by the indicated control points. The flatness is the maximum distance
of a control point from the line connecting the end points.

@param x1 the X coordinate that specifies the start point
          of a {@code CubicCurve2D}
@param y1 the Y coordinate that specifies the start point
          of a {@code CubicCurve2D}
@param ctrlx1 the X coordinate that specifies the first control point
              of a {@code CubicCurve2D}
@param ctrly1 the Y coordinate that specifies the first control point
              of a {@code CubicCurve2D}
@param ctrlx2 the X coordinate that specifies the second control point
              of a {@code CubicCurve2D}
@param ctrly2 the Y coordinate that specifies the second control point
              of a {@code CubicCurve2D}
@param x2 the X coordinate that specifies the end point
          of a {@code CubicCurve2D}
@param y2 the Y coordinate that specifies the end point
          of a {@code CubicCurve2D}
@return the flatness of the {@code CubicCurve2D}
         represented by the specified coordinates.
@since 1.2
"
      end

      operation 6529410 "getFlatnessSq"
	class_operation public explicit_return_type "double"
	nparams 2
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the flatness of the cubic curve specified
by the control points stored in the indicated array at the
indicated index. The flatness is the maximum distance
of a control point from the line connecting the end points.
@param coords an array containing coordinates
@param offset the index of <code>coords</code> from which to begin
         getting the end points and control points of the curve
@return the square of the flatness of the <code>CubicCurve2D</code>
         specified by the coordinates in <code>coords</code> at
         the specified offset.
@since 1.2
"
      end

      operation 6529538 "getFlatness"
	class_operation public explicit_return_type "double"
	nparams 2
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the flatness of the cubic curve specified
by the control points stored in the indicated array at the
indicated index.  The flatness is the maximum distance
of a control point from the line connecting the end points.
@param coords an array containing coordinates
@param offset the index of <code>coords</code> from which to begin
         getting the end points and control points of the curve
@return the flatness of the <code>CubicCurve2D</code>
         specified by the coordinates in <code>coords</code> at
         the specified offset.
@since 1.2
"
      end

      operation 6529666 "getFlatnessSq"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the flatness of this curve.  The flatness is the
maximum distance of a control point from the line connecting the
end points.
@return the square of the flatness of this curve.
@since 1.2
"
      end

      operation 6529794 "getFlatness"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the flatness of this curve.  The flatness is the
maximum distance of a control point from the line connecting the
end points.
@return the flatness of this curve.
@since 1.2
"
      end

      operation 6529922 "subdivide"
	public explicit_return_type "void"
	nparams 2
	  param inout name "left" type class_ref 891266 // CubicCurve2D
	  param inout name "right" type class_ref 891266 // CubicCurve2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subdivides this cubic curve and stores the resulting two
subdivided curves into the left and right curve parameters.
Either or both of the left and right objects may be the same
as this object or null.
@param left the cubic curve object for storing for the left or
first half of the subdivided curve
@param right the cubic curve object for storing for the right or
second half of the subdivided curve
@since 1.2
"
      end

      operation 6530050 "subdivide"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "src" type class_ref 891266 // CubicCurve2D
	  param inout name "left" type class_ref 891266 // CubicCurve2D
	  param inout name "right" type class_ref 891266 // CubicCurve2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subdivides the cubic curve specified by the <code>src</code> parameter
and stores the resulting two subdivided curves into the
<code>left</code> and <code>right</code> curve parameters.
Either or both of the <code>left</code> and <code>right</code> objects
may be the same as the <code>src</code> object or <code>null</code>.
@param src the cubic curve to be subdivided
@param left the cubic curve object for storing the left or
first half of the subdivided curve
@param right the cubic curve object for storing the right or
second half of the subdivided curve
@since 1.2
"
      end

      operation 6530178 "subdivide"
	class_operation public explicit_return_type "void"
	nparams 6
	  param inout name "src" explicit_type "double"
	multiplicity "[]"
	  param in name "srcoff" explicit_type "int"
	  param inout name "left" explicit_type "double"
	multiplicity "[]"
	  param in name "leftoff" explicit_type "int"
	  param inout name "right" explicit_type "double"
	multiplicity "[]"
	  param in name "rightoff" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subdivides the cubic curve specified by the coordinates
stored in the <code>src</code> array at indices <code>srcoff</code>
through (<code>srcoff</code>&nbsp;+&nbsp;7) and stores the
resulting two subdivided curves into the two result arrays at the
corresponding indices.
Either or both of the <code>left</code> and <code>right</code>
arrays may be <code>null</code> or a reference to the same array
as the <code>src</code> array.
Note that the last point in the first subdivided curve is the
same as the first point in the second subdivided curve. Thus,
it is possible to pass the same array for <code>left</code>
and <code>right</code> and to use offsets, such as <code>rightoff</code>
equals (<code>leftoff</code> + 6), in order
to avoid allocating extra storage for this common point.
@param src the array holding the coordinates for the source curve
@param srcoff the offset into the array of the beginning of the
the 6 source coordinates
@param left the array for storing the coordinates for the first
half of the subdivided curve
@param leftoff the offset into the array of the beginning of the
the 6 left coordinates
@param right the array for storing the coordinates for the second
half of the subdivided curve
@param rightoff the offset into the array of the beginning of the
the 6 right coordinates
@since 1.2
"
      end

      operation 6530306 "solveCubic"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "eqn" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Solves the cubic whose coefficients are in the <code>eqn</code>
array and places the non-complex roots back into the same array,
returning the number of roots.  The solved cubic is represented
by the equation:
<pre>
    eqn = {c, b, a, d}
    dx^3 + ax^2 + bx + c = 0
</pre>
A return value of -1 is used to distinguish a constant equation
that might be always 0 or never 0 from an equation that has no
zeroes.
@param eqn an array containing coefficients for a cubic
@return the number of roots, or -1 if the equation is a constant.
@since 1.2
"
      end

      operation 6530434 "solveCubic"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "eqn" explicit_type "double"
	multiplicity "[]"
	  param inout name "res" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Solve the cubic whose coefficients are in the <code>eqn</code>
array and place the non-complex roots into the <code>res</code>
array, returning the number of roots.
The cubic solved is represented by the equation:
    eqn = {c, b, a, d}
    dx^3 + ax^2 + bx + c = 0
A return value of -1 is used to distinguish a constant equation,
which may be always 0 or never 0, from an equation which has no
zeroes.
@param eqn the specified array of coefficients to use to solve
       the cubic equation
@param res the array that contains the non-complex roots
       resulting from the solution of the cubic equation
@return the number of roots, or -1 if the equation is a constant
@since 1.3
"
      end

      operation 6530562 "fixRoots"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "eqn" explicit_type "double"
	multiplicity "[]"
	  param inout name "res" explicit_type "double"
	multiplicity "[]"
	  param in name "num" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " preconditions: eqn != res && eqn[3] != 0 && num > 1
 This method tries to improve the accuracy of the roots of eqn (which
 should be in res). It also might eliminate roots in res if it decideds
 that they're not real roots. It will not check for roots that the
 computation of res might have missed, so this method should only be
 used when the roots in res have been computed using an algorithm
 that never underestimates the number of roots (such as solveCubic above)"
      end

      operation 6530690 "refineRootWithHint"
	class_operation private explicit_return_type "double"
	nparams 4
	  param inout name "eqn" explicit_type "double"
	multiplicity "[]"
	  param in name "min" explicit_type "double"
	  param in name "max" explicit_type "double"
	  param in name "t" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " use newton's method."
      end

      operation 6530818 "bisectRootWithHint"
	class_operation private explicit_return_type "double"
	nparams 4
	  param inout name "eqn" explicit_type "double"
	multiplicity "[]"
	  param in name "x0" explicit_type "double"
	  param in name "xe" explicit_type "double"
	  param in name "hint" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6530946 "bisectRoot"
	class_operation private explicit_return_type "double"
	nparams 3
	  param inout name "eqn" explicit_type "double"
	multiplicity "[]"
	  param in name "x0" explicit_type "double"
	  param in name "xe" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6531074 "inInterval"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param in name "t" explicit_type "double"
	  param in name "min" explicit_type "double"
	  param in name "max" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6531202 "within"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "err" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6531330 "iszero"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "err" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6531458 "oppositeSigns"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "x1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6531586 "solveEqn"
	class_operation private explicit_return_type "double"
	nparams 3
	  param inout name "eqn" explicit_type "double"
	multiplicity "[]"
	  param in name "order" explicit_type "int"
	  param in name "t" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6531714 "getRootUpperBound"
	class_operation private explicit_return_type "double"
	nparams 1
	  param inout name "eqn" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes M+1 where M is an upper bound for all the roots in of eqn.
See: http://en.wikipedia.org/wiki/Sturm%27s_theorem#Applications.
The above link doesn't contain a proof, but I [dlila] proved it myself
so the result is reliable. The proof isn't difficult, but it's a bit
long to include here.
Precondition: eqn must represent a cubic polynomial
"
      end

      operation 6531842 "contains"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6531970 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6532098 "intersects"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6532226 "intersects"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6532354 "contains"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6532482 "rectCrossings"
	private explicit_return_type "int"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6532610 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6532738 "getBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6532866 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration object that defines the boundary of the
shape.
The iterator for this class is not multi-threaded safe,
which means that this <code>CubicCurve2D</code> class does not
guarantee that modifications to the geometry of this
<code>CubicCurve2D</code> object do not affect any iterations of
that geometry that are already in process.
@param at an optional <code>AffineTransform</code> to be applied to the
coordinates as they are returned in the iteration, or <code>null</code>
if untransformed coordinates are desired
@return    the <code>PathIterator</code> object that returns the
         geometry of the outline of this <code>CubicCurve2D</code>, one
         segment at a time.
@since 1.2
"
      end

      operation 6532994 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 2
	  param inout name "at" type class_ref 381058 // AffineTransform
	  param in name "flatness" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an iteration object that defines the boundary of the
flattened shape.
The iterator for this class is not multi-threaded safe,
which means that this <code>CubicCurve2D</code> class does not
guarantee that modifications to the geometry of this
<code>CubicCurve2D</code> object do not affect any iterations of
that geometry that are already in process.
@param at an optional <code>AffineTransform</code> to be applied to the
coordinates as they are returned in the iteration, or <code>null</code>
if untransformed coordinates are desired
@param flatness the maximum amount that the control points
for a given curve can vary from colinear before a subdivided
curve is replaced by a straight line connecting the end points
@return    the <code>PathIterator</code> object that returns the
geometry of the outline of this <code>CubicCurve2D</code>,
one segment at a time.
@since 1.2
"
      end

      operation 6533122 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object of the same class as this object.

@return     a clone of this instance.
@exception  OutOfMemoryError            if there is not enough memory.
@see        java.lang.Cloneable
@since      1.2
"
      end
    end

    class 891650 "CubicIterator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A utility class to iterate over the path segments of a cubic curve
segment through the PathIterator interface.

@author      Jim Graham
"
      classrelation 3027330 // <realization>
	relation 3027330 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3027330 // <realization>
	  b parent class_ref 380930 // PathIterator
      end

      classrelation 3027458 // cubic (<unidirectional association>)
	relation 3027458 --->
	  a role_name "cubic" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3027458 // cubic (<unidirectional association>)
	  b parent class_ref 891266 // CubicCurve2D
      end

      classrelation 3027586 // affine (<unidirectional association>)
	relation 3027586 --->
	  a role_name "affine" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3027586 // affine (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      attribute 1554306 "index"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6533250 "CubicIterator"
	package explicit_return_type ""
	nparams 2
	  param inout name "q" type class_ref 891266 // CubicCurve2D
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6533378 "getWindingRule"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the winding rule for determining the insideness of the
path.
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
"
      end

      operation 6533506 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if there are more points to read.
@return true if there are more points to read
"
      end

      operation 6533634 "next"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the iterator to the next segment of the path forwards
along the primary direction of traversal as long as there are
more points in that direction.
"
      end

      operation 6533762 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A float array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of float x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end

      operation 6533890 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A double array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of double x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end
    end

    class 891778 "Ellipse2D"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Ellipse2D</code> class describes an ellipse that is defined
by a framing rectangle.
<p>
This class is only the abstract superclass for all objects which
store a 2D ellipse.
The actual storage representation of the coordinates is left to
the subclass.

@author      Jim Graham
@since 1.2
"
      classrelation 3027714 // <generalisation>
	relation 3027714 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3027714 // <generalisation>
	  b parent class_ref 380546 // RectangularShape
      end

      class 891906 "Float"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3027842 // <generalisation>
	  relation 3027842 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3027842 // <generalisation>
	    b parent class_ref 891778 // Ellipse2D
	end

	classrelation 3027970 // <realization>
	  relation 3027970 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3027970 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1554434 "x"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the upper-left corner of the
framing rectangle of this {@code Ellipse2D}.
@since 1.2
@serial

"
	end

	attribute 1554562 "y"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the upper-left corner of the
framing rectangle of this {@code Ellipse2D}.
@since 1.2
@serial

"
	end

	attribute 1554690 "width"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The overall width of this <code>Ellipse2D</code>.
@since 1.2
@serial

"
	end

	attribute 1554818 "height"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The overall height of this <code>Ellipse2D</code>.
@since 1.2
@serial

"
	end

	operation 6534018 "Float"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new <code>Ellipse2D</code>, initialized to
location (0,&nbsp;0) and size (0,&nbsp;0).
@since 1.2
"
	end

	operation 6534146 "Float"
	  public explicit_return_type ""
	  nparams 4
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	    param in name "w" explicit_type "float"
	    param in name "h" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes an <code>Ellipse2D</code> from the
specified coordinates.

@param x the X coordinate of the upper-left corner
         of the framing rectangle
@param y the Y coordinate of the upper-left corner
         of the framing rectangle
@param w the width of the framing rectangle
@param h the height of the framing rectangle
@since 1.2
"
	end

	operation 6534274 "getX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6534402 "getY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6534530 "getWidth"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6534658 "getHeight"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6534786 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6534914 "setFrame"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	    param in name "w" explicit_type "float"
	    param in name "h" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the location and size of the framing rectangle of this
<code>Shape</code> to the specified rectangular values.

@param x the X coordinate of the upper-left corner of the
             specified rectangular shape
@param y the Y coordinate of the upper-left corner of the
             specified rectangular shape
@param w the width of the specified rectangular shape
@param h the height of the specified rectangular shape
@since 1.2
"
	end

	operation 6535042 "setFrame"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6535170 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1554946 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -6633761252372475977L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      class 892034 "Double"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3028098 // <generalisation>
	  relation 3028098 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3028098 // <generalisation>
	    b parent class_ref 891778 // Ellipse2D
	end

	classrelation 3028226 // <realization>
	  relation 3028226 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3028226 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1555074 "x"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the upper-left corner of the
framing rectangle of this {@code Ellipse2D}.
@since 1.2
@serial

"
	end

	attribute 1555202 "y"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the upper-left corner of the
framing rectangle of this {@code Ellipse2D}.
@since 1.2
@serial

"
	end

	attribute 1555330 "width"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The overall width of this <code>Ellipse2D</code>.
@since 1.2
@serial

"
	end

	attribute 1555458 "height"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The overall height of the <code>Ellipse2D</code>.
@since 1.2
@serial

"
	end

	operation 6535298 "Double"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new <code>Ellipse2D</code>, initialized to
location (0,&nbsp;0) and size (0,&nbsp;0).
@since 1.2
"
	end

	operation 6535426 "Double"
	  public explicit_return_type ""
	  nparams 4
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes an <code>Ellipse2D</code> from the
specified coordinates.

@param x the X coordinate of the upper-left corner
       of the framing rectangle
@param y the Y coordinate of the upper-left corner
       of the framing rectangle
@param w the width of the framing rectangle
@param h the height of the framing rectangle
@since 1.2
"
	end

	operation 6535554 "getX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6535682 "getY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6535810 "getWidth"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6535938 "getHeight"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6536066 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6536194 "setFrame"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6536322 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1555586 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 5555464816372320683L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      operation 6536450 "Ellipse2D"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is an abstract class that cannot be instantiated directly.
Type-specific implementation subclasses are available for
instantiation and provide a number of formats for storing
the information necessary to satisfy the various accessor
methods below.

@see java.awt.geom.Ellipse2D.Float
@see java.awt.geom.Ellipse2D.Double
@since 1.2
"
      end

      operation 6536578 "contains"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6536706 "intersects"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6536834 "contains"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6536962 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration object that defines the boundary of this
<code>Ellipse2D</code>.
The iterator for this class is multi-threaded safe, which means
that this <code>Ellipse2D</code> class guarantees that
modifications to the geometry of this <code>Ellipse2D</code>
object do not affect any iterations of that geometry that
are already in process.
@param at an optional <code>AffineTransform</code> to be applied to
the coordinates as they are returned in the iteration, or
<code>null</code> if untransformed coordinates are desired
@return    the <code>PathIterator</code> object that returns the
         geometry of the outline of this <code>Ellipse2D</code>,
         one segment at a time.
@since 1.2
"
      end

      operation 6537090 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hashcode for this <code>Ellipse2D</code>.
@return the hashcode for this <code>Ellipse2D</code>.
@since 1.6
"
      end

      operation 6537218 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the specified <code>Object</code> is
equal to this <code>Ellipse2D</code>.  The specified
<code>Object</code> is equal to this <code>Ellipse2D</code>
if it is an instance of <code>Ellipse2D</code> and if its
location and size are the same as this <code>Ellipse2D</code>.
@param obj  an <code>Object</code> to be compared with this
            <code>Ellipse2D</code>.
@return  <code>true</code> if <code>obj</code> is an instance
         of <code>Ellipse2D</code> and has the same values;
         <code>false</code> otherwise.
@since 1.6
"
      end
    end

    class 892162 "EllipseIterator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A utility class to iterate over the path segments of an ellipse
through the PathIterator interface.

@author      Jim Graham
"
      classrelation 3028354 // <realization>
	relation 3028354 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3028354 // <realization>
	  b parent class_ref 380930 // PathIterator
      end

      attribute 1555714 "x"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1555842 "y"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1555970 "w"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1556098 "h"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3028482 // affine (<unidirectional association>)
	relation 3028482 --->
	  a role_name "affine" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3028482 // affine (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      attribute 1556226 "index"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6537346 "EllipseIterator"
	package explicit_return_type ""
	nparams 2
	  param inout name "e" type class_ref 891778 // Ellipse2D
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6537474 "getWindingRule"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the winding rule for determining the insideness of the
path.
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
"
      end

      operation 6537602 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if there are more points to read.
@return true if there are more points to read
"
      end

      operation 6537730 "next"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the iterator to the next segment of the path forwards
along the primary direction of traversal as long as there are
more points in that direction.
"
      end

      attribute 1556354 "CtrlVal"
	class_attribute const_attribute public explicit_type "double"
	init_value " 0.5522847498307933"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ArcIterator.btan(Math.PI/2)
"
      end

      attribute 1556482 "pcv"
	class_attribute const_attribute private explicit_type "double"
	init_value " 0.5 + CtrlVal * 0.5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "ctrlpts contains the control points for a set of 4 cubic
bezier curves that approximate a circle of radius 0.5
centered at 0.5, 0.5

"
      end

      attribute 1556610 "ncv"
	class_attribute const_attribute private explicit_type "double"
	init_value " 0.5 - CtrlVal * 0.5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1556738 "ctrlpts"
	class_attribute private explicit_type "double"
	multiplicity "[][]"
	init_value " {
        {  1.0,  pcv,  pcv,  1.0,  0.5,  1.0 },
        {  ncv,  1.0,  0.0,  pcv,  0.0,  0.5 },
        {  0.0,  ncv,  ncv,  0.0,  0.5,  0.0 },
        {  pcv,  0.0,  1.0,  ncv,  1.0,  0.5 }
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6537858 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A float array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of float x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end

      operation 6537986 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A double array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of double x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end
    end

    class 892290 "FlatteningPathIterator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>FlatteningPathIterator</code> class returns a flattened view of
another {@link PathIterator} object.  Other {@link java.awt.Shape Shape}
classes can use this class to provide flattening behavior for their paths
without having to perform the interpolation calculations themselves.

@author Jim Graham
"
      classrelation 3028610 // <realization>
	relation 3028610 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3028610 // <realization>
	  b parent class_ref 380930 // PathIterator
      end

      attribute 1556866 "GROW_SIZE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 24"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Multiple of cubic & quad curve size"
      end

      classrelation 3028738 // src (<unidirectional association>)
	relation 3028738 --->
	  a role_name "src" package
	    comment " The source iterator"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3028738 // src (<unidirectional association>)
	  b parent class_ref 380930 // PathIterator
      end

      attribute 1556994 "squareflat"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Square of the flatness parameter"
      end

      attribute 1557122 "limit"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for testing against squared lengths
 Maximum number of recursion levels"
      end

      attribute 1557250 "hold"
	package explicit_type "double"
	multiplicity "[]"
	init_value " new double[14]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The cache of interpolated coords"
      end

      attribute 1557378 "curx"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Note that this must be long enough
 to store a full cubic segment and
 a relative cubic segment to avoid
 aliasing when copying the coords
 of a curve to the end of the array.
 This is also serendipitously equal
 to the size of a full quad segment
 and 2 relative quad segments.
"
      end

      attribute 1557506 "cury"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Note that this must be long enough
 to store a full cubic segment and
 a relative cubic segment to avoid
 aliasing when copying the coords
 of a curve to the end of the array.
 This is also serendipitously equal
 to the size of a full quad segment
 and 2 relative quad segments.
 The ending x,y of the last segment"
      end

      attribute 1557634 "movx"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1557762 "movy"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The x,y of the last move segment"
      end

      attribute 1557890 "holdType"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The type of the curve being held"
      end

      attribute 1558018 "holdEnd"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for interpolation
 The index of the last curve segment"
      end

      attribute 1558146 "holdIndex"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " being held for interpolation
 The index of the curve segment"
      end

      attribute 1558274 "levels"
	package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " that was last interpolated.  This
 is the curve segment ready to be
 returned in the next call to
 currentSegment().
 The recursion level at which"
      end

      attribute 1558402 "levelIndex"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " each curve being held in storage
 was generated.
 The index of the entry in the"
      end

      attribute 1558530 "done"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " levels array of the curve segment
 at the holdIndex
 True when iteration is done"
      end

      operation 6538114 "FlatteningPathIterator"
	public explicit_return_type ""
	nparams 2
	  param inout name "src" type class_ref 380930 // PathIterator
	  param in name "flatness" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>FlatteningPathIterator</code> object that
flattens a path as it iterates over it.  The iterator does not
subdivide any curve read from the source iterator to more than
10 levels of subdivision which yields a maximum of 1024 line
segments per curve.
@param src the original unflattened path being iterated over
@param flatness the maximum allowable distance between the
control points and the flattened curve
"
      end

      operation 6538242 "FlatteningPathIterator"
	public explicit_return_type ""
	nparams 3
	  param inout name "src" type class_ref 380930 // PathIterator
	  param in name "flatness" explicit_type "double"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>FlatteningPathIterator</code> object
that flattens a path as it iterates over it.
The <code>limit</code> parameter allows you to control the
maximum number of recursive subdivisions that the iterator
can make before it assumes that the curve is flat enough
without measuring against the <code>flatness</code> parameter.
The flattened iteration therefore never generates more than
a maximum of <code>(2^limit)</code> line segments per curve.
@param src the original unflattened path being iterated over
@param flatness the maximum allowable distance between the
control points and the flattened curve
@param limit the maximum number of recursive subdivisions
allowed for any curved segment
@exception IllegalArgumentException if
         <code>flatness</code> or <code>limit</code>
         is less than zero
"
      end

      operation 6538370 "getFlatness"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the flatness of this iterator.
@return the flatness of this <code>FlatteningPathIterator</code>.
"
      end

      operation 6538498 "getRecursionLimit"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the recursion limit of this iterator.
@return the recursion limit of this
<code>FlatteningPathIterator</code>.
"
      end

      operation 6538626 "getWindingRule"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the winding rule for determining the interior of the
path.
@return the winding rule of the original unflattened path being
iterated over.
@see PathIterator#WIND_EVEN_ODD
@see PathIterator#WIND_NON_ZERO
"
      end

      operation 6538754 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the iteration is complete.
@return <code>true</code> if all the segments have
been read; <code>false</code> otherwise.
"
      end

      operation 6538882 "ensureHoldCapacity"
	package explicit_return_type "void"
	nparams 1
	  param in name "want" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that the hold array can hold up to (want) more values.
It is currently holding (hold.length - holdIndex) values.
"
      end

      operation 6539010 "next"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the iterator to the next segment of the path forwards
along the primary direction of traversal as long as there are
more points in that direction.
"
      end

      operation 6539138 "next"
	private explicit_return_type "void"
	nparams 1
	  param inout name "doNext" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6539266 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
A float array of length 6 must be passed in and can be used to
store the coordinates of the point(s).
Each point is stored as a pair of float x,y coordinates.
SEG_MOVETO and SEG_LINETO types return one point,
and SEG_CLOSE does not return any points.
@param coords an array that holds the data returned from
this method
@return the path segment type of the current path segment.
@exception NoSuchElementException if there
         are no more elements in the flattening path to be
         returned.
@see PathIterator#SEG_MOVETO
@see PathIterator#SEG_LINETO
@see PathIterator#SEG_CLOSE
"
      end

      operation 6539394 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
A double array of length 6 must be passed in and can be used to
store the coordinates of the point(s).
Each point is stored as a pair of double x,y coordinates.
SEG_MOVETO and SEG_LINETO types return one point,
and SEG_CLOSE does not return any points.
@param coords an array that holds the data returned from
this method
@return the path segment type of the current path segment.
@exception NoSuchElementException if there
         are no more elements in the flattening path to be
         returned.
@see PathIterator#SEG_MOVETO
@see PathIterator#SEG_LINETO
@see PathIterator#SEG_CLOSE
"
      end
    end

    class 892418 "Path2D"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The {@code Path2D} class provides a simple, yet flexible
shape which represents an arbitrary geometric path.
It can fully represent any path which can be iterated by the
{@link PathIterator} interface including all of its segment
types and winding rules and it implements all of the
basic hit testing methods of the {@link Shape} interface.
<p>
Use {@link Path2D.Float} when dealing with data that can be represented
and used with floating point precision.  Use {@link Path2D.Double}
for data that requires the accuracy or range of double precision.
<p>
{@code Path2D} provides exactly those facilities required for
basic construction and management of a geometric path and
implementation of the above interfaces with little added
interpretation.
If it is useful to manipulate the interiors of closed
geometric shapes beyond simple hit testing then the
{@link Area} class provides additional capabilities
specifically targeted at closed figures.
While both classes nominally implement the {@code Shape}
interface, they differ in purpose and together they provide
two useful views of a geometric shape where {@code Path2D}
deals primarily with a trajectory formed by path segments
and {@code Area} deals more with interpretation and manipulation
of enclosed regions of 2D geometric space.
<p>
The {@link PathIterator} interface has more detailed descriptions
of the types of segments that make up a path and the winding rules
that control how to determine which regions are inside or outside
the path.

@author Jim Graham
@since 1.6
"
      class 892546 "Float"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3029122 // <generalisation>
	  relation 3029122 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3029122 // <generalisation>
	    b parent class_ref 892418 // Path2D
	end

	classrelation 3029250 // <realization>
	  relation 3029250 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3029250 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1560578 "floatCoords"
	  package explicit_type "float"
	  multiplicity "[]"
	  cpp_decl ""
	  transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 6540930 "Float"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new empty single precision {@code Path2D} object
with a default winding rule of {@link #WIND_NON_ZERO}.

@since 1.6
"
	end

	operation 6541058 "Float"
	  public explicit_return_type ""
	  nparams 1
	    param in name "rule" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new empty single precision {@code Path2D} object
with the specified winding rule to control operations that
require the interior of the path to be defined.

@param rule the winding rule
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
@since 1.6
"
	end

	operation 6541186 "Float"
	  public explicit_return_type ""
	  nparams 2
	    param in name "rule" explicit_type "int"
	    param in name "initialCapacity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new empty single precision {@code Path2D} object
with the specified winding rule and the specified initial
capacity to store path segments.
This number is an initial guess as to how many path segments
will be added to the path, but the storage is expanded as
needed to store whatever path segments are added.

@param rule the winding rule
@param initialCapacity the estimate for the number of path segments
                       in the path
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
@since 1.6
"
	end

	operation 6541314 "Float"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "s" type class_ref 379394 // Shape
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new single precision {@code Path2D} object
from an arbitrary {@link Shape} object.
All of the initial geometry and the winding rule for this path are
taken from the specified {@code Shape} object.

@param s the specified {@code Shape} object
@since 1.6
"
	end

	operation 6541442 "Float"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "s" type class_ref 379394 // Shape
	    param inout name "at" type class_ref 381058 // AffineTransform
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new single precision {@code Path2D} object
from an arbitrary {@link Shape} object, transformed by an
{@link AffineTransform} object.
All of the initial geometry and the winding rule for this path are
taken from the specified {@code Shape} object and transformed
by the specified {@code AffineTransform} object.

@param s the specified {@code Shape} object
@param at the specified {@code AffineTransform} object
@since 1.6
"
	end

	operation 6541570 "cloneCoordsFloat"
	  package explicit_return_type "float"
	  nparams 1
	    param inout name "at" type class_ref 381058 // AffineTransform
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6541698 "cloneCoordsDouble"
	  package explicit_return_type "double"
	  nparams 1
	    param inout name "at" type class_ref 381058 // AffineTransform
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6541826 "append"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6541954 "append"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6542082 "getPoint"
	  package return_type class_ref 380802 // Point2D
	  nparams 1
	    param in name "coordindex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6542210 "needRoom"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "needMove" explicit_type "boolean"
	    param in name "newCoords" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6542338 "expandCoords"
	  class_operation package explicit_return_type "float"
	  nparams 2
	    param inout name "oldCoords" explicit_type "float"
	  multiplicity "[]"
	    param in name "needed" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6542466 "moveTo"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6542594 "moveTo"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds a point to the path by moving to the specified
coordinates specified in float precision.
<p>
This method provides a single precision variant of
the double precision {@code moveTo()} method on the
base {@code Path2D} class.

@param x the specified X coordinate
@param y the specified Y coordinate
@see Path2D#moveTo
@since 1.6
"
	end

	operation 6542722 "lineTo"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6542850 "lineTo"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds a point to the path by drawing a straight line from the
current coordinates to the new specified coordinates
specified in float precision.
<p>
This method provides a single precision variant of
the double precision {@code lineTo()} method on the
base {@code Path2D} class.

@param x the specified X coordinate
@param y the specified Y coordinate
@see Path2D#lineTo
@since 1.6
"
	end

	operation 6542978 "quadTo"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6543106 "quadTo"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x1" explicit_type "float"
	    param in name "y1" explicit_type "float"
	    param in name "x2" explicit_type "float"
	    param in name "y2" explicit_type "float"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds a curved segment, defined by two new points, to the path by
drawing a Quadratic curve that intersects both the current
coordinates and the specified coordinates {@code (x2,y2)},
using the specified point {@code (x1,y1)} as a quadratic
parametric control point.
All coordinates are specified in float precision.
<p>
This method provides a single precision variant of
the double precision {@code quadTo()} method on the
base {@code Path2D} class.

@param x1 the X coordinate of the quadratic control point
@param y1 the Y coordinate of the quadratic control point
@param x2 the X coordinate of the final end point
@param y2 the Y coordinate of the final end point
@see Path2D#quadTo
@since 1.6
"
	end

	operation 6543234 "curveTo"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	    param in name "x3" explicit_type "double"
	    param in name "y3" explicit_type "double"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6543362 "curveTo"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "x1" explicit_type "float"
	    param in name "y1" explicit_type "float"
	    param in name "x2" explicit_type "float"
	    param in name "y2" explicit_type "float"
	    param in name "x3" explicit_type "float"
	    param in name "y3" explicit_type "float"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds a curved segment, defined by three new points, to the path by
drawing a B&eacute;zier curve that intersects both the current
coordinates and the specified coordinates {@code (x3,y3)},
using the specified points {@code (x1,y1)} and {@code (x2,y2)} as
B&eacute;zier control points.
All coordinates are specified in float precision.
<p>
This method provides a single precision variant of
the double precision {@code curveTo()} method on the
base {@code Path2D} class.

@param x1 the X coordinate of the first B&eacute;zier control point
@param y1 the Y coordinate of the first B&eacute;zier control point
@param x2 the X coordinate of the second B&eacute;zier control point
@param y2 the Y coordinate of the second B&eacute;zier control point
@param x3 the X coordinate of the final end point
@param y3 the Y coordinate of the final end point
@see Path2D#curveTo
@since 1.6
"
	end

	operation 6543490 "pointCrossings"
	  package explicit_return_type "int"
	  nparams 2
	    param in name "px" explicit_type "double"
	    param in name "py" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6543618 "rectCrossings"
	  package explicit_return_type "int"
	  nparams 4
	    param in name "rxmin" explicit_type "double"
	    param in name "rymin" explicit_type "double"
	    param in name "rxmax" explicit_type "double"
	    param in name "rymax" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6543746 "append"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "pi" type class_ref 380930 // PathIterator
	    param inout name "connect" explicit_type "boolean"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6543874 "transform"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "at" type class_ref 381058 // AffineTransform
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6544002 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6544130 "getPathIterator"
	  public return_type class_ref 380930 // PathIterator
	  nparams 1
	    param inout name "at" type class_ref 381058 // AffineTransform
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
<p>
The iterator for this class is not multi-threaded safe,
which means that the {@code Path2D} class does not
guarantee that modifications to the geometry of this
{@code Path2D} object do not affect any iterations of
that geometry that are already in process.

@since 1.6
"
	end

	operation 6544258 "clone"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a new object of the same class as this object.

@return     a clone of this instance.
@exception  OutOfMemoryError    if there is not enough memory.
@see        java.lang.Cloneable
@since      1.6
"
	end

	attribute 1560706 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 6990832515060788886L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end

	operation 6544386 "writeObject"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 173442 // ObjectOutputStream
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes the default serializable fields to the
{@code ObjectOutputStream} followed by an explicit
serialization of the path segments stored in this
path.

@serialData
<a name=\"Path2DSerialData\"><!-- --></a>
<ol>
<li>The default serializable fields.
There are no default serializable fields as of 1.6.
<li>followed by
a byte indicating the storage type of the original object
as a hint (SERIAL_STORAGE_FLT_ARRAY)
<li>followed by
an integer indicating the number of path segments to follow (NP)
or -1 to indicate an unknown number of path segments follows
<li>followed by
an integer indicating the total number of coordinates to follow (NC)
or -1 to indicate an unknown number of coordinates follows
(NC should always be even since coordinates always appear in pairs
 representing an x,y pair)
<li>followed by
a byte indicating the winding rule
({@link #WIND_EVEN_ODD WIND_EVEN_ODD} or
 {@link #WIND_NON_ZERO WIND_NON_ZERO})
<li>followed by
{@code NP} (or unlimited if {@code NP < 0}) sets of values consisting of
a single byte indicating a path segment type
followed by one or more pairs of float or double
values representing the coordinates of the path segment
<li>followed by
a byte indicating the end of the path (SERIAL_PATH_END).
</ol>
<p>
The following byte value constants are used in the serialized form
of {@code Path2D} objects:
<table>
<tr>
<th>Constant Name</th>
<th>Byte Value</th>
<th>Followed by</th>
<th>Description</th>
</tr>
<tr>
<td>{@code SERIAL_STORAGE_FLT_ARRAY}</td>
<td>0x30</td>
<td></td>
<td>A hint that the original {@code Path2D} object stored
the coordinates in a Java array of floats.</td>
</tr>
<tr>
<td>{@code SERIAL_STORAGE_DBL_ARRAY}</td>
<td>0x31</td>
<td></td>
<td>A hint that the original {@code Path2D} object stored
the coordinates in a Java array of doubles.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_FLT_MOVETO}</td>
<td>0x40</td>
<td>2 floats</td>
<td>A {@link #moveTo moveTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_FLT_LINETO}</td>
<td>0x41</td>
<td>2 floats</td>
<td>A {@link #lineTo lineTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_FLT_QUADTO}</td>
<td>0x42</td>
<td>4 floats</td>
<td>A {@link #quadTo quadTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_FLT_CUBICTO}</td>
<td>0x43</td>
<td>6 floats</td>
<td>A {@link #curveTo curveTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_DBL_MOVETO}</td>
<td>0x50</td>
<td>2 doubles</td>
<td>A {@link #moveTo moveTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_DBL_LINETO}</td>
<td>0x51</td>
<td>2 doubles</td>
<td>A {@link #lineTo lineTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_DBL_QUADTO}</td>
<td>0x52</td>
<td>4 doubles</td>
<td>A {@link #curveTo curveTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_DBL_CUBICTO}</td>
<td>0x53</td>
<td>6 doubles</td>
<td>A {@link #curveTo curveTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_CLOSE}</td>
<td>0x60</td>
<td></td>
<td>A {@link #closePath closePath} path segment.</td>
</tr>
<tr>
<td>{@code SERIAL_PATH_END}</td>
<td>0x61</td>
<td></td>
<td>There are no more path segments following.</td>
</table>

@since 1.6
"
	end

	operation 6544514 "readObject"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 168962 // ObjectInputStream
	  nexceptions 2
	    exception class_ref 169730 // ClassNotFoundException
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads the default serializable fields from the
{@code ObjectInputStream} followed by an explicit
serialization of the path segments stored in this
path.
<p>
There are no default serializable fields as of 1.6.
<p>
The serial data for this object is described in the
writeObject method.

@since 1.6
"
	end

	class 892674 "CopyIterator"
	  visibility package 
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3029378 // <generalisation>
	    relation 3029378 ---|>
	      a public
		java "${type}"
		classrelation_ref 3029378 // <generalisation>
	      b parent class_ref 892802 // Iterator
	  end

	  attribute 1560834 "floatCoords"
	    package explicit_type "float"
	    multiplicity "[]"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  operation 6544642 "CopyIterator"
	    package explicit_return_type ""
	    nparams 1
	      param inout name "p2df" type class_ref 892546 // Float
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 6544770 "currentSegment"
	    public explicit_return_type "int"
	    nparams 1
	      param inout name "coords" explicit_type "float"
	    multiplicity "[]"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 6544898 "currentSegment"
	    public explicit_return_type "int"
	    nparams 1
	      param inout name "coords" explicit_type "double"
	    multiplicity "[]"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	class 892930 "TxIterator"
	  visibility package 
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3029506 // <generalisation>
	    relation 3029506 ---|>
	      a public
		java "${type}"
		classrelation_ref 3029506 // <generalisation>
	      b parent class_ref 892802 // Iterator
	  end

	  attribute 1560962 "floatCoords"
	    package explicit_type "float"
	    multiplicity "[]"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  classrelation 3029634 // affine (<unidirectional association>)
	    relation 3029634 --->
	      a role_name "affine" package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3029634 // affine (<unidirectional association>)
	      b parent class_ref 381058 // AffineTransform
	  end

	  operation 6545026 "TxIterator"
	    package explicit_return_type ""
	    nparams 2
	      param inout name "p2df" type class_ref 892546 // Float
	      param inout name "at" type class_ref 381058 // AffineTransform
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 6545154 "currentSegment"
	    public explicit_return_type "int"
	    nparams 1
	      param inout name "coords" explicit_type "float"
	    multiplicity "[]"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 6545282 "currentSegment"
	    public explicit_return_type "int"
	    nparams 1
	      param inout name "coords" explicit_type "double"
	    multiplicity "[]"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end
      end

      classrelation 3028866 // <realization>
	relation 3028866 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3028866 // <realization>
	  b parent class_ref 379394 // Shape
      end

      classrelation 3028994 // <realization>
	relation 3028994 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3028994 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      attribute 1558658 "WIND_EVEN_ODD"
	class_attribute const_attribute public explicit_type "int"
	init_value " PathIterator.WIND_EVEN_ODD"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An even-odd winding rule for determining the interior of
a path.

@see PathIterator#WIND_EVEN_ODD
@since 1.6

"
      end

      attribute 1558786 "WIND_NON_ZERO"
	class_attribute const_attribute public explicit_type "int"
	init_value " PathIterator.WIND_NON_ZERO"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A non-zero winding rule for determining the interior of a
path.

@see PathIterator#WIND_NON_ZERO
@since 1.6

"
      end

      attribute 1558914 "SEG_MOVETO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " (byte) PathIterator.SEG_MOVETO"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " For code simplicity, copy these constants to our namespace
 and cast them to byte constants for easy storage.
"
      end

      attribute 1559042 "SEG_LINETO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " (byte) PathIterator.SEG_LINETO"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1559170 "SEG_QUADTO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " (byte) PathIterator.SEG_QUADTO"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1559298 "SEG_CUBICTO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " (byte) PathIterator.SEG_CUBICTO"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1559426 "SEG_CLOSE"
	class_attribute const_attribute private explicit_type "byte"
	init_value " (byte) PathIterator.SEG_CLOSE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1559554 "pointTypes"
	package explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1559682 "numTypes"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1559810 "numCoords"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1559938 "windingRule"
	package explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1560066 "INIT_SIZE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1560194 "EXPAND_MAX"
	class_attribute const_attribute package explicit_type "int"
	init_value " 500"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1560322 "EXPAND_MAX_COORDS"
	class_attribute const_attribute package explicit_type "int"
	init_value " EXPAND_MAX * 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1560450 "EXPAND_MIN"
	class_attribute const_attribute package explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ensure > 6 (cubics)"
      end

      operation 6539522 "Path2D"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new empty {@code Path2D} object.
It is assumed that the package sibling subclass that is
defaulting to this constructor will fill in all values.

@since 1.6

 private protected "
      end

      operation 6539650 "Path2D"
	package explicit_return_type ""
	nparams 2
	  param in name "rule" explicit_type "int"
	  param in name "initialTypes" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Path2D} object from the given
specified initial values.
This method is only intended for internal use and should
not be made public if the other constructors for this class
are ever exposed.

@param rule the winding rule
@param initialTypes the size to make the initial array to
                    store the path segment types
@since 1.6

 private protected "
      end

      operation 6539778 "cloneCoordsFloat"
	abstract package explicit_return_type "float"
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6539906 "cloneCoordsDouble"
	abstract package explicit_return_type "double"
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6540034 "append"
	abstract package explicit_return_type "void"
	nparams 2
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6540162 "append"
	abstract package explicit_return_type "void"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6540290 "getPoint"
	abstract package return_type class_ref 380802 // Point2D
	nparams 1
	  param in name "coordindex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6540418 "needRoom"
	abstract package explicit_return_type "void"
	nparams 2
	  param inout name "needMove" explicit_type "boolean"
	  param in name "newCoords" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6540546 "pointCrossings"
	abstract package explicit_return_type "int"
	nparams 2
	  param in name "px" explicit_type "double"
	  param in name "py" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6540674 "rectCrossings"
	abstract package explicit_return_type "int"
	nparams 4
	  param in name "rxmin" explicit_type "double"
	  param in name "rymin" explicit_type "double"
	  param in name "rxmax" explicit_type "double"
	  param in name "rymax" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6540802 "expandPointTypes"
	class_operation package explicit_return_type "byte"
	nparams 2
	  param inout name "oldPointTypes" explicit_type "byte"
	multiplicity "[]"
	  param in name "needed" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 892802 "Iterator"
	abstract visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3030402 // <realization>
	  relation 3030402 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3030402 // <realization>
	    b parent class_ref 380930 // PathIterator
	end

	attribute 1563138 "typeIdx"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1563266 "pointIdx"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3030530 // path (<unidirectional association>)
	  relation 3030530 --->
	    a role_name "path" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3030530 // path (<unidirectional association>)
	    b parent class_ref 892418 // Path2D
	end

	attribute 1563394 "curvecoords"
	  class_attribute const_attribute package explicit_type "int"
	  multiplicity "[]"
	  init_value " {2, 2, 4, 6, 0}"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 6553218 "Iterator"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "path" type class_ref 892418 // Path2D
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6553346 "getWindingRule"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6553474 "isDone"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6553602 "next"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 893058 "Double"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3029762 // <generalisation>
	  relation 3029762 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3029762 // <generalisation>
	    b parent class_ref 892418 // Path2D
	end

	classrelation 3029890 // <realization>
	  relation 3029890 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3029890 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1561090 "doubleCoords"
	  package explicit_type "double"
	  multiplicity "[]"
	  cpp_decl ""
	  transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 6545410 "Double"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new empty double precision {@code Path2D} object
with a default winding rule of {@link #WIND_NON_ZERO}.

@since 1.6
"
	end

	operation 6545538 "Double"
	  public explicit_return_type ""
	  nparams 1
	    param in name "rule" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new empty double precision {@code Path2D} object
with the specified winding rule to control operations that
require the interior of the path to be defined.

@param rule the winding rule
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
@since 1.6
"
	end

	operation 6545666 "Double"
	  public explicit_return_type ""
	  nparams 2
	    param in name "rule" explicit_type "int"
	    param in name "initialCapacity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new empty double precision {@code Path2D} object
with the specified winding rule and the specified initial
capacity to store path segments.
This number is an initial guess as to how many path segments
are in the path, but the storage is expanded as needed to store
whatever path segments are added to this path.

@param rule the winding rule
@param initialCapacity the estimate for the number of path segments
                       in the path
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
@since 1.6
"
	end

	operation 6545794 "Double"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "s" type class_ref 379394 // Shape
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new double precision {@code Path2D} object
from an arbitrary {@link Shape} object.
All of the initial geometry and the winding rule for this path are
taken from the specified {@code Shape} object.

@param s the specified {@code Shape} object
@since 1.6
"
	end

	operation 6545922 "Double"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "s" type class_ref 379394 // Shape
	    param inout name "at" type class_ref 381058 // AffineTransform
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new double precision {@code Path2D} object
from an arbitrary {@link Shape} object, transformed by an
{@link AffineTransform} object.
All of the initial geometry and the winding rule for this path are
taken from the specified {@code Shape} object and transformed
by the specified {@code AffineTransform} object.

@param s the specified {@code Shape} object
@param at the specified {@code AffineTransform} object
@since 1.6
"
	end

	operation 6546050 "cloneCoordsFloat"
	  package explicit_return_type "float"
	  nparams 1
	    param inout name "at" type class_ref 381058 // AffineTransform
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6546178 "cloneCoordsDouble"
	  package explicit_return_type "double"
	  nparams 1
	    param inout name "at" type class_ref 381058 // AffineTransform
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6546306 "append"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6546434 "append"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6546562 "getPoint"
	  package return_type class_ref 380802 // Point2D
	  nparams 1
	    param in name "coordindex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6546690 "needRoom"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "needMove" explicit_type "boolean"
	    param in name "newCoords" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6546818 "expandCoords"
	  class_operation package explicit_return_type "double"
	  nparams 2
	    param inout name "oldCoords" explicit_type "double"
	  multiplicity "[]"
	    param in name "needed" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6546946 "moveTo"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6547074 "lineTo"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6547202 "quadTo"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6547330 "curveTo"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	    param in name "x3" explicit_type "double"
	    param in name "y3" explicit_type "double"
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6547458 "pointCrossings"
	  package explicit_return_type "int"
	  nparams 2
	    param in name "px" explicit_type "double"
	    param in name "py" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6547586 "rectCrossings"
	  package explicit_return_type "int"
	  nparams 4
	    param in name "rxmin" explicit_type "double"
	    param in name "rymin" explicit_type "double"
	    param in name "rxmax" explicit_type "double"
	    param in name "rymax" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6547714 "append"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "pi" type class_ref 380930 // PathIterator
	    param inout name "connect" explicit_type "boolean"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6547842 "transform"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "at" type class_ref 381058 // AffineTransform
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6547970 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.6
"
	end

	operation 6548098 "getPathIterator"
	  public return_type class_ref 380930 // PathIterator
	  nparams 1
	    param inout name "at" type class_ref 381058 // AffineTransform
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
<p>
The iterator for this class is not multi-threaded safe,
which means that the {@code Path2D} class does not
guarantee that modifications to the geometry of this
{@code Path2D} object do not affect any iterations of
that geometry that are already in process.

@param at an {@code AffineTransform}
@return a new {@code PathIterator} that iterates along the boundary
        of this {@code Shape} and provides access to the geometry
        of this {@code Shape}'s outline
@since 1.6
"
	end

	operation 6548226 "clone"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a new object of the same class as this object.

@return     a clone of this instance.
@exception  OutOfMemoryError    if there is not enough memory.
@see        java.lang.Cloneable
@since      1.6
"
	end

	attribute 1561218 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 1826762518450014216L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end

	operation 6548354 "writeObject"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 173442 // ObjectOutputStream
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Writes the default serializable fields to the
{@code ObjectOutputStream} followed by an explicit
serialization of the path segments stored in this
path.

@serialData
<a name=\"Path2DSerialData\"><!-- --></a>
<ol>
<li>The default serializable fields.
There are no default serializable fields as of 1.6.
<li>followed by
a byte indicating the storage type of the original object
as a hint (SERIAL_STORAGE_DBL_ARRAY)
<li>followed by
an integer indicating the number of path segments to follow (NP)
or -1 to indicate an unknown number of path segments follows
<li>followed by
an integer indicating the total number of coordinates to follow (NC)
or -1 to indicate an unknown number of coordinates follows
(NC should always be even since coordinates always appear in pairs
 representing an x,y pair)
<li>followed by
a byte indicating the winding rule
({@link #WIND_EVEN_ODD WIND_EVEN_ODD} or
 {@link #WIND_NON_ZERO WIND_NON_ZERO})
<li>followed by
{@code NP} (or unlimited if {@code NP < 0}) sets of values consisting of
a single byte indicating a path segment type
followed by one or more pairs of float or double
values representing the coordinates of the path segment
<li>followed by
a byte indicating the end of the path (SERIAL_PATH_END).
</ol>
<p>
The following byte value constants are used in the serialized form
of {@code Path2D} objects:
<table>
<tr>
<th>Constant Name</th>
<th>Byte Value</th>
<th>Followed by</th>
<th>Description</th>
</tr>
<tr>
<td>{@code SERIAL_STORAGE_FLT_ARRAY}</td>
<td>0x30</td>
<td></td>
<td>A hint that the original {@code Path2D} object stored
the coordinates in a Java array of floats.</td>
</tr>
<tr>
<td>{@code SERIAL_STORAGE_DBL_ARRAY}</td>
<td>0x31</td>
<td></td>
<td>A hint that the original {@code Path2D} object stored
the coordinates in a Java array of doubles.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_FLT_MOVETO}</td>
<td>0x40</td>
<td>2 floats</td>
<td>A {@link #moveTo moveTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_FLT_LINETO}</td>
<td>0x41</td>
<td>2 floats</td>
<td>A {@link #lineTo lineTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_FLT_QUADTO}</td>
<td>0x42</td>
<td>4 floats</td>
<td>A {@link #quadTo quadTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_FLT_CUBICTO}</td>
<td>0x43</td>
<td>6 floats</td>
<td>A {@link #curveTo curveTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_DBL_MOVETO}</td>
<td>0x50</td>
<td>2 doubles</td>
<td>A {@link #moveTo moveTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_DBL_LINETO}</td>
<td>0x51</td>
<td>2 doubles</td>
<td>A {@link #lineTo lineTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_DBL_QUADTO}</td>
<td>0x52</td>
<td>4 doubles</td>
<td>A {@link #curveTo curveTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_DBL_CUBICTO}</td>
<td>0x53</td>
<td>6 doubles</td>
<td>A {@link #curveTo curveTo} path segment follows.</td>
</tr>
<tr>
<td>{@code SERIAL_SEG_CLOSE}</td>
<td>0x60</td>
<td></td>
<td>A {@link #closePath closePath} path segment.</td>
</tr>
<tr>
<td>{@code SERIAL_PATH_END}</td>
<td>0x61</td>
<td></td>
<td>There are no more path segments following.</td>
</table>

@since 1.6
"
	end

	operation 6548482 "readObject"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 168962 // ObjectInputStream
	  nexceptions 2
	    exception class_ref 169730 // ClassNotFoundException
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reads the default serializable fields from the
{@code ObjectInputStream} followed by an explicit
serialization of the path segments stored in this
path.
<p>
There are no default serializable fields as of 1.6.
<p>
The serial data for this object is described in the
writeObject method.

@since 1.6
"
	end

	class 893186 "CopyIterator"
	  visibility package 
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3030018 // <generalisation>
	    relation 3030018 ---|>
	      a public
		java "${type}"
		classrelation_ref 3030018 // <generalisation>
	      b parent class_ref 892802 // Iterator
	  end

	  attribute 1561346 "doubleCoords"
	    package explicit_type "double"
	    multiplicity "[]"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  operation 6548610 "CopyIterator"
	    package explicit_return_type ""
	    nparams 1
	      param inout name "p2dd" type class_ref 893058 // Double
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 6548738 "currentSegment"
	    public explicit_return_type "int"
	    nparams 1
	      param inout name "coords" explicit_type "float"
	    multiplicity "[]"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 6548866 "currentSegment"
	    public explicit_return_type "int"
	    nparams 1
	      param inout name "coords" explicit_type "double"
	    multiplicity "[]"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	class 893314 "TxIterator"
	  visibility package 
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3030146 // <generalisation>
	    relation 3030146 ---|>
	      a public
		java "${type}"
		classrelation_ref 3030146 // <generalisation>
	      b parent class_ref 892802 // Iterator
	  end

	  attribute 1561474 "doubleCoords"
	    package explicit_type "double"
	    multiplicity "[]"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  classrelation 3030274 // affine (<unidirectional association>)
	    relation 3030274 --->
	      a role_name "affine" package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3030274 // affine (<unidirectional association>)
	      b parent class_ref 381058 // AffineTransform
	  end

	  operation 6548994 "TxIterator"
	    package explicit_return_type ""
	    nparams 2
	      param inout name "p2dd" type class_ref 893058 // Double
	      param inout name "at" type class_ref 381058 // AffineTransform
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 6549122 "currentSegment"
	    public explicit_return_type "int"
	    nparams 1
	      param inout name "coords" explicit_type "float"
	    multiplicity "[]"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 6549250 "currentSegment"
	    public explicit_return_type "int"
	    nparams 1
	      param inout name "coords" explicit_type "double"
	    multiplicity "[]"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end
      end

      operation 6549378 "moveTo"
	abstract public explicit_return_type "void"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a point to the path by moving to the specified
coordinates specified in double precision.

@param x the specified X coordinate
@param y the specified Y coordinate
@since 1.6
"
      end

      operation 6549506 "lineTo"
	abstract public explicit_return_type "void"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a point to the path by drawing a straight line from the
current coordinates to the new specified coordinates
specified in double precision.

@param x the specified X coordinate
@param y the specified Y coordinate
@since 1.6
"
      end

      operation 6549634 "quadTo"
	abstract public explicit_return_type "void"
	nparams 4
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a curved segment, defined by two new points, to the path by
drawing a Quadratic curve that intersects both the current
coordinates and the specified coordinates {@code (x2,y2)},
using the specified point {@code (x1,y1)} as a quadratic
parametric control point.
All coordinates are specified in double precision.

@param x1 the X coordinate of the quadratic control point
@param y1 the Y coordinate of the quadratic control point
@param x2 the X coordinate of the final end point
@param y2 the Y coordinate of the final end point
@since 1.6
"
      end

      operation 6549762 "curveTo"
	abstract public explicit_return_type "void"
	nparams 6
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	  param in name "x3" explicit_type "double"
	  param in name "y3" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a curved segment, defined by three new points, to the path by
drawing a B&eacute;zier curve that intersects both the current
coordinates and the specified coordinates {@code (x3,y3)},
using the specified points {@code (x1,y1)} and {@code (x2,y2)} as
B&eacute;zier control points.
All coordinates are specified in double precision.

@param x1 the X coordinate of the first B&eacute;zier control point
@param y1 the Y coordinate of the first B&eacute;zier control point
@param x2 the X coordinate of the second B&eacute;zier control point
@param y2 the Y coordinate of the second B&eacute;zier control point
@param x3 the X coordinate of the final end point
@param y3 the Y coordinate of the final end point
@since 1.6
"
      end

      operation 6549890 "closePath"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the current subpath by drawing a straight line back to
the coordinates of the last {@code moveTo}.  If the path is already
closed then this method has no effect.

@since 1.6
"
      end

      operation 6550018 "append"
	public explicit_return_type "void"
	nparams 2
	  param inout name "s" type class_ref 379394 // Shape
	  param inout name "connect" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the geometry of the specified {@code Shape} object to the
path, possibly connecting the new geometry to the existing path
segments with a line segment.
If the {@code connect} parameter is {@code true} and the
path is not empty then any initial {@code moveTo} in the
geometry of the appended {@code Shape}
is turned into a {@code lineTo} segment.
If the destination coordinates of such a connecting {@code lineTo}
segment match the ending coordinates of a currently open
subpath then the segment is omitted as superfluous.
The winding rule of the specified {@code Shape} is ignored
and the appended geometry is governed by the winding
rule specified for this path.

@param s the {@code Shape} whose geometry is appended
         to this path
@param connect a boolean to control whether or not to turn an initial
               {@code moveTo} segment into a {@code lineTo} segment
               to connect the new geometry to the existing path
@since 1.6
"
      end

      operation 6550146 "append"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "pi" type class_ref 380930 // PathIterator
	  param inout name "connect" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the geometry of the specified
{@link PathIterator} object
to the path, possibly connecting the new geometry to the existing
path segments with a line segment.
If the {@code connect} parameter is {@code true} and the
path is not empty then any initial {@code moveTo} in the
geometry of the appended {@code Shape} is turned into a
{@code lineTo} segment.
If the destination coordinates of such a connecting {@code lineTo}
segment match the ending coordinates of a currently open
subpath then the segment is omitted as superfluous.
The winding rule of the specified {@code Shape} is ignored
and the appended geometry is governed by the winding
rule specified for this path.

@param pi the {@code PathIterator} whose geometry is appended to
          this path
@param connect a boolean to control whether or not to turn an initial
               {@code moveTo} segment into a {@code lineTo} segment
               to connect the new geometry to the existing path
@since 1.6
"
      end

      operation 6550274 "getWindingRule"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fill style winding rule.

@return an integer representing the current winding rule.
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
@see #setWindingRule
@since 1.6
"
      end

      operation 6550402 "setWindingRule"
	public explicit_return_type "void"
	nparams 1
	  param in name "rule" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the winding rule for this path to the specified value.

@param rule an integer representing the specified
            winding rule
@exception IllegalArgumentException if
         {@code rule} is not either
         {@link #WIND_EVEN_ODD} or
         {@link #WIND_NON_ZERO}
@see #getWindingRule
@since 1.6
"
      end

      operation 6550530 "getCurrentPoint"
	public return_type class_ref 380802 // Point2D
	nparams 0
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates most recently added to the end of the path
as a {@link Point2D} object.

@return a {@code Point2D} object containing the ending coordinates of
        the path or {@code null} if there are no points in the path.
@since 1.6
"
      end

      operation 6550658 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the path to empty.  The append position is set back to the
beginning of the path and all coordinates and point types are
forgotten.

@since 1.6
"
      end

      operation 6550786 "transform"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transforms the geometry of this path using the specified
{@link AffineTransform}.
The geometry is transformed in place, which permanently changes the
boundary defined by this object.

@param at the {@code AffineTransform} used to transform the area
@since 1.6
"
      end

      operation 6550914 "createTransformedShape"
	public return_type class_ref 379394 // Shape
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code Shape} representing a transformed version
of this {@code Path2D}.
Note that the exact type and coordinate precision of the return
value is not specified for this method.
The method will return a Shape that contains no less precision
for the transformed geometry than this {@code Path2D} currently
maintains, but it may contain no more precision either.
If the tradeoff of precision vs. storage size in the result is
important then the convenience constructors in the
{@link Path2D.Float#Path2D.Float(Shape, AffineTransform) Path2D.Float}
and
{@link Path2D.Double#Path2D.Double(Shape, AffineTransform) Path2D.Double}
subclasses should be used to make the choice explicit.

@param at the {@code AffineTransform} used to transform a
          new {@code Shape}.
@return a new {@code Shape}, transformed with the specified
        {@code AffineTransform}.
@since 1.6
"
      end

      operation 6551042 "getBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.6
"
      end

      operation 6551170 "contains"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param inout name "pi" type class_ref 380930 // PathIterator
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified coordinates are inside the closed
boundary of the specified {@link PathIterator}.
<p>
This method provides a basic facility for implementors of
the {@link Shape} interface to implement support for the
{@link Shape#contains(double, double)} method.

@param pi the specified {@code PathIterator}
@param x the specified X coordinate
@param y the specified Y coordinate
@return {@code true} if the specified coordinates are inside the
        specified {@code PathIterator}; {@code false} otherwise
@since 1.6
"
      end

      operation 6551298 "contains"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "pi" type class_ref 380930 // PathIterator
	  param inout name "p" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified {@link Point2D} is inside the closed
boundary of the specified {@link PathIterator}.
<p>
This method provides a basic facility for implementors of
the {@link Shape} interface to implement support for the
{@link Shape#contains(Point2D)} method.

@param pi the specified {@code PathIterator}
@param p the specified {@code Point2D}
@return {@code true} if the specified coordinates are inside the
        specified {@code PathIterator}; {@code false} otherwise
@since 1.6
"
      end

      operation 6551426 "contains"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.6
"
      end

      operation 6551554 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 380802 // Point2D
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.6
"
      end

      operation 6551682 "contains"
	class_operation public explicit_return_type "boolean"
	nparams 5
	  param inout name "pi" type class_ref 380930 // PathIterator
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified rectangular area is entirely inside the
closed boundary of the specified {@link PathIterator}.
<p>
This method provides a basic facility for implementors of
the {@link Shape} interface to implement support for the
{@link Shape#contains(double, double, double, double)} method.
<p>
This method object may conservatively return false in
cases where the specified rectangular area intersects a
segment of the path, but that segment does not represent a
boundary between the interior and exterior of the path.
Such segments could lie entirely within the interior of the
path if they are part of a path with a {@link #WIND_NON_ZERO}
winding rule or if the segments are retraced in the reverse
direction such that the two sets of segments cancel each
other out without any exterior area falling between them.
To determine whether segments represent true boundaries of
the interior of the path would require extensive calculations
involving all of the segments of the path and the winding
rule and are thus beyond the scope of this implementation.

@param pi the specified {@code PathIterator}
@param x the specified X coordinate
@param y the specified Y coordinate
@param w the width of the specified rectangular area
@param h the height of the specified rectangular area
@return {@code true} if the specified {@code PathIterator} contains
        the specified rectangular area; {@code false} otherwise.
@since 1.6
"
      end

      operation 6551810 "contains"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "pi" type class_ref 380930 // PathIterator
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the specified {@link Rectangle2D} is entirely inside the
closed boundary of the specified {@link PathIterator}.
<p>
This method provides a basic facility for implementors of
the {@link Shape} interface to implement support for the
{@link Shape#contains(Rectangle2D)} method.
<p>
This method object may conservatively return false in
cases where the specified rectangular area intersects a
segment of the path, but that segment does not represent a
boundary between the interior and exterior of the path.
Such segments could lie entirely within the interior of the
path if they are part of a path with a {@link #WIND_NON_ZERO}
winding rule or if the segments are retraced in the reverse
direction such that the two sets of segments cancel each
other out without any exterior area falling between them.
To determine whether segments represent true boundaries of
the interior of the path would require extensive calculations
involving all of the segments of the path and the winding
rule and are thus beyond the scope of this implementation.

@param pi the specified {@code PathIterator}
@param r a specified {@code Rectangle2D}
@return {@code true} if the specified {@code PathIterator} contains
        the specified {@code Rectangle2D}; {@code false} otherwise.
@since 1.6
"
      end

      operation 6551938 "contains"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
<p>
This method object may conservatively return false in
cases where the specified rectangular area intersects a
segment of the path, but that segment does not represent a
boundary between the interior and exterior of the path.
Such segments could lie entirely within the interior of the
path if they are part of a path with a {@link #WIND_NON_ZERO}
winding rule or if the segments are retraced in the reverse
direction such that the two sets of segments cancel each
other out without any exterior area falling between them.
To determine whether segments represent true boundaries of
the interior of the path would require extensive calculations
involving all of the segments of the path and the winding
rule and are thus beyond the scope of this implementation.

@since 1.6
"
      end

      operation 6552066 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
<p>
This method object may conservatively return false in
cases where the specified rectangular area intersects a
segment of the path, but that segment does not represent a
boundary between the interior and exterior of the path.
Such segments could lie entirely within the interior of the
path if they are part of a path with a {@link #WIND_NON_ZERO}
winding rule or if the segments are retraced in the reverse
direction such that the two sets of segments cancel each
other out without any exterior area falling between them.
To determine whether segments represent true boundaries of
the interior of the path would require extensive calculations
involving all of the segments of the path and the winding
rule and are thus beyond the scope of this implementation.

@since 1.6
"
      end

      operation 6552194 "intersects"
	class_operation public explicit_return_type "boolean"
	nparams 5
	  param inout name "pi" type class_ref 380930 // PathIterator
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the interior of the specified {@link PathIterator}
intersects the interior of a specified set of rectangular
coordinates.
<p>
This method provides a basic facility for implementors of
the {@link Shape} interface to implement support for the
{@link Shape#intersects(double, double, double, double)} method.
<p>
This method object may conservatively return true in
cases where the specified rectangular area intersects a
segment of the path, but that segment does not represent a
boundary between the interior and exterior of the path.
Such a case may occur if some set of segments of the
path are retraced in the reverse direction such that the
two sets of segments cancel each other out without any
interior area between them.
To determine whether segments represent true boundaries of
the interior of the path would require extensive calculations
involving all of the segments of the path and the winding
rule and are thus beyond the scope of this implementation.

@param pi the specified {@code PathIterator}
@param x the specified X coordinate
@param y the specified Y coordinate
@param w the width of the specified rectangular coordinates
@param h the height of the specified rectangular coordinates
@return {@code true} if the specified {@code PathIterator} and
        the interior of the specified set of rectangular
        coordinates intersect each other; {@code false} otherwise.
@since 1.6
"
      end

      operation 6552322 "intersects"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "pi" type class_ref 380930 // PathIterator
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if the interior of the specified {@link PathIterator}
intersects the interior of a specified {@link Rectangle2D}.
<p>
This method provides a basic facility for implementors of
the {@link Shape} interface to implement support for the
{@link Shape#intersects(Rectangle2D)} method.
<p>
This method object may conservatively return true in
cases where the specified rectangular area intersects a
segment of the path, but that segment does not represent a
boundary between the interior and exterior of the path.
Such a case may occur if some set of segments of the
path are retraced in the reverse direction such that the
two sets of segments cancel each other out without any
interior area between them.
To determine whether segments represent true boundaries of
the interior of the path would require extensive calculations
involving all of the segments of the path and the winding
rule and are thus beyond the scope of this implementation.

@param pi the specified {@code PathIterator}
@param r the specified {@code Rectangle2D}
@return {@code true} if the specified {@code PathIterator} and
        the interior of the specified {@code Rectangle2D}
        intersect each other; {@code false} otherwise.
@since 1.6
"
      end

      operation 6552450 "intersects"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
<p>
This method object may conservatively return true in
cases where the specified rectangular area intersects a
segment of the path, but that segment does not represent a
boundary between the interior and exterior of the path.
Such a case may occur if some set of segments of the
path are retraced in the reverse direction such that the
two sets of segments cancel each other out without any
interior area between them.
To determine whether segments represent true boundaries of
the interior of the path would require extensive calculations
involving all of the segments of the path and the winding
rule and are thus beyond the scope of this implementation.

@since 1.6
"
      end

      operation 6552578 "intersects"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
<p>
This method object may conservatively return true in
cases where the specified rectangular area intersects a
segment of the path, but that segment does not represent a
boundary between the interior and exterior of the path.
Such a case may occur if some set of segments of the
path are retraced in the reverse direction such that the
two sets of segments cancel each other out without any
interior area between them.
To determine whether segments represent true boundaries of
the interior of the path would require extensive calculations
involving all of the segments of the path and the winding
rule and are thus beyond the scope of this implementation.

@since 1.6
"
      end

      operation 6552706 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 2
	  param inout name "at" type class_ref 381058 // AffineTransform
	  param in name "flatness" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
<p>
The iterator for this class is not multi-threaded safe,
which means that this {@code Path2D} class does not
guarantee that modifications to the geometry of this
{@code Path2D} object do not affect any iterations of
that geometry that are already in process.

@since 1.6
"
      end

      operation 6552834 "clone"
	abstract public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object of the same class as this object.

@return     a clone of this instance.
@exception  OutOfMemoryError            if there is not enough memory.
@see        java.lang.Cloneable
@since      1.6
"
      end

      attribute 1561602 "SERIAL_STORAGE_FLT_ARRAY"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Note: It would be nice to have this return Path2D
 but one of our subclasses (GeneralPath) needs to
 offer \"public Object clone()\" for backwards
 compatibility so we cannot restrict it further.
 REMIND: Can we do both somehow?

Support fields and methods for serializing the subclasses.

"
      end

      attribute 1561730 "SERIAL_STORAGE_DBL_ARRAY"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x31"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1561858 "SERIAL_SEG_FLT_MOVETO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x40"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1561986 "SERIAL_SEG_FLT_LINETO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x41"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1562114 "SERIAL_SEG_FLT_QUADTO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x42"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1562242 "SERIAL_SEG_FLT_CUBICTO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x43"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1562370 "SERIAL_SEG_DBL_MOVETO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x50"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1562498 "SERIAL_SEG_DBL_LINETO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x51"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1562626 "SERIAL_SEG_DBL_QUADTO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x52"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1562754 "SERIAL_SEG_DBL_CUBICTO"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x53"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1562882 "SERIAL_SEG_CLOSE"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x60"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1563010 "SERIAL_PATH_END"
	class_attribute const_attribute private explicit_type "byte"
	init_value " 0x61"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6552962 "writeObject"
	package explicit_return_type "void"
	nparams 2
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	  param inout name "isdbl" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6553090 "readObject"
	package explicit_return_type "void"
	nparams 2
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	  param inout name "storedbl" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 893442 "IllegalPathStateException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>IllegalPathStateException</code> represents an
exception that is thrown if an operation is performed on a path
that is in an illegal state with respect to the particular
operation being performed, such as appending a path segment
to a {@link GeneralPath} without an initial moveto.

"
      classrelation 3030786 // <generalisation>
	relation 3030786 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3030786 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      operation 6554370 "IllegalPathStateException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalPathStateException</code> with no
detail message.

@since   1.2
"
      end

      operation 6554498 "IllegalPathStateException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalPathStateException</code> with the
specified detail message.
@param   s   the detail message
@since   1.2
"
      end
    end

    class 893826 "LineIterator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A utility class to iterate over the path segments of a line segment
through the PathIterator interface.

@author      Jim Graham
"
      classrelation 3031682 // <realization>
	relation 3031682 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3031682 // <realization>
	  b parent class_ref 380930 // PathIterator
      end

      classrelation 3031810 // line (<unidirectional association>)
	relation 3031810 --->
	  a role_name "line" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3031810 // line (<unidirectional association>)
	  b parent class_ref 402946 // Line2D
      end

      classrelation 3031938 // affine (<unidirectional association>)
	relation 3031938 --->
	  a role_name "affine" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3031938 // affine (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      attribute 1564930 "index"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6562434 "LineIterator"
	package explicit_return_type ""
	nparams 2
	  param inout name "l" type class_ref 402946 // Line2D
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6562562 "getWindingRule"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the winding rule for determining the insideness of the
path.
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
"
      end

      operation 6562690 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if there are more points to read.
@return true if there are more points to read
"
      end

      operation 6562818 "next"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the iterator to the next segment of the path forwards
along the primary direction of traversal as long as there are
more points in that direction.
"
      end

      operation 6562946 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A float array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of float x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end

      operation 6563074 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A double array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of double x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end
    end

    class 893954 "QuadCurve2D"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>QuadCurve2D</code> class defines a quadratic parametric curve
segment in {@code (x,y)} coordinate space.
<p>
This class is only the abstract superclass for all objects that
store a 2D quadratic curve segment.
The actual storage representation of the coordinates is left to
the subclass.

@author      Jim Graham
@since 1.2
"
      classrelation 3032194 // <realization>
	relation 3032194 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3032194 // <realization>
	  b parent class_ref 379394 // Shape
      end

      classrelation 3032322 // <realization>
	relation 3032322 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3032322 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      class 894082 "Float"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3032450 // <generalisation>
	  relation 3032450 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3032450 // <generalisation>
	    b parent class_ref 893954 // QuadCurve2D
	end

	classrelation 3032578 // <realization>
	  relation 3032578 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3032578 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1565058 "x1"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the start point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	attribute 1565186 "y1"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the start point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	attribute 1565314 "ctrlx"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the control point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	attribute 1565442 "ctrly"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the control point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	attribute 1565570 "x2"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the end point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	attribute 1565698 "y2"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the end point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	operation 6563330 "Float"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>QuadCurve2D</code> with
coordinates (0, 0, 0, 0, 0, 0).
@since 1.2
"
	end

	operation 6563458 "Float"
	  public explicit_return_type ""
	  nparams 6
	    param in name "x1" explicit_type "float"
	    param in name "y1" explicit_type "float"
	    param in name "ctrlx" explicit_type "float"
	    param in name "ctrly" explicit_type "float"
	    param in name "x2" explicit_type "float"
	    param in name "y2" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>QuadCurve2D</code> from the
specified {@code float} coordinates.

@param x1 the X coordinate of the start point
@param y1 the Y coordinate of the start point
@param ctrlx the X coordinate of the control point
@param ctrly the Y coordinate of the control point
@param x2 the X coordinate of the end point
@param y2 the Y coordinate of the end point
@since 1.2
"
	end

	operation 6563586 "getX1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6563714 "getY1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6563842 "getP1"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6563970 "getCtrlX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6564098 "getCtrlY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6564226 "getCtrlPt"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6564354 "getX2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6564482 "getY2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6564610 "getP2"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6564738 "setCurve"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "ctrlx" explicit_type "double"
	    param in name "ctrly" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6564866 "setCurve"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "x1" explicit_type "float"
	    param in name "y1" explicit_type "float"
	    param in name "ctrlx" explicit_type "float"
	    param in name "ctrly" explicit_type "float"
	    param in name "x2" explicit_type "float"
	    param in name "y2" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the location of the end points and control point of this curve
to the specified {@code float} coordinates.

@param x1 the X coordinate of the start point
@param y1 the Y coordinate of the start point
@param ctrlx the X coordinate of the control point
@param ctrly the Y coordinate of the control point
@param x2 the X coordinate of the end point
@param y2 the Y coordinate of the end point
@since 1.2
"
	end

	operation 6564994 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1565826 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -8511188402130719609L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      class 894210 "Double"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3032706 // <generalisation>
	  relation 3032706 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3032706 // <generalisation>
	    b parent class_ref 893954 // QuadCurve2D
	end

	classrelation 3032834 // <realization>
	  relation 3032834 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3032834 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1565954 "x1"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the start point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	attribute 1566082 "y1"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the start point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	attribute 1566210 "ctrlx"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the control point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	attribute 1566338 "ctrly"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the control point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	attribute 1566466 "x2"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of the end point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	attribute 1566594 "y2"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of the end point of the quadratic curve
segment.
@since 1.2
@serial

"
	end

	operation 6565122 "Double"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>QuadCurve2D</code> with
coordinates (0, 0, 0, 0, 0, 0).
@since 1.2
"
	end

	operation 6565250 "Double"
	  public explicit_return_type ""
	  nparams 6
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "ctrlx" explicit_type "double"
	    param in name "ctrly" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>QuadCurve2D</code> from the
specified {@code double} coordinates.

@param x1 the X coordinate of the start point
@param y1 the Y coordinate of the start point
@param ctrlx the X coordinate of the control point
@param ctrly the Y coordinate of the control point
@param x2 the X coordinate of the end point
@param y2 the Y coordinate of the end point
@since 1.2
"
	end

	operation 6565378 "getX1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6565506 "getY1"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6565634 "getP1"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6565762 "getCtrlX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6565890 "getCtrlY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6566018 "getCtrlPt"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6566146 "getX2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6566274 "getY2"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6566402 "getP2"
	  public return_type class_ref 380802 // Point2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6566530 "setCurve"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "x1" explicit_type "double"
	    param in name "y1" explicit_type "double"
	    param in name "ctrlx" explicit_type "double"
	    param in name "ctrly" explicit_type "double"
	    param in name "x2" explicit_type "double"
	    param in name "y2" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6566658 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1566722 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 4217149928428559721L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      operation 6566786 "QuadCurve2D"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is an abstract class that cannot be instantiated directly.
Type-specific implementation subclasses are available for
instantiation and provide a number of formats for storing
the information necessary to satisfy the various accessor
methods below.

@see java.awt.geom.QuadCurve2D.Float
@see java.awt.geom.QuadCurve2D.Double
@since 1.2
"
      end

      operation 6566914 "getX1"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the start point in
<code>double</code> in precision.
@return the X coordinate of the start point.
@since 1.2
"
      end

      operation 6567042 "getY1"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the start point in
<code>double</code> precision.
@return the Y coordinate of the start point.
@since 1.2
"
      end

      operation 6567170 "getP1"
	abstract public return_type class_ref 380802 // Point2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the start point.
@return a <code>Point2D</code> that is the start point of this
         <code>QuadCurve2D</code>.
@since 1.2
"
      end

      operation 6567298 "getCtrlX"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the control point in
<code>double</code> precision.
@return X coordinate the control point
@since 1.2
"
      end

      operation 6567426 "getCtrlY"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the control point in
<code>double</code> precision.
@return the Y coordinate of the control point.
@since 1.2
"
      end

      operation 6567554 "getCtrlPt"
	abstract public return_type class_ref 380802 // Point2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the control point.
@return a <code>Point2D</code> that is the control point of this
         <code>Point2D</code>.
@since 1.2
"
      end

      operation 6567682 "getX2"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the end point in
<code>double</code> precision.
@return the x coordinate of the end point.
@since 1.2
"
      end

      operation 6567810 "getY2"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the end point in
<code>double</code> precision.
@return the Y coordinate of the end point.
@since 1.2
"
      end

      operation 6567938 "getP2"
	abstract public return_type class_ref 380802 // Point2D
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the end point.
@return a <code>Point</code> object that is the end point
         of this <code>Point2D</code>.
@since 1.2
"
      end

      operation 6568066 "setCurve"
	abstract public explicit_return_type "void"
	nparams 6
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "ctrlx" explicit_type "double"
	  param in name "ctrly" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points and control point of this curve
to the specified <code>double</code> coordinates.

@param x1 the X coordinate of the start point
@param y1 the Y coordinate of the start point
@param ctrlx the X coordinate of the control point
@param ctrly the Y coordinate of the control point
@param x2 the X coordinate of the end point
@param y2 the Y coordinate of the end point
@since 1.2
"
      end

      operation 6568194 "setCurve"
	public explicit_return_type "void"
	nparams 2
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points and control points of this
<code>QuadCurve2D</code> to the <code>double</code> coordinates at
the specified offset in the specified array.
@param coords the array containing coordinate values
@param offset the index into the array from which to start
         getting the coordinate values and assigning them to this
         <code>QuadCurve2D</code>
@since 1.2
"
      end

      operation 6568322 "setCurve"
	public explicit_return_type "void"
	nparams 3
	  param inout name "p1" type class_ref 380802 // Point2D
	  param inout name "cp" type class_ref 380802 // Point2D
	  param inout name "p2" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points and control point of this
<code>QuadCurve2D</code> to the specified <code>Point2D</code>
coordinates.
@param p1 the start point
@param cp the control point
@param p2 the end point
@since 1.2
"
      end

      operation 6568450 "setCurve"
	public explicit_return_type "void"
	nparams 2
	  param inout name "pts" type class_ref 380802 // Point2D
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points and control points of this
<code>QuadCurve2D</code> to the coordinates of the
<code>Point2D</code> objects at the specified offset in
the specified array.
@param pts an array containing <code>Point2D</code> that define
         coordinate values
@param offset the index into <code>pts</code> from which to start
         getting the coordinate values and assigning them to this
         <code>QuadCurve2D</code>
@since 1.2
"
      end

      operation 6568578 "setCurve"
	public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 893954 // QuadCurve2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location of the end points and control point of this
<code>QuadCurve2D</code> to the same as those in the specified
<code>QuadCurve2D</code>.
@param c the specified <code>QuadCurve2D</code>
@since 1.2
"
      end

      operation 6568706 "getFlatnessSq"
	class_operation public explicit_return_type "double"
	nparams 6
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "ctrlx" explicit_type "double"
	  param in name "ctrly" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the flatness, or maximum distance of a
control point from the line connecting the end points, of the
quadratic curve specified by the indicated control points.

@param x1 the X coordinate of the start point
@param y1 the Y coordinate of the start point
@param ctrlx the X coordinate of the control point
@param ctrly the Y coordinate of the control point
@param x2 the X coordinate of the end point
@param y2 the Y coordinate of the end point
@return the square of the flatness of the quadratic curve
         defined by the specified coordinates.
@since 1.2
"
      end

      operation 6568834 "getFlatness"
	class_operation public explicit_return_type "double"
	nparams 6
	  param in name "x1" explicit_type "double"
	  param in name "y1" explicit_type "double"
	  param in name "ctrlx" explicit_type "double"
	  param in name "ctrly" explicit_type "double"
	  param in name "x2" explicit_type "double"
	  param in name "y2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the flatness, or maximum distance of a
control point from the line connecting the end points, of the
quadratic curve specified by the indicated control points.

@param x1 the X coordinate of the start point
@param y1 the Y coordinate of the start point
@param ctrlx the X coordinate of the control point
@param ctrly the Y coordinate of the control point
@param x2 the X coordinate of the end point
@param y2 the Y coordinate of the end point
@return the flatness of the quadratic curve defined by the
         specified coordinates.
@since 1.2
"
      end

      operation 6568962 "getFlatnessSq"
	class_operation public explicit_return_type "double"
	nparams 2
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the flatness, or maximum distance of a
control point from the line connecting the end points, of the
quadratic curve specified by the control points stored in the
indicated array at the indicated index.
@param coords an array containing coordinate values
@param offset the index into <code>coords</code> from which to
         to start getting the values from the array
@return the flatness of the quadratic curve that is defined by the
         values in the specified array at the specified index.
@since 1.2
"
      end

      operation 6569090 "getFlatness"
	class_operation public explicit_return_type "double"
	nparams 2
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the flatness, or maximum distance of a
control point from the line connecting the end points, of the
quadratic curve specified by the control points stored in the
indicated array at the indicated index.
@param coords an array containing coordinate values
@param offset the index into <code>coords</code> from which to
         start getting the coordinate values
@return the flatness of a quadratic curve defined by the
         specified array at the specified offset.
@since 1.2
"
      end

      operation 6569218 "getFlatnessSq"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the square of the flatness, or maximum distance of a
control point from the line connecting the end points, of this
<code>QuadCurve2D</code>.
@return the square of the flatness of this
         <code>QuadCurve2D</code>.
@since 1.2
"
      end

      operation 6569346 "getFlatness"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the flatness, or maximum distance of a
control point from the line connecting the end points, of this
<code>QuadCurve2D</code>.
@return the flatness of this <code>QuadCurve2D</code>.
@since 1.2
"
      end

      operation 6569474 "subdivide"
	public explicit_return_type "void"
	nparams 2
	  param inout name "left" type class_ref 893954 // QuadCurve2D
	  param inout name "right" type class_ref 893954 // QuadCurve2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subdivides this <code>QuadCurve2D</code> and stores the resulting
two subdivided curves into the <code>left</code> and
<code>right</code> curve parameters.
Either or both of the <code>left</code> and <code>right</code>
objects can be the same as this <code>QuadCurve2D</code> or
<code>null</code>.
@param left the <code>QuadCurve2D</code> object for storing the
left or first half of the subdivided curve
@param right the <code>QuadCurve2D</code> object for storing the
right or second half of the subdivided curve
@since 1.2
"
      end

      operation 6569602 "subdivide"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "src" type class_ref 893954 // QuadCurve2D
	  param inout name "left" type class_ref 893954 // QuadCurve2D
	  param inout name "right" type class_ref 893954 // QuadCurve2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subdivides the quadratic curve specified by the <code>src</code>
parameter and stores the resulting two subdivided curves into the
<code>left</code> and <code>right</code> curve parameters.
Either or both of the <code>left</code> and <code>right</code>
objects can be the same as the <code>src</code> object or
<code>null</code>.
@param src the quadratic curve to be subdivided
@param left the <code>QuadCurve2D</code> object for storing the
         left or first half of the subdivided curve
@param right the <code>QuadCurve2D</code> object for storing the
         right or second half of the subdivided curve
@since 1.2
"
      end

      operation 6569730 "subdivide"
	class_operation public explicit_return_type "void"
	nparams 6
	  param inout name "src" explicit_type "double"
	multiplicity "[]"
	  param in name "srcoff" explicit_type "int"
	  param inout name "left" explicit_type "double"
	multiplicity "[]"
	  param in name "leftoff" explicit_type "int"
	  param inout name "right" explicit_type "double"
	multiplicity "[]"
	  param in name "rightoff" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subdivides the quadratic curve specified by the coordinates
stored in the <code>src</code> array at indices
<code>srcoff</code> through <code>srcoff</code>&nbsp;+&nbsp;5
and stores the resulting two subdivided curves into the two
result arrays at the corresponding indices.
Either or both of the <code>left</code> and <code>right</code>
arrays can be <code>null</code> or a reference to the same array
and offset as the <code>src</code> array.
Note that the last point in the first subdivided curve is the
same as the first point in the second subdivided curve.  Thus,
it is possible to pass the same array for <code>left</code> and
<code>right</code> and to use offsets such that
<code>rightoff</code> equals <code>leftoff</code> + 4 in order
to avoid allocating extra storage for this common point.
@param src the array holding the coordinates for the source curve
@param srcoff the offset into the array of the beginning of the
the 6 source coordinates
@param left the array for storing the coordinates for the first
half of the subdivided curve
@param leftoff the offset into the array of the beginning of the
the 6 left coordinates
@param right the array for storing the coordinates for the second
half of the subdivided curve
@param rightoff the offset into the array of the beginning of the
the 6 right coordinates
@since 1.2
"
      end

      operation 6569858 "solveQuadratic"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "eqn" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Solves the quadratic whose coefficients are in the <code>eqn</code>
array and places the non-complex roots back into the same array,
returning the number of roots.  The quadratic solved is represented
by the equation:
<pre>
    eqn = {C, B, A};
    ax^2 + bx + c = 0
</pre>
A return value of <code>-1</code> is used to distinguish a constant
equation, which might be always 0 or never 0, from an equation that
has no zeroes.
@param eqn the array that contains the quadratic coefficients
@return the number of roots, or <code>-1</code> if the equation is
         a constant
@since 1.2
"
      end

      operation 6569986 "solveQuadratic"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "eqn" explicit_type "double"
	multiplicity "[]"
	  param inout name "res" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Solves the quadratic whose coefficients are in the <code>eqn</code>
array and places the non-complex roots into the <code>res</code>
array, returning the number of roots.
The quadratic solved is represented by the equation:
<pre>
    eqn = {C, B, A};
    ax^2 + bx + c = 0
</pre>
A return value of <code>-1</code> is used to distinguish a constant
equation, which might be always 0 or never 0, from an equation that
has no zeroes.
@param eqn the specified array of coefficients to use to solve
       the quadratic equation
@param res the array that contains the non-complex roots
       resulting from the solution of the quadratic equation
@return the number of roots, or <code>-1</code> if the equation is
 a constant.
@since 1.3
"
      end

      operation 6570114 "contains"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6570242 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 380802 // Point2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6570370 "fillEqn"
	class_operation private explicit_return_type "void"
	nparams 5
	  param inout name "eqn" explicit_type "double"
	multiplicity "[]"
	  param in name "val" explicit_type "double"
	  param in name "c1" explicit_type "double"
	  param in name "cp" explicit_type "double"
	  param in name "c2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fill an array with the coefficients of the parametric equation
in t, ready for solving against val with solveQuadratic.
We currently have:
    val = Py(t) = C1*(1-t)^2 + 2*CP*t*(1-t) + C2*t^2
                = C1 - 2*C1*t + C1*t^2 + 2*CP*t - 2*CP*t^2 + C2*t^2
                = C1 + (2*CP - 2*C1)*t + (C1 - 2*CP + C2)*t^2
              0 = (C1 - val) + (2*CP - 2*C1)*t + (C1 - 2*CP + C2)*t^2
              0 = C + Bt + At^2
    C = C1 - val
    B = 2*CP - 2*C1
    A = C1 - 2*CP + C2
"
      end

      operation 6570498 "evalQuadratic"
	class_operation private explicit_return_type "int"
	nparams 8
	  param inout name "vals" explicit_type "double"
	multiplicity "[]"
	  param in name "num" explicit_type "int"
	  param inout name "include0" explicit_type "boolean"
	  param inout name "include1" explicit_type "boolean"
	  param inout name "inflect" explicit_type "double"
	multiplicity "[]"
	  param in name "c1" explicit_type "double"
	  param in name "ctrl" explicit_type "double"
	  param in name "c2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Evaluate the t values in the first num slots of the vals[] array
and place the evaluated values back into the same array.  Only
evaluate t values that are within the range &lt;0, 1&gt;, including
the 0 and 1 ends of the range iff the include0 or include1
booleans are true.  If an \"inflection\" equation is handed in,
then any points which represent a point of inflection for that
quadratic equation are also ignored.
"
      end

      attribute 1566850 "BELOW"
	class_attribute const_attribute private explicit_type "int"
	init_value " -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1566978 "LOWEDGE"
	class_attribute const_attribute private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1567106 "INSIDE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1567234 "HIGHEDGE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1567362 "ABOVE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6570626 "getTag"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "coord" explicit_type "double"
	  param in name "low" explicit_type "double"
	  param in name "high" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine where coord lies with respect to the range from
low to high.  It is assumed that low &lt;= high.  The return
value is one of the 5 values BELOW, LOWEDGE, INSIDE, HIGHEDGE,
or ABOVE.
"
      end

      operation 6570754 "inwards"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param in name "pttag" explicit_type "int"
	  param in name "opt1tag" explicit_type "int"
	  param in name "opt2tag" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the pttag represents a coordinate that is already
in its test range, or is on the border with either of the two
opttags representing another coordinate that is \"towards the
inside\" of that test range.  In other words, are either of the
two \"opt\" points \"drawing the pt inward\"?
"
      end

      operation 6570882 "intersects"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6571010 "intersects"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6571138 "contains"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6571266 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 380674 // Rectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6571394 "getBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6571522 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration object that defines the boundary of the
shape of this <code>QuadCurve2D</code>.
The iterator for this class is not multi-threaded safe,
which means that this <code>QuadCurve2D</code> class does not
guarantee that modifications to the geometry of this
<code>QuadCurve2D</code> object do not affect any iterations of
that geometry that are already in process.
@param at an optional {@link AffineTransform} to apply to the
         shape boundary
@return a {@link PathIterator} object that defines the boundary
         of the shape.
@since 1.2
"
      end

      operation 6571650 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 2
	  param inout name "at" type class_ref 381058 // AffineTransform
	  param in name "flatness" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration object that defines the boundary of the
flattened shape of this <code>QuadCurve2D</code>.
The iterator for this class is not multi-threaded safe,
which means that this <code>QuadCurve2D</code> class does not
guarantee that modifications to the geometry of this
<code>QuadCurve2D</code> object do not affect any iterations of
that geometry that are already in process.
@param at an optional <code>AffineTransform</code> to apply
         to the boundary of the shape
@param flatness the maximum distance that the control points for a
         subdivided curve can be with respect to a line connecting
         the end points of this curve before this curve is
         replaced by a straight line connecting the end points.
@return a <code>PathIterator</code> object that defines the
         flattened boundary of the shape.
@since 1.2
"
      end

      operation 6571778 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object of the same class and with the same contents
as this object.

@return     a clone of this instance.
@exception  OutOfMemoryError            if there is not enough memory.
@see        java.lang.Cloneable
@since      1.2
"
      end
    end

    class 894338 "QuadIterator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A utility class to iterate over the path segments of a quadratic curve
segment through the PathIterator interface.

@author      Jim Graham
"
      classrelation 3032962 // <realization>
	relation 3032962 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3032962 // <realization>
	  b parent class_ref 380930 // PathIterator
      end

      classrelation 3033090 // quad (<unidirectional association>)
	relation 3033090 --->
	  a role_name "quad" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3033090 // quad (<unidirectional association>)
	  b parent class_ref 893954 // QuadCurve2D
      end

      classrelation 3033218 // affine (<unidirectional association>)
	relation 3033218 --->
	  a role_name "affine" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3033218 // affine (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      attribute 1567490 "index"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6571906 "QuadIterator"
	package explicit_return_type ""
	nparams 2
	  param inout name "q" type class_ref 893954 // QuadCurve2D
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6572034 "getWindingRule"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the winding rule for determining the insideness of the
path.
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
"
      end

      operation 6572162 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if there are more points to read.
@return true if there are more points to read
"
      end

      operation 6572290 "next"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the iterator to the next segment of the path forwards
along the primary direction of traversal as long as there are
more points in that direction.
"
      end

      operation 6572418 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A float array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of float x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end

      operation 6572546 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A double array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of double x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end
    end

    class 894466 "RectIterator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A utility class to iterate over the path segments of a rectangle
through the PathIterator interface.

@author      Jim Graham
"
      classrelation 3033346 // <realization>
	relation 3033346 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3033346 // <realization>
	  b parent class_ref 380930 // PathIterator
      end

      attribute 1567618 "x"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1567746 "y"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1567874 "w"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1568002 "h"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3033474 // affine (<unidirectional association>)
	relation 3033474 --->
	  a role_name "affine" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3033474 // affine (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      attribute 1568130 "index"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6572674 "RectIterator"
	package explicit_return_type ""
	nparams 2
	  param inout name "r" type class_ref 380674 // Rectangle2D
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6572802 "getWindingRule"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the winding rule for determining the insideness of the
path.
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
"
      end

      operation 6572930 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if there are more points to read.
@return true if there are more points to read
"
      end

      operation 6573058 "next"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the iterator to the next segment of the path forwards
along the primary direction of traversal as long as there are
more points in that direction.
"
      end

      operation 6573186 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A float array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of float x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end

      operation 6573314 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A double array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of double x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end
    end

    class 894594 "RoundRectangle2D"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>RoundRectangle2D</code> class defines a rectangle with
rounded corners defined by a location {@code (x,y)}, a
dimension {@code (w x h)}, and the width and height of an arc
with which to round the corners.
<p>
This class is the abstract superclass for all objects that
store a 2D rounded rectangle.
The actual storage representation of the coordinates is left to
the subclass.

@author      Jim Graham
@since 1.2
"
      classrelation 3033602 // <generalisation>
	relation 3033602 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3033602 // <generalisation>
	  b parent class_ref 380546 // RectangularShape
      end

      class 894722 "Float"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3033730 // <generalisation>
	  relation 3033730 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3033730 // <generalisation>
	    b parent class_ref 894594 // RoundRectangle2D
	end

	classrelation 3033858 // <realization>
	  relation 3033858 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3033858 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1568258 "x"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of this <code>RoundRectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 1568386 "y"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of this <code>RoundRectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 1568514 "width"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The width of this <code>RoundRectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 1568642 "height"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The height of this <code>RoundRectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 1568770 "arcwidth"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The width of the arc that rounds off the corners.
@since 1.2
@serial

"
	end

	attribute 1568898 "archeight"
	  public explicit_type "float"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The height of the arc that rounds off the corners.
@since 1.2
@serial

"
	end

	operation 6573442 "Float"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new <code>RoundRectangle2D</code>, initialized to
location (0.0,&nbsp;0.0), size (0.0,&nbsp;0.0), and corner arcs
of radius 0.0.
@since 1.2
"
	end

	operation 6573570 "Float"
	  public explicit_return_type ""
	  nparams 6
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	    param in name "w" explicit_type "float"
	    param in name "h" explicit_type "float"
	    param in name "arcw" explicit_type "float"
	    param in name "arch" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>RoundRectangle2D</code>
from the specified <code>float</code> coordinates.

@param x the X coordinate of the newly
         constructed <code>RoundRectangle2D</code>
@param y the Y coordinate of the newly
         constructed <code>RoundRectangle2D</code>
@param w the width to which to set the newly
         constructed <code>RoundRectangle2D</code>
@param h the height to which to set the newly
         constructed <code>RoundRectangle2D</code>
@param arcw the width of the arc to use to round off the
            corners of the newly constructed
            <code>RoundRectangle2D</code>
@param arch the height of the arc to use to round off the
            corners of the newly constructed
            <code>RoundRectangle2D</code>
@since 1.2
"
	end

	operation 6573698 "getX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6573826 "getY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6573954 "getWidth"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6574082 "getHeight"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6574210 "getArcWidth"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6574338 "getArcHeight"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6574466 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6574594 "setRoundRect"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "x" explicit_type "float"
	    param in name "y" explicit_type "float"
	    param in name "w" explicit_type "float"
	    param in name "h" explicit_type "float"
	    param in name "arcw" explicit_type "float"
	    param in name "arch" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the location, size, and corner radii of this
<code>RoundRectangle2D</code> to the specified
<code>float</code> values.

@param x the X coordinate to which to set the
         location of this <code>RoundRectangle2D</code>
@param y the Y coordinate to which to set the
         location of this <code>RoundRectangle2D</code>
@param w the width to which to set this
         <code>RoundRectangle2D</code>
@param h the height to which to set this
         <code>RoundRectangle2D</code>
@param arcw the width to which to set the arc of this
            <code>RoundRectangle2D</code>
@param arch the height to which to set the arc of this
            <code>RoundRectangle2D</code>
@since 1.2
"
	end

	operation 6574722 "setRoundRect"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	    param in name "arcw" explicit_type "double"
	    param in name "arch" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6574850 "setRoundRect"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "rr" type class_ref 894594 // RoundRectangle2D
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6574978 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1569026 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -3423150618393866922L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      class 894850 "Double"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3033986 // <generalisation>
	  relation 3033986 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3033986 // <generalisation>
	    b parent class_ref 894594 // RoundRectangle2D
	end

	classrelation 3034114 // <realization>
	  relation 3034114 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3034114 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1569154 "x"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The X coordinate of this <code>RoundRectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 1569282 "y"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The Y coordinate of this <code>RoundRectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 1569410 "width"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The width of this <code>RoundRectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 1569538 "height"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The height of this <code>RoundRectangle2D</code>.
@since 1.2
@serial

"
	end

	attribute 1569666 "arcwidth"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The width of the arc that rounds off the corners.
@since 1.2
@serial

"
	end

	attribute 1569794 "archeight"
	  public explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The height of the arc that rounds off the corners.
@since 1.2
@serial

"
	end

	operation 6575106 "Double"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new <code>RoundRectangle2D</code>, initialized to
location (0.0,&nbsp;0.0), size (0.0,&nbsp;0.0), and corner arcs
of radius 0.0.
@since 1.2
"
	end

	operation 6575234 "Double"
	  public explicit_return_type ""
	  nparams 6
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	    param in name "arcw" explicit_type "double"
	    param in name "arch" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs and initializes a <code>RoundRectangle2D</code>
from the specified <code>double</code> coordinates.

@param x the X coordinate of the newly
         constructed <code>RoundRectangle2D</code>
@param y the Y coordinate of the newly
         constructed <code>RoundRectangle2D</code>
@param w the width to which to set the newly
         constructed <code>RoundRectangle2D</code>
@param h the height to which to set the newly
         constructed <code>RoundRectangle2D</code>
@param arcw the width of the arc to use to round off the
            corners of the newly constructed
            <code>RoundRectangle2D</code>
@param arch the height of the arc to use to round off the
            corners of the newly constructed
            <code>RoundRectangle2D</code>
@since 1.2
"
	end

	operation 6575362 "getX"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6575490 "getY"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6575618 "getWidth"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6575746 "getHeight"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6575874 "getArcWidth"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6576002 "getArcHeight"
	  public explicit_return_type "double"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6576130 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6576258 "setRoundRect"
	  public explicit_return_type "void"
	  nparams 6
	    param in name "x" explicit_type "double"
	    param in name "y" explicit_type "double"
	    param in name "w" explicit_type "double"
	    param in name "h" explicit_type "double"
	    param in name "arcw" explicit_type "double"
	    param in name "arch" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6576386 "setRoundRect"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "rr" type class_ref 894594 // RoundRectangle2D
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	operation 6576514 "getBounds2D"
	  public return_type class_ref 380674 // Rectangle2D
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@inheritDoc}
@since 1.2
"
	end

	attribute 1569922 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 1048939333485206117L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "JDK 1.6 serialVersionUID

"
	end
      end

      operation 6576642 "RoundRectangle2D"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is an abstract class that cannot be instantiated directly.
Type-specific implementation subclasses are available for
instantiation and provide a number of formats for storing
the information necessary to satisfy the various accessor
methods below.

@see java.awt.geom.RoundRectangle2D.Float
@see java.awt.geom.RoundRectangle2D.Double
@since 1.2
"
      end

      operation 6576770 "getArcWidth"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the width of the arc that rounds off the corners.
@return the width of the arc that rounds off the corners
of this <code>RoundRectangle2D</code>.
@since 1.2
"
      end

      operation 6576898 "getArcHeight"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the height of the arc that rounds off the corners.
@return the height of the arc that rounds off the corners
of this <code>RoundRectangle2D</code>.
@since 1.2
"
      end

      operation 6577026 "setRoundRect"
	abstract public explicit_return_type "void"
	nparams 6
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	  param in name "arcWidth" explicit_type "double"
	  param in name "arcHeight" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the location, size, and corner radii of this
<code>RoundRectangle2D</code> to the specified
<code>double</code> values.

@param x the X coordinate to which to set the
         location of this <code>RoundRectangle2D</code>
@param y the Y coordinate to which to set the
         location of this <code>RoundRectangle2D</code>
@param w the width to which to set this
         <code>RoundRectangle2D</code>
@param h the height to which to set this
         <code>RoundRectangle2D</code>
@param arcWidth the width to which to set the arc of this
                <code>RoundRectangle2D</code>
@param arcHeight the height to which to set the arc of this
                 <code>RoundRectangle2D</code>
@since 1.2
"
      end

      operation 6577154 "setRoundRect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rr" type class_ref 894594 // RoundRectangle2D
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>RoundRectangle2D</code> to be the same as the
specified <code>RoundRectangle2D</code>.
@param rr the specified <code>RoundRectangle2D</code>
@since 1.2
"
      end

      operation 6577282 "setFrame"
	public explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6577410 "contains"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6577538 "classify"
	private explicit_return_type "int"
	nparams 4
	  param in name "coord" explicit_type "double"
	  param in name "left" explicit_type "double"
	  param in name "right" explicit_type "double"
	  param in name "arcsize" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6577666 "intersects"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6577794 "contains"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	  param in name "w" explicit_type "double"
	  param in name "h" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.2
"
      end

      operation 6577922 "getPathIterator"
	public return_type class_ref 380930 // PathIterator
	nparams 1
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration object that defines the boundary of this
<code>RoundRectangle2D</code>.
The iterator for this class is multi-threaded safe, which means
that this <code>RoundRectangle2D</code> class guarantees that
modifications to the geometry of this <code>RoundRectangle2D</code>
object do not affect any iterations of that geometry that
are already in process.
@param at an optional <code>AffineTransform</code> to be applied to
the coordinates as they are returned in the iteration, or
<code>null</code> if untransformed coordinates are desired
@return    the <code>PathIterator</code> object that returns the
         geometry of the outline of this
         <code>RoundRectangle2D</code>, one segment at a time.
@since 1.2
"
      end

      operation 6578050 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hashcode for this <code>RoundRectangle2D</code>.
@return the hashcode for this <code>RoundRectangle2D</code>.
@since 1.6
"
      end

      operation 6578178 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the specified <code>Object</code> is
equal to this <code>RoundRectangle2D</code>.  The specified
<code>Object</code> is equal to this <code>RoundRectangle2D</code>
if it is an instance of <code>RoundRectangle2D</code> and if its
location, size, and corner arc dimensions are the same as this
<code>RoundRectangle2D</code>.
@param obj  an <code>Object</code> to be compared with this
            <code>RoundRectangle2D</code>.
@return  <code>true</code> if <code>obj</code> is an instance
         of <code>RoundRectangle2D</code> and has the same values;
         <code>false</code> otherwise.
@since 1.6
"
      end
    end

    class 894978 "RoundRectIterator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A utility class to iterate over the path segments of an rounded rectangle
through the PathIterator interface.

@author      Jim Graham
"
      classrelation 3034242 // <realization>
	relation 3034242 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3034242 // <realization>
	  b parent class_ref 380930 // PathIterator
      end

      attribute 1570050 "x"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1570178 "y"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1570306 "w"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1570434 "h"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1570562 "aw"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1570690 "ah"
	package explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3034370 // affine (<unidirectional association>)
	relation 3034370 --->
	  a role_name "affine" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3034370 // affine (<unidirectional association>)
	  b parent class_ref 381058 // AffineTransform
      end

      attribute 1570818 "index"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6578306 "RoundRectIterator"
	package explicit_return_type ""
	nparams 2
	  param inout name "rr" type class_ref 894594 // RoundRectangle2D
	  param inout name "at" type class_ref 381058 // AffineTransform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6578434 "getWindingRule"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the winding rule for determining the insideness of the
path.
@see #WIND_EVEN_ODD
@see #WIND_NON_ZERO
"
      end

      operation 6578562 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if there are more points to read.
@return true if there are more points to read
"
      end

      operation 6578690 "next"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the iterator to the next segment of the path forwards
along the primary direction of traversal as long as there are
more points in that direction.
"
      end

      attribute 1570946 "angle"
	class_attribute const_attribute private explicit_type "double"
	init_value " Math.PI / 4.0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1571074 "a"
	class_attribute const_attribute private explicit_type "double"
	init_value " 1.0 - Math.cos(angle)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1571202 "b"
	class_attribute const_attribute private explicit_type "double"
	init_value " Math.tan(angle)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1571330 "c"
	class_attribute const_attribute private explicit_type "double"
	init_value " Math.sqrt(1.0 + b * b) - 1 + a"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1571458 "cv"
	class_attribute const_attribute private explicit_type "double"
	init_value " 4.0 / 3.0 * a * b / c"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1571586 "acv"
	class_attribute const_attribute private explicit_type "double"
	init_value " (1.0 - cv) / 2.0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1571714 "ctrlpts"
	class_attribute private explicit_type "double"
	multiplicity "[][]"
	init_value " {
        {  0.0,  0.0,  0.0,  0.5 },
        {  0.0,  0.0,  1.0, -0.5 },
        {  0.0,  0.0,  1.0, -acv,
           0.0,  acv,  1.0,  0.0,
           0.0,  0.5,  1.0,  0.0 },
        {  1.0, -0.5,  1.0,  0.0 },
        {  1.0, -acv,  1.0,  0.0,
           1.0,  0.0,  1.0, -acv,
           1.0,  0.0,  1.0, -0.5 },
        {  1.0,  0.0,  0.0,  0.5 },
        {  1.0,  0.0,  0.0,  acv,
           1.0, -acv,  0.0,  0.0,
           1.0, -0.5,  0.0,  0.0 },
        {  0.0,  0.5,  0.0,  0.0 },
        {  0.0,  acv,  0.0,  0.0,
           0.0,  0.0,  0.0,  acv,
           0.0,  0.0,  0.0,  0.5 },
        {},
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " For each array:
     4 values for each point {v0, v1, v2, v3}:
         point = (x + v0 * w + v1 * arcWidth,
                  y + v2 * h + v3 * arcHeight);
"
      end

      attribute 1571842 "types"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        SEG_MOVETO,
        SEG_LINETO, SEG_CUBICTO,
        SEG_LINETO, SEG_CUBICTO,
        SEG_LINETO, SEG_CUBICTO,
        SEG_LINETO, SEG_CUBICTO,
        SEG_CLOSE,
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 6578818 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "float"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A float array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of float x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end

      operation 6578946 "currentSegment"
	public explicit_return_type "int"
	nparams 1
	  param inout name "coords" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the coordinates and type of the current path segment in
the iteration.
The return value is the path segment type:
SEG_MOVETO, SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE.
A double array of length 6 must be passed in and may be used to
store the coordinates of the point(s).
Each point is stored as a pair of double x,y coordinates.
SEG_MOVETO and SEG_LINETO types will return one point,
SEG_QUADTO will return two points,
SEG_CUBICTO will return 3 points
and SEG_CLOSE will not return any points.
@see #SEG_MOVETO
@see #SEG_LINETO
@see #SEG_QUADTO
@see #SEG_CUBICTO
@see #SEG_CLOSE
"
      end
    end
  end

  deploymentview 143490 "geom"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 281090 "RectangularShape"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Shape;
import java.awt.Rectangle;
import java.beans.Transient;
${definition}"
      associated_elems
	class_ref 380546 // RectangularShape
      end
      comment "Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 281218 "PathIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Native;
${definition}"
      associated_elems
	class_ref 380930 // PathIterator
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 289282 "Rectangle2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 380674 // Rectangle2D
      end
      comment "Copyright (c) 1997, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 621570 "Dimension2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 381186 // Dimension2D
      end
      comment "Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 627586 "Point2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 380802 // Point2D
      end
      comment "Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 642050 "AffineTransform"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Shape;
import java.beans.ConstructorProperties;
${definition}"
      associated_elems
	class_ref 381058 // AffineTransform
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 642178 "Arc2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 890498 // Arc2D
      end
      comment "Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 642306 "ArcIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 890882 // ArcIterator
      end
      comment "Copyright (c) 1997, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 642434 "Area"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Shape;
import java.awt.Rectangle;
import java.util.Vector;
import java.util.Enumeration;
import java.util.NoSuchElementException;
import sun.awt.geom.Curve;
import sun.awt.geom.Crossings;
import sun.awt.geom.AreaOp;
${definition}"
      associated_elems
	class_ref 891010 // Area
	class_ref 891138 // AreaIterator
      end
      comment "Copyright (c) 1998, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 642562 "CubicCurve2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Shape;
import java.awt.Rectangle;
import java.util.Arrays;
import java.io.Serializable;
import sun.awt.geom.Curve;
import static java.lang.Math.abs;
import static java.lang.Math.max;
import static java.lang.Math.ulp;
${definition}"
      associated_elems
	class_ref 891266 // CubicCurve2D
      end
      comment "Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 642690 "CubicIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 891650 // CubicIterator
      end
      comment "Copyright (c) 1997, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 642818 "Ellipse2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 891778 // Ellipse2D
      end
      comment "Copyright (c) 1997, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 642946 "EllipseIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 892162 // EllipseIterator
      end
      comment "Copyright (c) 1997, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 643074 "FlatteningPathIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 892290 // FlatteningPathIterator
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 643202 "Path2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Shape;
import java.awt.Rectangle;
import sun.awt.geom.Curve;
import java.io.Serializable;
import java.io.StreamCorruptedException;
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 892418 // Path2D
      end
      comment "Copyright (c) 2006, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 643330 "GeneralPath"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Shape;
${definition}"
      associated_elems
	class_ref 889858 // GeneralPath
      end
      comment "Copyright (c) 1996, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 643458 "IllegalPathStateException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 893442 // IllegalPathStateException
      end
      comment "Copyright (c) 1997, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 643586 "Line2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Shape;
import java.awt.Rectangle;
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 402946 // Line2D
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 643714 "LineIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 893826 // LineIterator
      end
      comment "Copyright (c) 1997, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 643842 "NoninvertibleTransformException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 890370 // NoninvertibleTransformException
      end
      comment "Copyright (c) 1997, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 643970 "QuadCurve2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Shape;
import java.awt.Rectangle;
import java.io.Serializable;
import sun.awt.geom.Curve;
${definition}"
      associated_elems
	class_ref 893954 // QuadCurve2D
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 644098 "QuadIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 894338 // QuadIterator
      end
      comment "Copyright (c) 1997, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 644226 "RectIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 894466 // RectIterator
      end
      comment "Copyright (c) 1997, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 644354 "RoundRectangle2D"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 894594 // RoundRectangle2D
      end
      comment "Copyright (c) 1997, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 644482 "RoundRectIterator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 894978 // RoundRectIterator
      end
      comment "Copyright (c) 1997, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
