class RangeLongSpliterator
!!!9589250.java!!!	RangeLongSpliterator(in from : long, in upTo : long, inout closed : boolean)
            this(from, upTo, closed ? 1 : 0);
!!!9589378.java!!!	RangeLongSpliterator(in from : long, in upTo : long, in last : int)
            assert upTo - from + last > 0;
            this.from = from;
            this.upTo = upTo;
            this.last = last;
!!!9589506.java!!!	tryAdvance(inout consumer : LongConsumer) : boolean
            Objects.requireNonNull(consumer);

            final long i = from;
            if (i < upTo) {
                from++;
                consumer.accept(i);
                return true;
            }
            else if (last > 0) {
                last = 0;
                consumer.accept(i);
                return true;
            }
            return false;
!!!9589634.java!!!	forEachRemaining(inout consumer : LongConsumer) : void
            Objects.requireNonNull(consumer);

            long i = from;
            final long hUpTo = upTo;
            int hLast = last;
            from = upTo;
            last = 0;
            while (i < hUpTo) {
                consumer.accept(i++);
            }
            if (hLast > 0) {
                // Last element of closed range
                consumer.accept(i);
            }
!!!9589762.java!!!	estimateSize() : long
            return upTo - from + last;
!!!9589890.java!!!	characteristics() : int
            return Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED |
                   Spliterator.IMMUTABLE | Spliterator.NONNULL |
                   Spliterator.DISTINCT | Spliterator.SORTED;
!!!9590018.java!!!	getComparator() : Comparator
            return null;
!!!9590146.java!!!	trySplit() : Spliterator::OfLong
            long size = estimateSize();
            return size <= 1
                   ? null
                   // Left split always has a half-open range
                   : new RangeLongSpliterator(from, from = from + splitPoint(size), 0);
!!!9590274.java!!!	splitPoint(in size : long) : long
            long d = (size < BALANCED_SPLIT_THRESHOLD) ? 2 : RIGHT_BALANCED_SPLIT_RATIO;
            // 2 <= size <= Long.MAX_VALUE
            return size / d;
