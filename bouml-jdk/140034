format 222
"logging" // jdk1.8::java::util::logging
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/util/logging/"
  java_package "java.util.logging"
  classview 137346 "logging"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 215298 "Logger"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A Logger object is used to log messages for a specific
system or application component.  Loggers are normally named,
using a hierarchical dot-separated namespace.  Logger names
can be arbitrary strings, but they should normally be based on
the package name or class name of the logged component, such
as java.net or javax.swing.  In addition it is possible to create
\"anonymous\" Loggers that are not stored in the Logger namespace.
<p>
Logger objects may be obtained by calls on one of the getLogger
factory methods.  These will either create a new Logger or
return a suitable existing Logger. It is important to note that
the Logger returned by one of the {@code getLogger} factory methods
may be garbage collected at any time if a strong reference to the
Logger is not kept.
<p>
Logging messages will be forwarded to registered Handler
objects, which can forward the messages to a variety of
destinations, including consoles, files, OS logs, etc.
<p>
Each Logger keeps track of a \"parent\" Logger, which is its
nearest existing ancestor in the Logger namespace.
<p>
Each Logger has a \"Level\" associated with it.  This reflects
a minimum Level that this logger cares about.  If a Logger's
level is set to <tt>null</tt>, then its effective level is inherited
from its parent, which may in turn obtain it recursively from its
parent, and so on up the tree.
<p>
The log level can be configured based on the properties from the
logging configuration file, as described in the description
of the LogManager class.  However it may also be dynamically changed
by calls on the Logger.setLevel method.  If a logger's level is
changed the change may also affect child loggers, since any child
logger that has <tt>null</tt> as its level will inherit its
effective level from its parent.
<p>
On each logging call the Logger initially performs a cheap
check of the request level (e.g., SEVERE or FINE) against the
effective log level of the logger.  If the request level is
lower than the log level, the logging call returns immediately.
<p>
After passing this initial (cheap) test, the Logger will allocate
a LogRecord to describe the logging message.  It will then call a
Filter (if present) to do a more detailed check on whether the
record should be published.  If that passes it will then publish
the LogRecord to its output Handlers.  By default, loggers also
publish to their parent's Handlers, recursively up the tree.
<p>
Each Logger may have a {@code ResourceBundle} associated with it.
The {@code ResourceBundle} may be specified by name, using the
{@link #getLogger(java.lang.String, java.lang.String)} factory
method, or by value - using the {@link
#setResourceBundle(java.util.ResourceBundle) setResourceBundle} method.
This bundle will be used for localizing logging messages.
If a Logger does not have its own {@code ResourceBundle} or resource bundle
name, then it will inherit the {@code ResourceBundle} or resource bundle name
from its parent, recursively up the tree.
<p>
Most of the logger output methods take a \"msg\" argument.  This
msg argument may be either a raw value or a localization key.
During formatting, if the logger has (or inherits) a localization
{@code ResourceBundle} and if the {@code ResourceBundle} has a mapping for
the msg string, then the msg string is replaced by the localized value.
Otherwise the original msg string is used.  Typically, formatters use
java.text.MessageFormat style formatting to format parameters, so
for example a format string \"{0} {1}\" would format two parameters
as strings.
<p>
A set of methods alternatively take a \"msgSupplier\" instead of a \"msg\"
argument.  These methods take a {@link Supplier}{@code <String>} function
which is invoked to construct the desired log message only when the message
actually is to be logged based on the effective log level thus eliminating
unnecessary message construction. For example, if the developer wants to
log system health status for diagnosis, with the String-accepting version,
the code would look like:
<pre><code>

class DiagnosisMessages {
static String systemHealthStatus() {
// collect system health information
...
}
}
...
logger.log(Level.FINER, DiagnosisMessages.systemHealthStatus());
</code></pre>
With the above code, the health status is collected unnecessarily even when
the log level FINER is disabled. With the Supplier-accepting version as
below, the status will only be collected when the log level FINER is
enabled.
<pre><code>

logger.log(Level.FINER, DiagnosisMessages::systemHealthStatus);
</code></pre>
<p>
When looking for a {@code ResourceBundle}, the logger will first look at
whether a bundle was specified using {@link
#setResourceBundle(java.util.ResourceBundle) setResourceBundle}, and then
only whether a resource bundle name was specified through the {@link
#getLogger(java.lang.String, java.lang.String) getLogger} factory method.
If no {@code ResourceBundle} or no resource bundle name is found,
then it will use the nearest {@code ResourceBundle} or resource bundle
name inherited from its parent tree.<br>
When a {@code ResourceBundle} was inherited or specified through the
{@link
#setResourceBundle(java.util.ResourceBundle) setResourceBundle} method, then
that {@code ResourceBundle} will be used. Otherwise if the logger only
has or inherited a resource bundle name, then that resource bundle name
will be mapped to a {@code ResourceBundle} object, using the default Locale
at the time of logging.
<br id=\"ResourceBundleMapping\">When mapping resource bundle names to
{@code ResourceBundle} objects, the logger will first try to use the
Thread's {@linkplain java.lang.Thread#getContextClassLoader() context class
loader} to map the given resource bundle name to a {@code ResourceBundle}.
If the thread context class loader is {@code null}, it will try the
{@linkplain java.lang.ClassLoader#getSystemClassLoader() system class loader}
instead.  If the {@code ResourceBundle} is still not found, it will use the
class loader of the first caller of the {@link
#getLogger(java.lang.String, java.lang.String) getLogger} factory method.
<p>
Formatting (including localization) is the responsibility of
the output Handler, which will typically call a Formatter.
<p>
Note that formatting need not occur synchronously.  It may be delayed
until a LogRecord is actually written to an external sink.
<p>
The logging methods are grouped in five main categories:
<ul>
<li><p>
    There are a set of \"log\" methods that take a log level, a message
    string, and optionally some parameters to the message string.
<li><p>
    There are a set of \"logp\" methods (for \"log precise\") that are
    like the \"log\" methods, but also take an explicit source class name
    and method name.
<li><p>
    There are a set of \"logrb\" method (for \"log with resource bundle\")
    that are like the \"logp\" method, but also take an explicit resource
    bundle object for use in localizing the log message.
<li><p>
    There are convenience methods for tracing method entries (the
    \"entering\" methods), method returns (the \"exiting\" methods) and
    throwing exceptions (the \"throwing\" methods).
<li><p>
    Finally, there are a set of convenience methods for use in the
    very simplest cases, when a developer simply wants to log a
    simple string at a given log level.  These methods are named
    after the standard Level names (\"severe\", \"warning\", \"info\", etc.)
    and take a single argument, a message string.
</ul>
<p>
For the methods that do not take an explicit source name and
method name, the Logging framework will make a \"best effort\"
to determine which class and method called into the logging method.
However, it is important to realize that this automatically inferred
information may only be approximate (or may even be quite wrong!).
Virtual machines are allowed to do extensive optimizations when
JITing and may entirely remove stack frames, making it impossible
to reliably locate the calling class and method.
<P>
All methods on Logger are multi-thread safe.
<p>
<b>Subclassing Information:</b> Note that a LogManager class may
provide its own implementation of named Loggers for any point in
the namespace.  Therefore, any subclasses of Logger (unless they
are implemented in conjunction with a new LogManager class) should
take care to obtain a Logger instance from the LogManager class and
should delegate operations such as \"isLoggable\" and \"log(LogRecord)\"
to that instance.  Note that in order to intercept all logging
output, subclasses need only override the log(LogRecord) method.
All the other logging methods are implemented as calls on this
log(LogRecord) method.

@since 1.4
"
      classrelation 3676546 // emptyHandlers (<unidirectional association>)
	relation 3676546 --->
	  a role_name "emptyHandlers" multiplicity "[]" init_value " new Handler[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3676546 // emptyHandlers (<unidirectional association>)
	  b parent class_ref 1138434 // Handler
      end

      attribute 2189954 "offValue"
	class_attribute const_attribute private explicit_type "int"
	init_value " Level.OFF.intValue()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3676674 // SYSTEM_LOGGER_RB_NAME (<unidirectional association>)
	relation 3676674 --->
	  a role_name "SYSTEM_LOGGER_RB_NAME" init_value " \"sun.util.logging.resources.logging\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3676674 // SYSTEM_LOGGER_RB_NAME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      class 1139586 "LoggerBundle"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3676802 // resourceBundleName (<unidirectional association>)
	  relation 3676802 --->
	    a role_name "resourceBundleName" const_relation package
	      comment " Base name of the bundle."
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3676802 // resourceBundleName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3676930 // userBundle (<unidirectional association>)
	  relation 3676930 --->
	    a role_name "userBundle" const_relation package
	      comment " Bundle set through setResourceBundle."
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3676930 // userBundle (<unidirectional association>)
	    b parent class_ref 249858 // ResourceBundle
	end

	operation 9380098 "LoggerBundle"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "resourceBundleName" type class_ref 128130 // String
	    param inout name "bundle" type class_ref 249858 // ResourceBundle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9380226 "isSystemBundle"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9380354 "get"
	  class_operation package return_type class_ref 1139586 // LoggerBundle
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "bundle" type class_ref 249858 // ResourceBundle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3677058 // SYSTEM_BUNDLE (<unidirectional association>)
	relation 3677058 --->
	  a role_name "SYSTEM_BUNDLE" init_value "
            new LoggerBundle(SYSTEM_LOGGER_RB_NAME, null)" class_relation const_relation private
	    comment " This instance will be shared by all loggers created by the system
 code
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3677058 // SYSTEM_BUNDLE (<unidirectional association>)
	  b parent class_ref 1139586 // LoggerBundle
      end

      classrelation 3677186 // NO_RESOURCE_BUNDLE (<unidirectional association>)
	relation 3677186 --->
	  a role_name "NO_RESOURCE_BUNDLE" init_value "
            new LoggerBundle(null, null)" class_relation const_relation private
	    comment " This instance indicates that no resource bundle has been specified yet,
 and it will be shared by all loggers which have no resource bundle.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3677186 // NO_RESOURCE_BUNDLE (<unidirectional association>)
	  b parent class_ref 1139586 // LoggerBundle
      end

      classrelation 3677314 // manager (<unidirectional association>)
	relation 3677314 --->
	  a role_name "manager" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3677314 // manager (<unidirectional association>)
	  b parent class_ref 1138562 // LogManager
      end

      classrelation 3677442 // name (<unidirectional association>)
	relation 3677442 --->
	  a role_name "name" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3677442 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3677570 // handlers (<unidirectional association>)
	relation 3677570 --->
	  a role_name "handlers" init_value "
        new CopyOnWriteArrayList<>()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Handler> ${name}${value};
"
	    classrelation_ref 3677570 // handlers (<unidirectional association>)
	  b parent class_ref 589058 // CopyOnWriteArrayList
      end

      classrelation 3677698 // loggerBundle (<unidirectional association>)
	relation 3677698 --->
	  a role_name "loggerBundle" init_value " NO_RESOURCE_BUNDLE" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3677698 // loggerBundle (<unidirectional association>)
	  b parent class_ref 1139586 // LoggerBundle
      end

      attribute 2190082 "useParentHandlers"
	volatile private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3677826 // filter (<unidirectional association>)
	relation 3677826 --->
	  a role_name "filter" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3677826 // filter (<unidirectional association>)
	  b parent class_ref 1138690 // Filter
      end

      attribute 2190210 "anonymous"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3677954 // catalog (<unidirectional association>)
	relation 3677954 --->
	  a role_name "catalog" private
	    comment " Cache to speed up behavior of findResourceBundle:
 Cached resource bundle"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3677954 // catalog (<unidirectional association>)
	  b parent class_ref 249858 // ResourceBundle
      end

      classrelation 3678082 // catalogName (<unidirectional association>)
	relation 3678082 --->
	  a role_name "catalogName" private
	    comment " name associated with catalog"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3678082 // catalogName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3678210 // catalogLocale (<unidirectional association>)
	relation 3678210 --->
	  a role_name "catalogLocale" private
	    comment " locale associated with catalog"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3678210 // catalogLocale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      classrelation 3678338 // treeLock (<unidirectional association>)
	relation 3678338 --->
	  a role_name "treeLock" init_value " new Object()" class_relation const_relation private
	    comment " The fields relating to parent-child relationships and levels
 are managed under a separate lock, the treeLock.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3678338 // treeLock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3678466 // parent (<unidirectional association>)
	relation 3678466 --->
	  a role_name "parent" volatile private
	    comment " We keep weak references from parents to children, but strong
 references from children to parents.
 our nearest parent."
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3678466 // parent (<unidirectional association>)
	  b parent class_ref 215298 // Logger
      end

      classrelation 3678594 // kids (<unidirectional association>)
	relation 3678594 --->
	  a role_name "kids" private
	    comment " WeakReferences to loggers that have us as parent"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<LogManager.LoggerWeakRef> ${name}${value};
"
	    classrelation_ref 3678594 // kids (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      classrelation 3678722 // levelObject (<unidirectional association>)
	relation 3678722 --->
	  a role_name "levelObject" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3678722 // levelObject (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      attribute 2190338 "levelValue"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " current effective level value"
      end

      classrelation 3678850 // callersClassLoaderRef (<unidirectional association>)
	relation 3678850 --->
	  a role_name "callersClassLoaderRef" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ClassLoader> ${name}${value};
"
	    classrelation_ref 3678850 // callersClassLoaderRef (<unidirectional association>)
	  b parent class_ref 131330 // WeakReference
      end

      attribute 2190466 "isSystemLogger"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3678978 // GLOBAL_LOGGER_NAME (<unidirectional association>)
	relation 3678978 --->
	  a role_name "GLOBAL_LOGGER_NAME" init_value " \"global\"" class_relation const_relation public
	    comment "
GLOBAL_LOGGER_NAME is a name for the global logger.

@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3678978 // GLOBAL_LOGGER_NAME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9380482 "getGlobal"
	class_operation public return_type class_ref 215298 // Logger
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return global logger object with the name Logger.GLOBAL_LOGGER_NAME.

@return global logger object
@since 1.7
"
      end

      classrelation 3679106 // global (<unidirectional association>)
	relation 3679106 --->
	  a role_name "global" init_value " new Logger(GLOBAL_LOGGER_NAME)" class_relation const_relation public
	    comment "
The \"global\" Logger object is provided as a convenience to developers
who are making casual use of the Logging package.  Developers
who are making serious use of the logging package (for example
in products) should create and use their own Logger objects,
with appropriate names, so that logging can be controlled on a
suitable per-Logger granularity. Developers also need to keep a
strong reference to their Logger objects to prevent them from
being garbage collected.
<p>
@deprecated Initialization of this field is prone to deadlocks.
The field must be initialized by the Logger class initialization
which may cause deadlocks with the LogManager class initialization.
In such cases two class initialization wait for each other to complete.
The preferred way to get the global logger object is via the call
<code>Logger.getGlobal()</code>.
For compatibility with old JDK versions where the
<code>Logger.getGlobal()</code> is not available use the call
<code>Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)</code>
or <code>Logger.getLogger(\"global\")</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Deprecated
"
	    classrelation_ref 3679106 // global (<unidirectional association>)
	  b parent class_ref 215298 // Logger
      end

      operation 9380610 "Logger"
	protected explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "resourceBundleName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected method to construct a logger for a named subsystem.
<p>
The logger will be initially configured with a null Level
and with useParentHandlers set to true.

@param   name    A name for the logger.  This should
                         be a dot-separated name and should normally
                         be based on the package name or class name
                         of the subsystem, such as java.net
                         or javax.swing.  It may be null for anonymous Loggers.
@param   resourceBundleName  name of ResourceBundle to be used for localizing
                         messages for this logger.  May be null if none
                         of the messages require localization.
@throws MissingResourceException if the resourceBundleName is non-null and
            no corresponding resource can be found.
"
      end

      operation 9380738 "Logger"
	package explicit_return_type ""
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "resourceBundleName" type class_ref 128130 // String
	  param inout name "caller" type class_ref 130818 // Class
	  param inout name "manager" type class_ref 1138562 // LogManager
	  param inout name "isSystemLogger" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9380866 "setCallersClassLoaderRef"
	private explicit_return_type "void"
	nparams 1
	  param inout name "caller" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9380994 "getCallersClassLoader"
	private return_type class_ref 129026 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9381122 "Logger"
	private explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This constructor is used only to create the global Logger.
 It is needed to break a cyclic dependence between the LogManager
 and Logger static initializers causing deadlocks."
      end

      operation 9381250 "setLogManager"
	package explicit_return_type "void"
	nparams 1
	  param inout name "manager" type class_ref 1138562 // LogManager
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " It is called from LoggerContext.addLocalLogger() when the logger
 is actually added to a LogManager."
      end

      operation 9381378 "checkPermission"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1139842 "SystemLoggerHelper"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2190594 "disableCallerCheck"
	  class_attribute package explicit_type "boolean"
	  init_value " getBooleanProperty(\"sun.util.logging.disableCallerCheck\")"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9381506 "getBooleanProperty"
	  class_operation private explicit_return_type "boolean"
	  nparams 1
	    param in name "key" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9381634 "demandLogger"
	class_operation private return_type class_ref 215298 // Logger
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "resourceBundleName" type class_ref 128130 // String
	  param inout name "caller" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9381762 "getLogger"
	class_operation public return_type class_ref 215298 // Logger
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Find or create a logger for a named subsystem.  If a logger has
already been created with the given name it is returned.  Otherwise
a new logger is created.
<p>
If a new logger is created its log level will be configured
based on the LogManager configuration and it will configured
to also send logging output to its parent's Handlers.  It will
be registered in the LogManager global namespace.
<p>
Note: The LogManager may only retain a weak reference to the newly
created Logger. It is important to understand that a previously
created Logger with the given name may be garbage collected at any
time if there is no strong reference to the Logger. In particular,
this means that two back-to-back calls like
{@code getLogger(\"MyLogger\").log(...)} may use different Logger
objects named \"MyLogger\" if there is no strong reference to the
Logger named \"MyLogger\" elsewhere in the program.

@param   name            A name for the logger.  This should
                         be a dot-separated name and should normally
                         be based on the package name or class name
                         of the subsystem, such as java.net
                         or javax.swing
@return a suitable Logger
@throws NullPointerException if the name is null.

 Synchronization is not required here. All synchronization for
 adding a new Logger object is handled by LogManager.addLogger()."
      end

      operation 9381890 "getLogger"
	class_operation public return_type class_ref 215298 // Logger
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "resourceBundleName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Find or create a logger for a named subsystem.  If a logger has
already been created with the given name it is returned.  Otherwise
a new logger is created.
<p>
If a new logger is created its log level will be configured
based on the LogManager and it will configured to also send logging
output to its parent's Handlers.  It will be registered in
the LogManager global namespace.
<p>
Note: The LogManager may only retain a weak reference to the newly
created Logger. It is important to understand that a previously
created Logger with the given name may be garbage collected at any
time if there is no strong reference to the Logger. In particular,
this means that two back-to-back calls like
{@code getLogger(\"MyLogger\", ...).log(...)} may use different Logger
objects named \"MyLogger\" if there is no strong reference to the
Logger named \"MyLogger\" elsewhere in the program.
<p>
If the named Logger already exists and does not yet have a
localization resource bundle then the given resource bundle
name is used.  If the named Logger already exists and has
a different resource bundle name then an IllegalArgumentException
is thrown.
<p>
@param   name    A name for the logger.  This should
                         be a dot-separated name and should normally
                         be based on the package name or class name
                         of the subsystem, such as java.net
                         or javax.swing
@param   resourceBundleName  name of ResourceBundle to be used for localizing
                         messages for this logger. May be {@code null}
                         if none of the messages require localization.
@return a suitable Logger
@throws MissingResourceException if the resourceBundleName is non-null and
            no corresponding resource can be found.
@throws IllegalArgumentException if the Logger already exists and uses
            a different resource bundle name; or if
            {@code resourceBundleName} is {@code null} but the named
            logger has a resource bundle set.
@throws NullPointerException if the name is null.

 Synchronization is not required here. All synchronization for
 adding a new Logger object is handled by LogManager.addLogger()."
      end

      operation 9382018 "getPlatformLogger"
	class_operation package return_type class_ref 215298 // Logger
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " package-private
 Add a platform logger to the system context.
 i.e. caller of sun.util.logging.PlatformLogger.getLogger"
      end

      operation 9382146 "getAnonymousLogger"
	class_operation public return_type class_ref 215298 // Logger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an anonymous Logger.  The newly created Logger is not
registered in the LogManager namespace.  There will be no
access checks on updates to the logger.
<p>
This factory method is primarily intended for use from applets.
Because the resulting Logger is anonymous it can be kept private
by the creating class.  This removes the need for normal security
checks, which in turn allows untrusted applet code to update
the control state of the Logger.  For example an applet can do
a setLevel or an addHandler on an anonymous Logger.
<p>
Even although the new logger is anonymous, it is configured
to have the root logger (\"\") as its parent.  This means that
by default it inherits its effective level and handlers
from the root logger. Changing its parent via the
{@link #setParent(java.util.logging.Logger) setParent} method
will still require the security permission specified by that method.
<p>

@return a newly created private Logger
"
      end

      operation 9382274 "getAnonymousLogger"
	class_operation public return_type class_ref 215298 // Logger
	nparams 1
	  param inout name "resourceBundleName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Create an anonymous Logger.  The newly created Logger is not
registered in the LogManager namespace.  There will be no
access checks on updates to the logger.
<p>
This factory method is primarily intended for use from applets.
Because the resulting Logger is anonymous it can be kept private
by the creating class.  This removes the need for normal security
checks, which in turn allows untrusted applet code to update
the control state of the Logger.  For example an applet can do
a setLevel or an addHandler on an anonymous Logger.
<p>
Even although the new logger is anonymous, it is configured
to have the root logger (\"\") as its parent.  This means that
by default it inherits its effective level and handlers
from the root logger.  Changing its parent via the
{@link #setParent(java.util.logging.Logger) setParent} method
will still require the security permission specified by that method.
<p>
@param   resourceBundleName  name of ResourceBundle to be used for localizing
                         messages for this logger.
         May be null if none of the messages require localization.
@return a newly created private Logger
@throws MissingResourceException if the resourceBundleName is non-null and
            no corresponding resource can be found.

 Synchronization is not required here. All synchronization for
 adding a new anonymous Logger object is handled by doSetParent()."
      end

      operation 9382402 "getResourceBundle"
	public return_type class_ref 249858 // ResourceBundle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the localization resource bundle for this
logger.
This method will return a {@code ResourceBundle} that was either
set by the {@link
#setResourceBundle(java.util.ResourceBundle) setResourceBundle} method or
<a href=\"#ResourceBundleMapping\">mapped from the
the resource bundle name</a> set via the {@link
Logger#getLogger(java.lang.String, java.lang.String) getLogger} factory
method for the current default locale.
<br>Note that if the result is {@code null}, then the Logger will use a resource
bundle or resource bundle name inherited from its parent.

@return localization bundle (may be {@code null})
"
      end

      operation 9382530 "getResourceBundleName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the localization resource bundle name for this
logger.
This is either the name specified through the {@link
#getLogger(java.lang.String, java.lang.String) getLogger} factory method,
or the {@linkplain ResourceBundle#getBaseBundleName() base name} of the
ResourceBundle set through {@link
#setResourceBundle(java.util.ResourceBundle) setResourceBundle} method.
<br>Note that if the result is {@code null}, then the Logger will use a resource
bundle or resource bundle name inherited from its parent.

@return localization bundle name (may be {@code null})
"
      end

      operation 9382658 "setFilter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFilter" type class_ref 1138690 // Filter
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a filter to control output on this Logger.
<P>
After passing the initial \"level\" check, the Logger will
call this Filter to check if a log record should really
be published.

@param   newFilter  a filter object (may be null)
@throws  SecurityException if a security manager exists,
         this logger is not anonymous, and the caller
         does not have LoggingPermission(\"control\").
"
      end

      operation 9382786 "getFilter"
	public return_type class_ref 1138690 // Filter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current filter for this Logger.

@return  a filter object (may be null)
"
      end

      operation 9382914 "log"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a LogRecord.
<p>
All the other logging methods in this class call through
this method to actually perform any logging.  Subclasses can
override this single method to capture all log activity.

@param record the LogRecord to be published
"
      end

      operation 9383042 "doLog"
	private explicit_return_type "void"
	nparams 1
	  param inout name "lr" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " private support method for logging.
 We fill in the logger name, resource bundle name, and
 resource bundle and then call \"void log(LogRecord)\"."
      end

      operation 9383170 "log"
	public explicit_return_type "void"
	nparams 2
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Start of convenience methods WITHOUT className and methodName
================================================================

Log a message, with no arguments.
<p>
If the logger is currently enabled for the given message
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   msg     The string message (or a key in the message catalog)
"
      end

      operation 9383298 "log"
	public explicit_return_type "void"
	nparams 2
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "msgSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, which is only to be constructed if the logging level
is such that the message will actually be logged.
<p>
If the logger is currently enabled for the given message
level then the message is constructed by invoking the provided
supplier function and forwarded to all the registered output
Handler objects.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   msgSupplier   A function, which when called, produces the
                       desired log message
@since 1.8
"
      end

      operation 9383426 "log"
	public explicit_return_type "void"
	nparams 3
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "param1" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, with one object parameter.
<p>
If the logger is currently enabled for the given message
level then a corresponding LogRecord is created and forwarded
to all the registered output Handler objects.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   msg     The string message (or a key in the message catalog)
@param   param1  parameter to the message
"
      end

      operation 9383554 "log"
	public explicit_return_type "void"
	nparams 3
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, with an array of object arguments.
<p>
If the logger is currently enabled for the given message
level then a corresponding LogRecord is created and forwarded
to all the registered output Handler objects.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   msg     The string message (or a key in the message catalog)
@param   params  array of parameters to the message
"
      end

      operation 9383682 "log"
	public explicit_return_type "void"
	nparams 3
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "thrown" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, with associated Throwable information.
<p>
If the logger is currently enabled for the given message
level then the given arguments are stored in a LogRecord
which is forwarded to all registered output handlers.
<p>
Note that the thrown argument is stored in the LogRecord thrown
property, rather than the LogRecord parameters property.  Thus it is
processed specially by output Formatters and is not treated
as a formatting parameter to the LogRecord message property.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   msg     The string message (or a key in the message catalog)
@param   thrown  Throwable associated with log message.
"
      end

      operation 9383810 "log"
	public explicit_return_type "void"
	nparams 3
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "thrown" type class_ref 129922 // Throwable
	  param inout name "msgSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a lazily constructed message, with associated Throwable information.
<p>
If the logger is currently enabled for the given message level then the
message is constructed by invoking the provided supplier function. The
message and the given {@link Throwable} are then stored in a {@link
LogRecord} which is forwarded to all registered output handlers.
<p>
Note that the thrown argument is stored in the LogRecord thrown
property, rather than the LogRecord parameters property.  Thus it is
processed specially by output Formatters and is not treated
as a formatting parameter to the LogRecord message property.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   thrown  Throwable associated with log message.
@param   msgSupplier   A function, which when called, produces the
                       desired log message
@since   1.8
"
      end

      operation 9383938 "logp"
	public explicit_return_type "void"
	nparams 4
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 Start of convenience methods WITH className and methodName
================================================================

Log a message, specifying source class and method,
with no arguments.
<p>
If the logger is currently enabled for the given message
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   msg     The string message (or a key in the message catalog)
"
      end

      operation 9384066 "logp"
	public explicit_return_type "void"
	nparams 4
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "msgSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<String> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a lazily constructed message, specifying source class and method,
with no arguments.
<p>
If the logger is currently enabled for the given message
level then the message is constructed by invoking the provided
supplier function and forwarded to all the registered output
Handler objects.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   msgSupplier   A function, which when called, produces the
                       desired log message
@since   1.8
"
      end

      operation 9384194 "logp"
	public explicit_return_type "void"
	nparams 5
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "param1" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class and method,
with a single object parameter to the log message.
<p>
If the logger is currently enabled for the given message
level then a corresponding LogRecord is created and forwarded
to all the registered output Handler objects.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   msg      The string message (or a key in the message catalog)
@param   param1    Parameter to the log message.
"
      end

      operation 9384322 "logp"
	public explicit_return_type "void"
	nparams 5
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class and method,
with an array of object arguments.
<p>
If the logger is currently enabled for the given message
level then a corresponding LogRecord is created and forwarded
to all the registered output Handler objects.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   msg     The string message (or a key in the message catalog)
@param   params  Array of parameters to the message
"
      end

      operation 9384450 "logp"
	public explicit_return_type "void"
	nparams 5
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "thrown" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class and method,
with associated Throwable information.
<p>
If the logger is currently enabled for the given message
level then the given arguments are stored in a LogRecord
which is forwarded to all registered output handlers.
<p>
Note that the thrown argument is stored in the LogRecord thrown
property, rather than the LogRecord parameters property.  Thus it is
processed specially by output Formatters and is not treated
as a formatting parameter to the LogRecord message property.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   msg     The string message (or a key in the message catalog)
@param   thrown  Throwable associated with log message.
"
      end

      operation 9384578 "logp"
	public explicit_return_type "void"
	nparams 5
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "thrown" type class_ref 129922 // Throwable
	  param inout name "msgSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<String> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a lazily constructed message, specifying source class and method,
with associated Throwable information.
<p>
If the logger is currently enabled for the given message level then the
message is constructed by invoking the provided supplier function. The
message and the given {@link Throwable} are then stored in a {@link
LogRecord} which is forwarded to all registered output handlers.
<p>
Note that the thrown argument is stored in the LogRecord thrown
property, rather than the LogRecord parameters property.  Thus it is
processed specially by output Formatters and is not treated
as a formatting parameter to the LogRecord message property.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   thrown  Throwable associated with log message.
@param   msgSupplier   A function, which when called, produces the
                       desired log message
@since   1.8
"
      end

      operation 9384706 "doLog"
	private explicit_return_type "void"
	nparams 2
	  param inout name "lr" type class_ref 215554 // LogRecord
	  param inout name "rbname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=========================================================================
 Start of convenience methods WITH className, methodName and bundle name.
=========================================================================
 Private support method for logging for \"logrb\" methods.
 We fill in the logger name, resource bundle name, and
 resource bundle and then call \"void log(LogRecord)\"."
      end

      operation 9384834 "doLog"
	private explicit_return_type "void"
	nparams 2
	  param inout name "lr" type class_ref 215554 // LogRecord
	  param inout name "rb" type class_ref 249858 // ResourceBundle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private support method for logging for \"logrb\" methods."
      end

      operation 9384962 "logrb"
	public explicit_return_type "void"
	nparams 5
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "bundleName" type class_ref 128130 // String
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Log a message, specifying source class, method, and resource bundle name
with no arguments.
<p>
If the logger is currently enabled for the given message
level then the given message is forwarded to all the
registered output Handler objects.
<p>
The msg string is localized using the named resource bundle.  If the
resource bundle name is null, or an empty String or invalid
then the msg string is not localized.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   bundleName     name of resource bundle to localize msg,
                        can be null
@param   msg     The string message (or a key in the message catalog)
@deprecated Use {@link #logrb(java.util.logging.Level, java.lang.String,
java.lang.String, java.util.ResourceBundle, java.lang.String,
java.lang.Object...)} instead.
"
      end

      operation 9385090 "logrb"
	public explicit_return_type "void"
	nparams 6
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "bundleName" type class_ref 128130 // String
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "param1" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Log a message, specifying source class, method, and resource bundle name,
with a single object parameter to the log message.
<p>
If the logger is currently enabled for the given message
level then a corresponding LogRecord is created and forwarded
to all the registered output Handler objects.
<p>
The msg string is localized using the named resource bundle.  If the
resource bundle name is null, or an empty String or invalid
then the msg string is not localized.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   bundleName     name of resource bundle to localize msg,
                        can be null
@param   msg      The string message (or a key in the message catalog)
@param   param1    Parameter to the log message.
@deprecated Use {@link #logrb(java.util.logging.Level, java.lang.String,
  java.lang.String, java.util.ResourceBundle, java.lang.String,
  java.lang.Object...)} instead
"
      end

      operation 9385218 "logrb"
	public explicit_return_type "void"
	nparams 6
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "bundleName" type class_ref 128130 // String
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Log a message, specifying source class, method, and resource bundle name,
with an array of object arguments.
<p>
If the logger is currently enabled for the given message
level then a corresponding LogRecord is created and forwarded
to all the registered output Handler objects.
<p>
The msg string is localized using the named resource bundle.  If the
resource bundle name is null, or an empty String or invalid
then the msg string is not localized.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   bundleName     name of resource bundle to localize msg,
                        can be null.
@param   msg     The string message (or a key in the message catalog)
@param   params  Array of parameters to the message
@deprecated Use {@link #logrb(java.util.logging.Level, java.lang.String,
     java.lang.String, java.util.ResourceBundle, java.lang.String,
     java.lang.Object...)} instead.
"
      end

      operation 9385346 "logrb"
	public explicit_return_type "void"
	nparams 6
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "bundle" type class_ref 249858 // ResourceBundle
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "" explicit_type "Object...params"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class, method, and resource bundle,
with an optional list of message parameters.
<p>
If the logger is currently enabled for the given message
level then a corresponding LogRecord is created and forwarded
to all the registered output Handler objects.
<p>
The {@code msg} string is localized using the given resource bundle.
If the resource bundle is {@code null}, then the {@code msg} string is not
localized.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    Name of the class that issued the logging request
@param   sourceMethod   Name of the method that issued the logging request
@param   bundle         Resource bundle to localize {@code msg},
                        can be {@code null}.
@param   msg     The string message (or a key in the message catalog)
@param   params  Parameters to the message (optional, may be none).
@since 1.8
"
      end

      operation 9385474 "logrb"
	public explicit_return_type "void"
	nparams 6
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "bundleName" type class_ref 128130 // String
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "thrown" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Log a message, specifying source class, method, and resource bundle name,
with associated Throwable information.
<p>
If the logger is currently enabled for the given message
level then the given arguments are stored in a LogRecord
which is forwarded to all registered output handlers.
<p>
The msg string is localized using the named resource bundle.  If the
resource bundle name is null, or an empty String or invalid
then the msg string is not localized.
<p>
Note that the thrown argument is stored in the LogRecord thrown
property, rather than the LogRecord parameters property.  Thus it is
processed specially by output Formatters and is not treated
as a formatting parameter to the LogRecord message property.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that issued the logging request
@param   bundleName     name of resource bundle to localize msg,
                        can be null
@param   msg     The string message (or a key in the message catalog)
@param   thrown  Throwable associated with log message.
@deprecated Use {@link #logrb(java.util.logging.Level, java.lang.String,
    java.lang.String, java.util.ResourceBundle, java.lang.String,
    java.lang.Throwable)} instead.
"
      end

      operation 9385602 "logrb"
	public explicit_return_type "void"
	nparams 6
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "bundle" type class_ref 249858 // ResourceBundle
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "thrown" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a message, specifying source class, method, and resource bundle,
with associated Throwable information.
<p>
If the logger is currently enabled for the given message
level then the given arguments are stored in a LogRecord
which is forwarded to all registered output handlers.
<p>
The {@code msg} string is localized using the given resource bundle.
If the resource bundle is {@code null}, then the {@code msg} string is not
localized.
<p>
Note that the thrown argument is stored in the LogRecord thrown
property, rather than the LogRecord parameters property.  Thus it is
processed specially by output Formatters and is not treated
as a formatting parameter to the LogRecord message property.
<p>
@param   level   One of the message level identifiers, e.g., SEVERE
@param   sourceClass    Name of the class that issued the logging request
@param   sourceMethod   Name of the method that issued the logging request
@param   bundle         Resource bundle to localize {@code msg},
                        can be {@code null}
@param   msg     The string message (or a key in the message catalog)
@param   thrown  Throwable associated with the log message.
@since 1.8
"
      end

      operation 9385730 "entering"
	public explicit_return_type "void"
	nparams 2
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "======================================================================
 Start of convenience methods for logging method entries and returns.
======================================================================

Log a method entry.
<p>
This is a convenience method that can be used to log entry
to a method.  A LogRecord with message \"ENTRY\", log level
FINER, and the given sourceMethod and sourceClass is logged.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that is being entered
"
      end

      operation 9385858 "entering"
	public explicit_return_type "void"
	nparams 3
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "param1" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a method entry, with one parameter.
<p>
This is a convenience method that can be used to log entry
to a method.  A LogRecord with message \"ENTRY {0}\", log level
FINER, and the given sourceMethod, sourceClass, and parameter
is logged.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that is being entered
@param   param1         parameter to the method being entered
"
      end

      operation 9385986 "entering"
	public explicit_return_type "void"
	nparams 3
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a method entry, with an array of parameters.
<p>
This is a convenience method that can be used to log entry
to a method.  A LogRecord with message \"ENTRY\" (followed by a
format {N} indicator for each entry in the parameter array),
log level FINER, and the given sourceMethod, sourceClass, and
parameters is logged.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of method that is being entered
@param   params         array of parameters to the method being entered
"
      end

      operation 9386114 "exiting"
	public explicit_return_type "void"
	nparams 2
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a method return.
<p>
This is a convenience method that can be used to log returning
from a method.  A LogRecord with message \"RETURN\", log level
FINER, and the given sourceMethod and sourceClass is logged.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of the method
"
      end

      operation 9386242 "exiting"
	public explicit_return_type "void"
	nparams 3
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "result" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a method return, with result object.
<p>
This is a convenience method that can be used to log returning
from a method.  A LogRecord with message \"RETURN {0}\", log level
FINER, and the gives sourceMethod, sourceClass, and result
object is logged.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod   name of the method
@param   result  Object that is being returned
"
      end

      operation 9386370 "throwing"
	public explicit_return_type "void"
	nparams 3
	  param inout name "sourceClass" type class_ref 128130 // String
	  param inout name "sourceMethod" type class_ref 128130 // String
	  param inout name "thrown" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log throwing an exception.
<p>
This is a convenience method to log that a method is
terminating by throwing an exception.  The logging is done
using the FINER level.
<p>
If the logger is currently enabled for the given message
level then the given arguments are stored in a LogRecord
which is forwarded to all registered output handlers.  The
LogRecord's message is set to \"THROW\".
<p>
Note that the thrown argument is stored in the LogRecord thrown
property, rather than the LogRecord parameters property.  Thus it is
processed specially by output Formatters and is not treated
as a formatting parameter to the LogRecord message property.
<p>
@param   sourceClass    name of class that issued the logging request
@param   sourceMethod  name of the method.
@param   thrown  The Throwable that is being thrown.
"
      end

      operation 9386498 "severe"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=======================================================================
 Start of simple convenience methods using level names as method names
=======================================================================

Log a SEVERE message.
<p>
If the logger is currently enabled for the SEVERE message
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg     The string message (or a key in the message catalog)
"
      end

      operation 9386626 "warning"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a WARNING message.
<p>
If the logger is currently enabled for the WARNING message
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg     The string message (or a key in the message catalog)
"
      end

      operation 9386754 "info"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log an INFO message.
<p>
If the logger is currently enabled for the INFO message
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg     The string message (or a key in the message catalog)
"
      end

      operation 9386882 "config"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a CONFIG message.
<p>
If the logger is currently enabled for the CONFIG message
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg     The string message (or a key in the message catalog)
"
      end

      operation 9387010 "fine"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a FINE message.
<p>
If the logger is currently enabled for the FINE message
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg     The string message (or a key in the message catalog)
"
      end

      operation 9387138 "finer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a FINER message.
<p>
If the logger is currently enabled for the FINER message
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg     The string message (or a key in the message catalog)
"
      end

      operation 9387266 "finest"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a FINEST message.
<p>
If the logger is currently enabled for the FINEST message
level then the given message is forwarded to all the
registered output Handler objects.
<p>
@param   msg     The string message (or a key in the message catalog)
"
      end

      operation 9387394 "severe"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msgSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "=======================================================================
 Start of simple convenience methods using level names as method names
 and use Supplier<String>
=======================================================================

Log a SEVERE message, which is only to be constructed if the logging
level is such that the message will actually be logged.
<p>
If the logger is currently enabled for the SEVERE message
level then the message is constructed by invoking the provided
supplier function and forwarded to all the registered output
Handler objects.
<p>
@param   msgSupplier   A function, which when called, produces the
                       desired log message
@since   1.8
"
      end

      operation 9387522 "warning"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msgSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a WARNING message, which is only to be constructed if the logging
level is such that the message will actually be logged.
<p>
If the logger is currently enabled for the WARNING message
level then the message is constructed by invoking the provided
supplier function and forwarded to all the registered output
Handler objects.
<p>
@param   msgSupplier   A function, which when called, produces the
                       desired log message
@since   1.8
"
      end

      operation 9387650 "info"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msgSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a INFO message, which is only to be constructed if the logging
level is such that the message will actually be logged.
<p>
If the logger is currently enabled for the INFO message
level then the message is constructed by invoking the provided
supplier function and forwarded to all the registered output
Handler objects.
<p>
@param   msgSupplier   A function, which when called, produces the
                       desired log message
@since   1.8
"
      end

      operation 9387778 "config"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msgSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a CONFIG message, which is only to be constructed if the logging
level is such that the message will actually be logged.
<p>
If the logger is currently enabled for the CONFIG message
level then the message is constructed by invoking the provided
supplier function and forwarded to all the registered output
Handler objects.
<p>
@param   msgSupplier   A function, which when called, produces the
                       desired log message
@since   1.8
"
      end

      operation 9387906 "fine"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msgSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a FINE message, which is only to be constructed if the logging
level is such that the message will actually be logged.
<p>
If the logger is currently enabled for the FINE message
level then the message is constructed by invoking the provided
supplier function and forwarded to all the registered output
Handler objects.
<p>
@param   msgSupplier   A function, which when called, produces the
                       desired log message
@since   1.8
"
      end

      operation 9388034 "finer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msgSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a FINER message, which is only to be constructed if the logging
level is such that the message will actually be logged.
<p>
If the logger is currently enabled for the FINER message
level then the message is constructed by invoking the provided
supplier function and forwarded to all the registered output
Handler objects.
<p>
@param   msgSupplier   A function, which when called, produces the
                       desired log message
@since   1.8
"
      end

      operation 9388162 "finest"
	public explicit_return_type "void"
	nparams 1
	  param inout name "msgSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log a FINEST message, which is only to be constructed if the logging
level is such that the message will actually be logged.
<p>
If the logger is currently enabled for the FINEST message
level then the message is constructed by invoking the provided
supplier function and forwarded to all the registered output
Handler objects.
<p>
@param   msgSupplier   A function, which when called, produces the
                       desired log message
@since   1.8
"
      end

      operation 9388290 "setLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newLevel" type class_ref 215426 // Level
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "================================================================
 End of convenience methods
================================================================

Set the log level specifying which message levels will be
logged by this logger.  Message levels lower than this
value will be discarded.  The level value Level.OFF
can be used to turn off logging.
<p>
If the new level is null, it means that this node should
inherit its level from its nearest ancestor with a specific
(non-null) level value.

@param newLevel   the new value for the log level (may be null)
@throws  SecurityException if a security manager exists,
         this logger is not anonymous, and the caller
         does not have LoggingPermission(\"control\").
"
      end

      operation 9388418 "isLevelInitialized"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9388546 "getLevel"
	public return_type class_ref 215426 // Level
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the log Level that has been specified for this Logger.
The result may be null, which means that this logger's
effective level will be inherited from its parent.

@return  this Logger's level
"
      end

      operation 9388674 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "level" type class_ref 215426 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if a message of the given level would actually be logged
by this logger.  This check is based on the Loggers effective level,
which may be inherited from its parent.

@param   level   a message logging level
@return  true if the given message level is currently being logged.
"
      end

      operation 9388802 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the name for this logger.
@return logger name.  Will be null for anonymous Loggers.
"
      end

      operation 9388930 "addHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 1138434 // Handler
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a log Handler to receive logging messages.
<p>
By default, Loggers also send their output to their parent logger.
Typically the root Logger is configured with a set of Handlers
that essentially act as default handlers for all loggers.

@param   handler a logging Handler
@throws  SecurityException if a security manager exists,
         this logger is not anonymous, and the caller
         does not have LoggingPermission(\"control\").
"
      end

      operation 9389058 "removeHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 1138434 // Handler
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a log Handler.
<P>
Returns silently if the given Handler is not found or is null

@param   handler a logging Handler
@throws  SecurityException if a security manager exists,
         this logger is not anonymous, and the caller
         does not have LoggingPermission(\"control\").
"
      end

      operation 9389186 "getHandlers"
	public return_type class_ref 1138434 // Handler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the Handlers associated with this logger.
<p>
@return  an array of all registered Handlers
"
      end

      operation 9389314 "accessCheckedHandlers"
	package return_type class_ref 1138434 // Handler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method should ideally be marked final - but unfortunately
 it needs to be overridden by LogManager.RootLogger"
      end

      operation 9389442 "setUseParentHandlers"
	public explicit_return_type "void"
	nparams 1
	  param inout name "useParentHandlers" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specify whether or not this logger should send its output
to its parent Logger.  This means that any LogRecords will
also be written to the parent's Handlers, and potentially
to its parent, recursively up the namespace.

@param useParentHandlers   true if output is to be sent to the
         logger's parent.
@throws  SecurityException if a security manager exists,
         this logger is not anonymous, and the caller
         does not have LoggingPermission(\"control\").
"
      end

      operation 9389570 "getUseParentHandlers"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Discover whether or not this logger is sending its output
to its parent logger.

@return  true if output is to be sent to the logger's parent
"
      end

      operation 9389698 "findSystemResourceBundle"
	class_operation private return_type class_ref 249858 // ResourceBundle
	nparams 1
	  param in name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9389826 "findResourceBundle"
	private return_type class_ref 249858 // ResourceBundle
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "useCallersClassLoader" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private utility method to map a resource bundle name to an
actual resource bundle, using a simple one-entry cache.
Returns null for a null name.
May also return null if we can't find the resource bundle and
there is no suitable previous cached value.

@param name the ResourceBundle to locate
@param userCallersClassLoader if true search using the caller's ClassLoader
@return ResourceBundle specified by name or null if not found
"
      end

      operation 9389954 "setupResourceInfo"
	private explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "callersClass" type class_ref 130818 // Class
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private utility method to initialize our one entry
 resource bundle name cache and the callers ClassLoader
 Note: for consistency reasons, we are careful to check
 that a suitable ResourceBundle exists before setting the
 resourceBundleName field.
 Synchronized to prevent races in setting the fields."
      end

      operation 9390082 "setResourceBundle"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bundle" type class_ref 249858 // ResourceBundle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a resource bundle on this logger.
All messages will be logged using the given resource bundle for its
specific {@linkplain ResourceBundle#getLocale locale}.
@param bundle The resource bundle that this logger shall use.
@throws NullPointerException if the given bundle is {@code null}.
@throws IllegalArgumentException if the given bundle doesn't have a
        {@linkplain ResourceBundle#getBaseBundleName base name},
        or if this logger already has a resource bundle set but
        the given bundle has a different base name.
@throws SecurityException if a security manager exists,
        this logger is not anonymous, and the caller
        does not have LoggingPermission(\"control\").
@since 1.8
"
      end

      operation 9390210 "getParent"
	public return_type class_ref 215298 // Logger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the parent for this Logger.
<p>
This method returns the nearest extant parent in the namespace.
Thus if a Logger is called \"a.b.c.d\", and a Logger called \"a.b\"
has been created but no logger \"a.b.c\" exists, then a call of
getParent on the Logger \"a.b.c.d\" will return the Logger \"a.b\".
<p>
The result will be null if it is called on the root Logger
in the namespace.

@return nearest existing parent Logger
"
      end

      operation 9390338 "setParent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 215298 // Logger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the parent for this Logger.  This method is used by
the LogManager to update a Logger when the namespace changes.
<p>
It should not be called from application code.
<p>
@param  parent   the new parent logger
@throws  SecurityException  if a security manager exists and if
         the caller does not have LoggingPermission(\"control\").
"
      end

      operation 9390466 "doSetParent"
	private explicit_return_type "void"
	nparams 1
	  param inout name "newParent" type class_ref 215298 // Logger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to do the work for parenting a child
 Logger onto a parent logger."
      end

      operation 9390594 "removeChildLogger"
	package explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 1139714 // LoggerWeakRef
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package-level method.
 Remove the weak reference for the specified child Logger from the
 kid list. We should only be called from LoggerWeakRef.dispose()."
      end

      operation 9390722 "updateEffectiveLevel"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Recalculate the effective level for this node and
 recursively for our children."
      end

      operation 9390850 "getEffectiveLoggerBundle"
	private return_type class_ref 1139586 // LoggerBundle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to get the potentially inherited
 resource bundle and resource bundle name for this Logger.
 This method never returns null."
      end
    end

    class 215426 "Level"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Level class defines a set of standard logging levels that
can be used to control logging output.  The logging Level objects
are ordered and are specified by ordered integers.  Enabling logging
at a given level also enables logging at all higher levels.
<p>
Clients should normally use the predefined Level constants such
as Level.SEVERE.
<p>
The levels in descending order are:
<ul>
<li>SEVERE (highest value)
<li>WARNING
<li>INFO
<li>CONFIG
<li>FINE
<li>FINER
<li>FINEST  (lowest value)
</ul>
In addition there is a level OFF that can be used to turn
off logging, and a level ALL that can be used to enable
logging of all messages.
<p>
It is possible for third parties to define additional logging
levels by subclassing Level.  In such cases subclasses should
take care to chose unique integer level values and to ensure that
they maintain the Object uniqueness property across serialization
by defining a suitable readResolve method.

@since 1.4
"
      classrelation 3674114 // <realization>
	relation 3674114 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3674114 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3674242 // defaultBundle (<unidirectional association>)
	relation 3674242 --->
	  a role_name "defaultBundle" init_value " \"sun.util.logging.resources.logging\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3674242 // defaultBundle (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3674370 // name (<unidirectional association>)
	relation 3674370 --->
	  a role_name "name" const_relation private
	    comment "
@serial  The non-localized name of the level.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3674370 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2189698 "value"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial  The integer value of the level.

"
      end

      classrelation 3674498 // resourceBundleName (<unidirectional association>)
	relation 3674498 --->
	  a role_name "resourceBundleName" const_relation private
	    comment "
@serial The resource bundle name to be used in localizing the level name.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3674498 // resourceBundleName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3674626 // localizedLevelName (<unidirectional association>)
	relation 3674626 --->
	  a role_name "localizedLevelName" private
	    comment " localized level name
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3674626 // localizedLevelName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3674754 // cachedLocale (<unidirectional association>)
	relation 3674754 --->
	  a role_name "cachedLocale" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3674754 // cachedLocale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      classrelation 3674882 // OFF (<unidirectional association>)
	relation 3674882 --->
	  a role_name "OFF" init_value " new Level(\"OFF\",Integer.MAX_VALUE, defaultBundle)" class_relation const_relation public
	    comment "
OFF is a special level that can be used to turn off logging.
This level is initialized to <CODE>Integer.MAX_VALUE</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3674882 // OFF (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      classrelation 3675010 // SEVERE (<unidirectional association>)
	relation 3675010 --->
	  a role_name "SEVERE" init_value " new Level(\"SEVERE\",1000, defaultBundle)" class_relation const_relation public
	    comment "
SEVERE is a message level indicating a serious failure.
<p>
In general SEVERE messages should describe events that are
of considerable importance and which will prevent normal
program execution.   They should be reasonably intelligible
to end users and to system administrators.
This level is initialized to <CODE>1000</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3675010 // SEVERE (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      classrelation 3675138 // WARNING (<unidirectional association>)
	relation 3675138 --->
	  a role_name "WARNING" init_value " new Level(\"WARNING\", 900, defaultBundle)" class_relation const_relation public
	    comment "
WARNING is a message level indicating a potential problem.
<p>
In general WARNING messages should describe events that will
be of interest to end users or system managers, or which
indicate potential problems.
This level is initialized to <CODE>900</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3675138 // WARNING (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      classrelation 3675266 // INFO (<unidirectional association>)
	relation 3675266 --->
	  a role_name "INFO" init_value " new Level(\"INFO\", 800, defaultBundle)" class_relation const_relation public
	    comment "
INFO is a message level for informational messages.
<p>
Typically INFO messages will be written to the console
or its equivalent.  So the INFO level should only be
used for reasonably significant messages that will
make sense to end users and system administrators.
This level is initialized to <CODE>800</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3675266 // INFO (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      classrelation 3675394 // CONFIG (<unidirectional association>)
	relation 3675394 --->
	  a role_name "CONFIG" init_value " new Level(\"CONFIG\", 700, defaultBundle)" class_relation const_relation public
	    comment "
CONFIG is a message level for static configuration messages.
<p>
CONFIG messages are intended to provide a variety of static
configuration information, to assist in debugging problems
that may be associated with particular configurations.
For example, CONFIG message might include the CPU type,
the graphics depth, the GUI look-and-feel, etc.
This level is initialized to <CODE>700</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3675394 // CONFIG (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      classrelation 3675522 // FINE (<unidirectional association>)
	relation 3675522 --->
	  a role_name "FINE" init_value " new Level(\"FINE\", 500, defaultBundle)" class_relation const_relation public
	    comment "
FINE is a message level providing tracing information.
<p>
All of FINE, FINER, and FINEST are intended for relatively
detailed tracing.  The exact meaning of the three levels will
vary between subsystems, but in general, FINEST should be used
for the most voluminous detailed output, FINER for somewhat
less detailed output, and FINE for the  lowest volume (and
most important) messages.
<p>
In general the FINE level should be used for information
that will be broadly interesting to developers who do not have
a specialized interest in the specific subsystem.
<p>
FINE messages might include things like minor (recoverable)
failures.  Issues indicating potential performance problems
are also worth logging as FINE.
This level is initialized to <CODE>500</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3675522 // FINE (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      classrelation 3675650 // FINER (<unidirectional association>)
	relation 3675650 --->
	  a role_name "FINER" init_value " new Level(\"FINER\", 400, defaultBundle)" class_relation const_relation public
	    comment "
FINER indicates a fairly detailed tracing message.
By default logging calls for entering, returning, or throwing
an exception are traced at this level.
This level is initialized to <CODE>400</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3675650 // FINER (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      classrelation 3675778 // FINEST (<unidirectional association>)
	relation 3675778 --->
	  a role_name "FINEST" init_value " new Level(\"FINEST\", 300, defaultBundle)" class_relation const_relation public
	    comment "
FINEST indicates a highly detailed tracing message.
This level is initialized to <CODE>300</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3675778 // FINEST (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      classrelation 3675906 // ALL (<unidirectional association>)
	relation 3675906 --->
	  a role_name "ALL" init_value " new Level(\"ALL\", Integer.MIN_VALUE, defaultBundle)" class_relation const_relation public
	    comment "
ALL indicates that all messages should be logged.
This level is initialized to <CODE>Integer.MIN_VALUE</CODE>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3675906 // ALL (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      operation 9377154 "Level"
	protected explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a named Level with a given integer value.
<p>
Note that this constructor is \"protected\" to allow subclassing.
In general clients of logging should use one of the constant Level
objects such as SEVERE or FINEST.  However, if clients need to
add new logging levels, they may subclass Level and define new
constants.
@param name  the name of the Level, for example \"SEVERE\".
@param value an integer value for the level.
@throws NullPointerException if the name is null
"
      end

      operation 9377282 "Level"
	protected explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param in name "value" explicit_type "int"
	  param inout name "resourceBundleName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a named Level with a given integer value and a
given localization resource name.
<p>
@param name  the name of the Level, for example \"SEVERE\".
@param value an integer value for the level.
@param resourceBundleName name of a resource bundle to use in
   localizing the given name. If the resourceBundleName is null
   or an empty string, it is ignored.
@throws NullPointerException if the name is null
"
      end

      operation 9377410 "Level"
	private explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param in name "value" explicit_type "int"
	  param inout name "resourceBundleName" type class_ref 128130 // String
	  param inout name "visible" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " private constructor to specify whether this instance should be added
 to the KnownLevel list from which Level.parse method does its look up"
      end

      operation 9377538 "getResourceBundleName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the level's localization resource bundle name, or
null if no localization bundle is defined.

@return localization resource bundle name
"
      end

      operation 9377666 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the non-localized string name of the Level.

@return non-localized name
"
      end

      operation 9377794 "getLocalizedName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the localized string name of the Level, for
the current default locale.
<p>
If no localization information is available, the
non-localized name is returned.

@return localized name
"
      end

      operation 9377922 "getLevelName"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " package-private getLevelName() is used by the implementation
 instead of getName() to avoid calling the subclass's version"
      end

      operation 9378050 "computeLocalizedLevelName"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "newLocale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9378178 "getCachedLocalizedLevelName"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Avoid looking up the localizedLevelName twice if we already
 have it."
      end

      operation 9378306 "getLocalizedLevelName"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9378434 "findLevel"
	class_operation package return_type class_ref 215426 // Level
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a mirrored Level object that matches the given name as
 specified in the Level.parse method.  Returns null if not found.

 It returns the same Level object as the one returned by Level.parse
 method if the given name is a non-localized name or integer.

 If the name is a localized name, findLevel and parse method may
 return a different level value if there is a custom Level subclass
 that overrides Level.getLocalizedName() to return a different string
 than what's returned by the default implementation.
"
      end

      operation 9378562 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string representation of this Level.

@return the non-localized name of the Level, for example \"INFO\".
"
      end

      operation 9378690 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the integer value for this level.  This integer value
can be used for efficient ordering comparisons between
Level objects.
@return the integer value for this level.
"
      end

      attribute 2189826 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8176160795706313070L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9378818 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Serialization magic to prevent \"doppelgangers\".
 This is a performance optimization."
      end

      operation 9378946 "parse"
	class_operation public return_type class_ref 215426 // Level
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse a level name string into a Level.
<p>
The argument string may consist of either a level name
or an integer value.
<p>
For example:
<ul>
<li>     \"SEVERE\"
<li>     \"1000\"
</ul>

@param  name   string to be parsed
@throws NullPointerException if the name is null
@throws IllegalArgumentException if the value is not valid.
Valid values are integers between <CODE>Integer.MIN_VALUE</CODE>
and <CODE>Integer.MAX_VALUE</CODE>, and all known level names.
Known names are the levels defined by this class (e.g., <CODE>FINE</CODE>,
<CODE>FINER</CODE>, <CODE>FINEST</CODE>), or created by this class with
appropriate package access, or new levels defined or created
by subclasses.

@return The parsed value. Passing an integer that corresponds to a known name
(e.g., 700) will return the associated name (e.g., <CODE>CONFIG</CODE>).
Passing an integer that does not (e.g., 1) will return a new level name
initialized to that value.
"
      end

      operation 9379074 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ox" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compare two objects for value equality.
@return true if and only if the two objects have the same level value.
"
      end

      operation 9379202 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Generate a hashcode.
@return a hashcode based on the level value
"
      end

      class 1139458 "KnownLevel"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3676034 // nameToLevels (<unidirectional association>)
	  relation 3676034 --->
	    a role_name "nameToLevels" init_value " new HashMap<>()" class_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, List<KnownLevel>> ${name}${value};
"
	      classrelation_ref 3676034 // nameToLevels (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	classrelation 3676162 // intToLevels (<unidirectional association>)
	  relation 3676162 --->
	    a role_name "intToLevels" init_value " new HashMap<>()" class_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer, List<KnownLevel>> ${name}${value};
"
	      classrelation_ref 3676162 // intToLevels (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	classrelation 3676290 // levelObject (<unidirectional association>)
	  relation 3676290 --->
	    a role_name "levelObject" const_relation package
	      comment " instance of Level class or Level subclass"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3676290 // levelObject (<unidirectional association>)
	    b parent class_ref 215426 // Level
	end

	classrelation 3676418 // mirroredLevel (<unidirectional association>)
	  relation 3676418 --->
	    a role_name "mirroredLevel" const_relation package
	      comment " mirror of the custom Level"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3676418 // mirroredLevel (<unidirectional association>)
	    b parent class_ref 215426 // Level
	end

	operation 9379330 "KnownLevel"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "l" type class_ref 215426 // Level
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9379458 "add"
	  class_operation package explicit_return_type "void"
	  nparams 1
	    param inout name "l" type class_ref 215426 // Level
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9379586 "findByName"
	  class_operation package return_type class_ref 1139458 // KnownLevel
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns a KnownLevel with the given non-localized name."
	end

	operation 9379714 "findByValue"
	  class_operation package return_type class_ref 1139458 // KnownLevel
	  nparams 1
	    param in name "value" explicit_type "int"
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns a KnownLevel with the given value."
	end

	operation 9379842 "findByLocalizedLevelName"
	  class_operation package return_type class_ref 1139458 // KnownLevel
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns a KnownLevel with the given localized name matching
 by calling the Level.getLocalizedLevelName() method (i.e. found
 from the resourceBundle associated with the Level object).
 This method does not call Level.getLocalizedName() that may
 be overridden in a subclass implementation"
	end

	operation 9379970 "matches"
	  class_operation package return_type class_ref 1139458 // KnownLevel
	  nparams 1
	    param inout name "l" type class_ref 215426 // Level
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 215554 "LogRecord"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "LogRecord objects are used to pass logging requests between
the logging framework and individual log Handlers.
<p>
When a LogRecord is passed into the logging framework it
logically belongs to the framework and should no longer be
used or updated by the client application.
<p>
Note that if the client application has not specified an
explicit source method name and source class name, then the
LogRecord class will infer them automatically when they are
first accessed (due to a call on getSourceMethodName or
getSourceClassName) by analyzing the call stack.  Therefore,
if a logging Handler wants to pass off a LogRecord to another
thread, or to transmit it over RMI, and if it wishes to subsequently
obtain method name or class name information it should call
one of getSourceClassName or getSourceMethodName to force
the values to be filled in.
<p>
<b> Serialization notes:</b>
<ul>
<li>The LogRecord class is serializable.

<li> Because objects in the parameters array may not be serializable,
during serialization all objects in the parameters array are
written as the corresponding Strings (using Object.toString).

<li> The ResourceBundle is not transmitted as part of the serialized
form, but the resource bundle name is, and the recipient object's
readObject method will attempt to locate a suitable resource bundle.

</ul>

@since 1.4
"
      classrelation 3683586 // <realization>
	relation 3683586 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3683586 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3683714 // globalSequenceNumber (<unidirectional association>)
	relation 3683714 --->
	  a role_name "globalSequenceNumber" init_value " new AtomicLong(0)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3683714 // globalSequenceNumber (<unidirectional association>)
	  b parent class_ref 256386 // AtomicLong
      end

      attribute 2191874 "MIN_SEQUENTIAL_THREAD_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.MAX_VALUE / 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The default value of threadID will be the current thread's
thread id, for ease of correlation, unless it is greater than
MIN_SEQUENTIAL_THREAD_ID, in which case we try harder to keep
our promise to keep threadIDs unique by avoiding collisions due
to 32-bit wraparound.  Unfortunately, LogRecord.getThreadID()
returns int, while Thread.getId() returns long.

"
      end

      classrelation 3683842 // nextThreadId (<unidirectional association>)
	relation 3683842 --->
	  a role_name "nextThreadId" init_value " new AtomicInteger(MIN_SEQUENTIAL_THREAD_ID)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3683842 // nextThreadId (<unidirectional association>)
	  b parent class_ref 191490 // AtomicInteger
      end

      classrelation 3683970 // threadIds (<unidirectional association>)
	relation 3683970 --->
	  a role_name "threadIds" init_value " new ThreadLocal<>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer> ${name}${value};
"
	    classrelation_ref 3683970 // threadIds (<unidirectional association>)
	  b parent class_ref 129282 // ThreadLocal
      end

      classrelation 3684098 // level (<unidirectional association>)
	relation 3684098 --->
	  a role_name "level" private
	    comment "
@serial Logging message level

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3684098 // level (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      attribute 2192002 "sequenceNumber"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial Sequence number

"
      end

      classrelation 3684226 // sourceClassName (<unidirectional association>)
	relation 3684226 --->
	  a role_name "sourceClassName" private
	    comment "
@serial Class that issued logging call

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3684226 // sourceClassName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3684354 // sourceMethodName (<unidirectional association>)
	relation 3684354 --->
	  a role_name "sourceMethodName" private
	    comment "
@serial Method that issued logging call

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3684354 // sourceMethodName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3684482 // message (<unidirectional association>)
	relation 3684482 --->
	  a role_name "message" private
	    comment "
@serial Non-localized raw message text

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3684482 // message (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2192130 "threadID"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial Thread ID for thread that issued logging call.

"
      end

      attribute 2192258 "millis"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial Event time in milliseconds since 1970

"
      end

      classrelation 3684610 // thrown (<unidirectional association>)
	relation 3684610 --->
	  a role_name "thrown" private
	    comment "
@serial The Throwable (if any) associated with log message

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3684610 // thrown (<unidirectional association>)
	  b parent class_ref 129922 // Throwable
      end

      classrelation 3684738 // loggerName (<unidirectional association>)
	relation 3684738 --->
	  a role_name "loggerName" private
	    comment "
@serial Name of the source Logger.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3684738 // loggerName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3684866 // resourceBundleName (<unidirectional association>)
	relation 3684866 --->
	  a role_name "resourceBundleName" private
	    comment "
@serial Resource bundle name to localized log message.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3684866 // resourceBundleName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2192386 "needToInferCaller"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3684994 // parameters (<unidirectional association>)
	relation 3684994 --->
	  a role_name "parameters" multiplicity "[]" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3684994 // parameters (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3685122 // resourceBundle (<unidirectional association>)
	relation 3685122 --->
	  a role_name "resourceBundle" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3685122 // resourceBundle (<unidirectional association>)
	  b parent class_ref 249858 // ResourceBundle
      end

      operation 9403650 "defaultThreadID"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default value for a new LogRecord's threadID.
"
      end

      operation 9403778 "LogRecord"
	public explicit_return_type ""
	nparams 2
	  param inout name "level" type class_ref 215426 // Level
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a LogRecord with the given level and message values.
<p>
The sequence property will be initialized with a new unique value.
These sequence values are allocated in increasing order within a VM.
<p>
The millis property will be initialized to the current time.
<p>
The thread ID property will be initialized with a unique ID for
the current thread.
<p>
All other properties will be initialized to \"null\".

@param level  a logging level value
@param msg  the raw non-localized logging message (may be null)
"
      end

      operation 9403906 "getLoggerName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the source Logger's name.

@return source logger name (may be null)
"
      end

      operation 9404034 "setLoggerName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the source Logger's name.

@param name   the source logger name (may be null)
"
      end

      operation 9404162 "getResourceBundle"
	public return_type class_ref 249858 // ResourceBundle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the localization resource bundle
<p>
This is the ResourceBundle that should be used to localize
the message string before formatting it.  The result may
be null if the message is not localizable, or if no suitable
ResourceBundle is available.
@return the localization resource bundle
"
      end

      operation 9404290 "setResourceBundle"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bundle" type class_ref 249858 // ResourceBundle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the localization resource bundle.

@param bundle  localization bundle (may be null)
"
      end

      operation 9404418 "getResourceBundleName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the localization resource bundle name
<p>
This is the name for the ResourceBundle that should be
used to localize the message string before formatting it.
The result may be null if the message is not localizable.
@return the localization resource bundle name
"
      end

      operation 9404546 "setResourceBundleName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the localization resource bundle name.

@param name  localization bundle name (may be null)
"
      end

      operation 9404674 "getLevel"
	public return_type class_ref 215426 // Level
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the logging message level, for example Level.SEVERE.
@return the logging message level
"
      end

      operation 9404802 "setLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "level" type class_ref 215426 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the logging message level, for example Level.SEVERE.
@param level the logging message level
"
      end

      operation 9404930 "getSequenceNumber"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the sequence number.
<p>
Sequence numbers are normally assigned in the LogRecord
constructor, which assigns unique sequence numbers to
each new LogRecord in increasing order.
@return the sequence number
"
      end

      operation 9405058 "setSequenceNumber"
	public explicit_return_type "void"
	nparams 1
	  param in name "seq" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the sequence number.
<p>
Sequence numbers are normally assigned in the LogRecord constructor,
so it should not normally be necessary to use this method.
@param seq the sequence number
"
      end

      operation 9405186 "getSourceClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the  name of the class that (allegedly) issued the logging request.
<p>
Note that this sourceClassName is not verified and may be spoofed.
This information may either have been provided as part of the
logging call, or it may have been inferred automatically by the
logging framework.  In the latter case, the information may only
be approximate and may in fact describe an earlier call on the
stack frame.
<p>
May be null if no information could be obtained.

@return the source class name
"
      end

      operation 9405314 "setSourceClassName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sourceClassName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the name of the class that (allegedly) issued the logging request.

@param sourceClassName the source class name (may be null)
"
      end

      operation 9405442 "getSourceMethodName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the  name of the method that (allegedly) issued the logging request.
<p>
Note that this sourceMethodName is not verified and may be spoofed.
This information may either have been provided as part of the
logging call, or it may have been inferred automatically by the
logging framework.  In the latter case, the information may only
be approximate and may in fact describe an earlier call on the
stack frame.
<p>
May be null if no information could be obtained.

@return the source method name
"
      end

      operation 9405570 "setSourceMethodName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sourceMethodName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the name of the method that (allegedly) issued the logging request.

@param sourceMethodName the source method name (may be null)
"
      end

      operation 9405698 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the \"raw\" log message, before localization or formatting.
<p>
May be null, which is equivalent to the empty string \"\".
<p>
This message may be either the final text or a localization key.
<p>
During formatting, if the source logger has a localization
ResourceBundle and if that ResourceBundle has an entry for
this message string, then the message string is replaced
with the localized value.

@return the raw message string
"
      end

      operation 9405826 "setMessage"
	public explicit_return_type "void"
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the \"raw\" log message, before localization or formatting.

@param message the raw message string (may be null)
"
      end

      operation 9405954 "getParameters"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the parameters to the log message.

@return the log message parameters.  May be null if
                 there are no parameters.
"
      end

      operation 9406082 "setParameters"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parameters" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the parameters to the log message.

@param parameters the log message parameters. (may be null)
"
      end

      operation 9406210 "getThreadID"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an identifier for the thread where the message originated.
<p>
This is a thread identifier within the Java VM and may or
may not map to any operating system ID.

@return thread ID
"
      end

      operation 9406338 "setThreadID"
	public explicit_return_type "void"
	nparams 1
	  param in name "threadID" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set an identifier for the thread where the message originated.
@param threadID  the thread ID
"
      end

      operation 9406466 "getMillis"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get event time in milliseconds since 1970.

@return event time in millis since 1970
"
      end

      operation 9406594 "setMillis"
	public explicit_return_type "void"
	nparams 1
	  param in name "millis" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set event time.

@param millis event time in millis since 1970
"
      end

      operation 9406722 "getThrown"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get any throwable associated with the log record.
<p>
If the event involved an exception, this will be the
exception object. Otherwise null.

@return a throwable
"
      end

      operation 9406850 "setThrown"
	public explicit_return_type "void"
	nparams 1
	  param inout name "thrown" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a throwable associated with the log event.

@param thrown  a throwable (may be null)
"
      end

      attribute 2192514 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5372048053134512534L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9406978 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@serialData Default fields, followed by a two byte version number
(major byte, followed by minor byte), followed by information on
the log record parameter array.  If there is no parameter array,
then -1 is written.  If there is a parameter array (possible of zero
length) then the array length is written as an integer, followed
by String values for each parameter.  If a parameter is null, then
a null String is written.  Otherwise the output of Object.toString()
is written.
"
      end

      operation 9407106 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9407234 "inferCaller"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to infer the caller's class and method names"
      end

      operation 9407362 "isLoggerImplFrame"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "cname" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1138178 "ConsoleHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This <tt>Handler</tt> publishes log records to <tt>System.err</tt>.
By default the <tt>SimpleFormatter</tt> is used to generate brief summaries.
<p>
<b>Configuration:</b>
By default each <tt>ConsoleHandler</tt> is initialized using the following
<tt>LogManager</tt> configuration properties where {@code <handler-name>}
refers to the fully-qualified class name of the handler.
If properties are not defined
(or have invalid values) then the specified default values are used.
<ul>
<li>   &lt;handler-name&gt;.level
       specifies the default level for the <tt>Handler</tt>
       (defaults to <tt>Level.INFO</tt>). </li>
<li>   &lt;handler-name&gt;.filter
       specifies the name of a <tt>Filter</tt> class to use
       (defaults to no <tt>Filter</tt>). </li>
<li>   &lt;handler-name&gt;.formatter
       specifies the name of a <tt>Formatter</tt> class to use
       (defaults to <tt>java.util.logging.SimpleFormatter</tt>). </li>
<li>   &lt;handler-name&gt;.encoding
       the name of the character set encoding to use (defaults to
       the default platform encoding). </li>
</ul>
<p>
For example, the properties for {@code ConsoleHandler} would be:
<ul>
<li>   java.util.logging.ConsoleHandler.level=INFO </li>
<li>   java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter </li>
</ul>
<p>
For a custom handler, e.g. com.foo.MyHandler, the properties would be:
<ul>
<li>   com.foo.MyHandler.level=INFO </li>
<li>   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter </li>
</ul>
<p>
@since 1.4
"
      classrelation 3672578 // <generalisation>
	relation 3672578 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3672578 // <generalisation>
	  b parent class_ref 1138306 // StreamHandler
      end

      operation 9373058 "configure"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to configure a ConsoleHandler from LogManager
 properties and/or default values as specified in the class
 javadoc."
      end

      operation 9373186 "ConsoleHandler"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>ConsoleHandler</tt> for <tt>System.err</tt>.
<p>
The <tt>ConsoleHandler</tt> is configured based on
<tt>LogManager</tt> properties (or their default values).

"
      end

      operation 9373314 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Publish a <tt>LogRecord</tt>.
<p>
The logging request was made initially to a <tt>Logger</tt> object,
which initialized the <tt>LogRecord</tt> and forwarded it here.
<p>
@param  record  description of the log event. A null record is
                silently ignored and is not published
"
      end

      operation 9373442 "close"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Override <tt>StreamHandler.close</tt> to do a flush but not
to close the output stream.  That is, we do <b>not</b>
close <tt>System.err</tt>.
"
      end
    end

    class 1138306 "StreamHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Stream based logging <tt>Handler</tt>.
<p>
This is primarily intended as a base class or support class to
be used in implementing other logging <tt>Handlers</tt>.
<p>
<tt>LogRecords</tt> are published to a given <tt>java.io.OutputStream</tt>.
<p>
<b>Configuration:</b>
By default each <tt>StreamHandler</tt> is initialized using the following
<tt>LogManager</tt> configuration properties where <tt>&lt;handler-name&gt;</tt>
refers to the fully-qualified class name of the handler.
If properties are not defined
(or have invalid values) then the specified default values are used.
<ul>
<li>   &lt;handler-name&gt;.level
       specifies the default level for the <tt>Handler</tt>
       (defaults to <tt>Level.INFO</tt>). </li>
<li>   &lt;handler-name&gt;.filter
       specifies the name of a <tt>Filter</tt> class to use
        (defaults to no <tt>Filter</tt>). </li>
<li>   &lt;handler-name&gt;.formatter
       specifies the name of a <tt>Formatter</tt> class to use
       (defaults to <tt>java.util.logging.SimpleFormatter</tt>). </li>
<li>   &lt;handler-name&gt;.encoding
       the name of the character set encoding to use (defaults to
       the default platform encoding). </li>
</ul>
<p>
For example, the properties for {@code StreamHandler} would be:
<ul>
<li>   java.util.logging.StreamHandler.level=INFO </li>
<li>   java.util.logging.StreamHandler.formatter=java.util.logging.SimpleFormatter </li>
</ul>
<p>
For a custom handler, e.g. com.foo.MyHandler, the properties would be:
<ul>
<li>   com.foo.MyHandler.level=INFO </li>
<li>   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter </li>
</ul>
<p>
@since 1.4
"
      classrelation 3672194 // <generalisation>
	relation 3672194 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3672194 // <generalisation>
	  b parent class_ref 1138434 // Handler
      end

      classrelation 3672322 // output (<unidirectional association>)
	relation 3672322 --->
	  a role_name "output" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3672322 // output (<unidirectional association>)
	  b parent class_ref 151298 // OutputStream
      end

      attribute 2188034 "doneHeader"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3672450 // writer (<unidirectional association>)
	relation 3672450 --->
	  a role_name "writer" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3672450 // writer (<unidirectional association>)
	  b parent class_ref 428034 // Writer
      end

      operation 9371778 "configure"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to configure a StreamHandler from LogManager
 properties and/or default values as specified in the class
 javadoc."
      end

      operation 9371906 "StreamHandler"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>StreamHandler</tt>, with no current output stream.
"
      end

      operation 9372034 "StreamHandler"
	public explicit_return_type ""
	nparams 2
	  param inout name "out" type class_ref 151298 // OutputStream
	  param inout name "formatter" type class_ref 1138818 // Formatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>StreamHandler</tt> with a given <tt>Formatter</tt>
and output stream.
<p>
@param out         the target output stream
@param formatter   Formatter to be used to format output
"
      end

      operation 9372162 "setOutputStream"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Change the output stream.
<P>
If there is a current output stream then the <tt>Formatter</tt>'s
tail string is written and the stream is flushed and closed.
Then the output stream is replaced with the new output stream.

@param out   New output stream.  May not be null.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
"
      end

      operation 9372290 "setEncoding"
	public explicit_return_type "void"
	nparams 1
	  param inout name "encoding" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 171138 // SecurityException
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Set (or change) the character encoding used by this <tt>Handler</tt>.
<p>
The encoding should be set before any <tt>LogRecords</tt> are written
to the <tt>Handler</tt>.

@param encoding  The name of a supported character encoding.
       May be null, to indicate the default platform encoding.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception  UnsupportedEncodingException if the named encoding is
         not supported.
"
      end

      operation 9372418 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Format and publish a <tt>LogRecord</tt>.
<p>
The <tt>StreamHandler</tt> first checks if there is an <tt>OutputStream</tt>
and if the given <tt>LogRecord</tt> has at least the required log level.
If not it silently returns.  If so, it calls any associated
<tt>Filter</tt> to check if the record should be published.  If so,
it calls its <tt>Formatter</tt> to format the record and then writes
the result to the current output stream.
<p>
If this is the first <tt>LogRecord</tt> to be written to a given
<tt>OutputStream</tt>, the <tt>Formatter</tt>'s \"head\" string is
written to the stream before the <tt>LogRecord</tt> is written.

@param  record  description of the log event. A null record is
                silently ignored and is not published
"
      end

      operation 9372546 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.
<p>
This method checks if the <tt>LogRecord</tt> has an appropriate level and
whether it satisfies any <tt>Filter</tt>.  It will also return false if
no output stream has been assigned yet or the LogRecord is null.
<p>
@param record  a <tt>LogRecord</tt>
@return true if the <tt>LogRecord</tt> would be logged.

"
      end

      operation 9372674 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Flush any buffered messages.
"
      end

      operation 9372802 "flushAndClose"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9372930 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Close the current output stream.
<p>
The <tt>Formatter</tt>'s \"tail\" string is written to the stream before it
is closed.  In addition, if the <tt>Formatter</tt>'s \"head\" string has not
yet been written to the stream, it will be written before the
\"tail\" string.

@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\").
"
      end
    end

    class 1138434 "Handler"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <tt>Handler</tt> object takes log messages from a <tt>Logger</tt> and
exports them.  It might for example, write them to a console
or write them to a file, or send them to a network logging service,
or forward them to an OS log, or whatever.
<p>
A <tt>Handler</tt> can be disabled by doing a <tt>setLevel(Level.OFF)</tt>
and can  be re-enabled by doing a <tt>setLevel</tt> with an appropriate level.
<p>
<tt>Handler</tt> classes typically use <tt>LogManager</tt> properties to set
default values for the <tt>Handler</tt>'s <tt>Filter</tt>, <tt>Formatter</tt>,
and <tt>Level</tt>.  See the specific documentation for each concrete
<tt>Handler</tt> class.


@since 1.4
"
      attribute 2187778 "offValue"
	class_attribute const_attribute private explicit_type "int"
	init_value " Level.OFF.intValue()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3671426 // manager (<unidirectional association>)
	relation 3671426 --->
	  a role_name "manager" init_value " LogManager.getLogManager()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3671426 // manager (<unidirectional association>)
	  b parent class_ref 1138562 // LogManager
      end

      classrelation 3671554 // filter (<unidirectional association>)
	relation 3671554 --->
	  a role_name "filter" volatile private
	    comment " We're using volatile here to avoid synchronizing getters, which
 would prevent other threads from calling isLoggable()
 while publish() is executing.
 On the other hand, setters will be synchronized to exclude concurrent
 execution with more complex methods, such as StreamHandler.publish().
 We wouldn't want 'level' to be changed by another thread in the middle
 of the execution of a 'publish' call.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3671554 // filter (<unidirectional association>)
	  b parent class_ref 1138690 // Filter
      end

      classrelation 3671682 // formatter (<unidirectional association>)
	relation 3671682 --->
	  a role_name "formatter" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3671682 // formatter (<unidirectional association>)
	  b parent class_ref 1138818 // Formatter
      end

      classrelation 3671810 // logLevel (<unidirectional association>)
	relation 3671810 --->
	  a role_name "logLevel" init_value " Level.ALL" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3671810 // logLevel (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      classrelation 3671938 // errorManager (<unidirectional association>)
	relation 3671938 --->
	  a role_name "errorManager" init_value " new ErrorManager()" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3671938 // errorManager (<unidirectional association>)
	  b parent class_ref 1138946 // ErrorManager
      end

      classrelation 3672066 // encoding (<unidirectional association>)
	relation 3672066 --->
	  a role_name "encoding" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3672066 // encoding (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2187906 "sealed"
	package explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Package private support for security checking.  When sealed
 is true, we access check updates to the class.
"
      end

      operation 9369602 "Handler"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.  The resulting <tt>Handler</tt> has a log
level of <tt>Level.ALL</tt>, no <tt>Formatter</tt>, and no
<tt>Filter</tt>.  A default <tt>ErrorManager</tt> instance is installed
as the <tt>ErrorManager</tt>.
"
      end

      operation 9369730 "publish"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Publish a <tt>LogRecord</tt>.
<p>
The logging request was made initially to a <tt>Logger</tt> object,
which initialized the <tt>LogRecord</tt> and forwarded it here.
<p>
The <tt>Handler</tt>  is responsible for formatting the message, when and
if necessary.  The formatting should include localization.

@param  record  description of the log event. A null record is
                silently ignored and is not published
"
      end

      operation 9369858 "flush"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flush any buffered output.
"
      end

      operation 9369986 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the <tt>Handler</tt> and free all associated resources.
<p>
The close method will perform a <tt>flush</tt> and then close the
<tt>Handler</tt>.   After close has been called this <tt>Handler</tt>
should no longer be used.  Method calls may either be silently
ignored or may throw runtime exceptions.

@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
"
      end

      operation 9370114 "setFormatter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFormatter" type class_ref 1138818 // Formatter
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a <tt>Formatter</tt>.  This <tt>Formatter</tt> will be used
to format <tt>LogRecords</tt> for this <tt>Handler</tt>.
<p>
Some <tt>Handlers</tt> may not use <tt>Formatters</tt>, in
which case the <tt>Formatter</tt> will be remembered, but not used.
<p>
@param newFormatter the <tt>Formatter</tt> to use (may not be null)
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
"
      end

      operation 9370242 "getFormatter"
	public return_type class_ref 1138818 // Formatter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the <tt>Formatter</tt> for this <tt>Handler</tt>.
@return the <tt>Formatter</tt> (may be null).
"
      end

      operation 9370370 "setEncoding"
	public explicit_return_type "void"
	nparams 1
	  param inout name "encoding" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 171138 // SecurityException
	  exception class_ref 173826 // UnsupportedEncodingException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the character encoding used by this <tt>Handler</tt>.
<p>
The encoding should be set before any <tt>LogRecords</tt> are written
to the <tt>Handler</tt>.

@param encoding  The name of a supported character encoding.
       May be null, to indicate the default platform encoding.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception  UnsupportedEncodingException if the named encoding is
         not supported.
"
      end

      operation 9370498 "getEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the character encoding for this <tt>Handler</tt>.

@return  The encoding name.  May be null, which indicates the
         default encoding should be used.
"
      end

      operation 9370626 "setFilter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newFilter" type class_ref 1138690 // Filter
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a <tt>Filter</tt> to control output on this <tt>Handler</tt>.
<P>
For each call of <tt>publish</tt> the <tt>Handler</tt> will call
this <tt>Filter</tt> (if it is non-null) to check if the
<tt>LogRecord</tt> should be published or discarded.

@param   newFilter  a <tt>Filter</tt> object (may be null)
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
"
      end

      operation 9370754 "getFilter"
	public return_type class_ref 1138690 // Filter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current <tt>Filter</tt> for this <tt>Handler</tt>.

@return  a <tt>Filter</tt> object (may be null)
"
      end

      operation 9370882 "setErrorManager"
	public explicit_return_type "void"
	nparams 1
	  param inout name "em" type class_ref 1138946 // ErrorManager
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Define an ErrorManager for this Handler.
<p>
The ErrorManager's \"error\" method will be invoked if any
errors occur while using this Handler.

@param em  the new ErrorManager
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
"
      end

      operation 9371010 "getErrorManager"
	public return_type class_ref 1138946 // ErrorManager
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the ErrorManager for this Handler.

@return the ErrorManager for this Handler
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
"
      end

      operation 9371138 "reportError"
	protected explicit_return_type "void"
	nparams 3
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "ex" type class_ref 132226 // Exception
	  param in name "code" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected convenience method to report an error to this Handler's
ErrorManager.  Note that this method retrieves and uses the ErrorManager
without doing a security check.  It can therefore be used in
environments where the caller may be non-privileged.

@param msg    a descriptive string (may be null)
@param ex     an exception (may be null)
@param code   an error code defined in ErrorManager
"
      end

      operation 9371266 "setLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newLevel" type class_ref 215426 // Level
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the log level specifying which message levels will be
logged by this <tt>Handler</tt>.  Message levels lower than this
value will be discarded.
<p>
The intention is to allow developers to turn on voluminous
logging, but to limit the messages that are sent to certain
<tt>Handlers</tt>.

@param newLevel   the new value for the log level
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
"
      end

      operation 9371394 "getLevel"
	public return_type class_ref 215426 // Level
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the log level specifying which messages will be
logged by this <tt>Handler</tt>.  Message levels lower
than this level will be discarded.
@return  the level of messages being logged.
"
      end

      operation 9371522 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.
<p>
This method checks if the <tt>LogRecord</tt> has an appropriate
<tt>Level</tt> and  whether it satisfies any <tt>Filter</tt>.  It also
may make other <tt>Handler</tt> specific checks that might prevent a
handler from logging the <tt>LogRecord</tt>. It will return false if
the <tt>LogRecord</tt> is null.
<p>
@param record  a <tt>LogRecord</tt>
@return true if the <tt>LogRecord</tt> would be logged.

"
      end

      operation 9371650 "checkPermission"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package-private support method for security checks.
 If \"sealed\" is true, we check that the caller has
 appropriate security privileges to update Handler
 state and if not throw a SecurityException."
      end
    end

    class 1138562 "LogManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "There is a single global LogManager object that is used to
maintain a set of shared state about Loggers and log services.
<p>
This LogManager object:
<ul>
<li> Manages a hierarchical namespace of Logger objects.  All
     named Loggers are stored in this namespace.
<li> Manages a set of logging control properties.  These are
     simple key-value pairs that can be used by Handlers and
     other logging objects to configure themselves.
</ul>
<p>
The global LogManager object can be retrieved using LogManager.getLogManager().
The LogManager object is created during class initialization and
cannot subsequently be changed.
<p>
At startup the LogManager class is located using the
java.util.logging.manager system property.
<p>
The LogManager defines two optional system properties that allow control over
the initial configuration:
<ul>
<li>\"java.util.logging.config.class\"
<li>\"java.util.logging.config.file\"
</ul>
These two properties may be specified on the command line to the \"java\"
command, or as system property definitions passed to JNI_CreateJavaVM.
<p>
If the \"java.util.logging.config.class\" property is set, then the
property value is treated as a class name.  The given class will be
loaded, an object will be instantiated, and that object's constructor
is responsible for reading in the initial configuration.  (That object
may use other system properties to control its configuration.)  The
alternate configuration class can use <tt>readConfiguration(InputStream)</tt>
to define properties in the LogManager.
<p>
If \"java.util.logging.config.class\" property is <b>not</b> set,
then the \"java.util.logging.config.file\" system property can be used
to specify a properties file (in java.util.Properties format). The
initial logging configuration will be read from this file.
<p>
If neither of these properties is defined then the LogManager uses its
default configuration. The default configuration is typically loaded from the
properties file \"{@code lib/logging.properties}\" in the Java installation
directory.
<p>
The properties for loggers and Handlers will have names starting
with the dot-separated name for the handler or logger.
<p>
The global logging properties may include:
<ul>
<li>A property \"handlers\".  This defines a whitespace or comma separated
list of class names for handler classes to load and register as
handlers on the root Logger (the Logger named \"\").  Each class
name must be for a Handler class which has a default constructor.
Note that these Handlers may be created lazily, when they are
first used.

<li>A property \"&lt;logger&gt;.handlers\". This defines a whitespace or
comma separated list of class names for handlers classes to
load and register as handlers to the specified logger. Each class
name must be for a Handler class which has a default constructor.
Note that these Handlers may be created lazily, when they are
first used.

<li>A property \"&lt;logger&gt;.useParentHandlers\". This defines a boolean
value. By default every logger calls its parent in addition to
handling the logging message itself, this often result in messages
being handled by the root logger as well. When setting this property
to false a Handler needs to be configured for this logger otherwise
no logging messages are delivered.

<li>A property \"config\".  This property is intended to allow
arbitrary configuration code to be run.  The property defines a
whitespace or comma separated list of class names.  A new instance will be
created for each named class.  The default constructor of each class
may execute arbitrary code to update the logging configuration, such as
setting logger levels, adding handlers, adding filters, etc.
</ul>
<p>
Note that all classes loaded during LogManager configuration are
first searched on the system class path before any user class path.
That includes the LogManager class, any config classes, and any
handler classes.
<p>
Loggers are organized into a naming hierarchy based on their
dot separated names.  Thus \"a.b.c\" is a child of \"a.b\", but
\"a.b1\" and a.b2\" are peers.
<p>
All properties whose names end with \".level\" are assumed to define
log levels for Loggers.  Thus \"foo.level\" defines a log level for
the logger called \"foo\" and (recursively) for any of its children
in the naming hierarchy.  Log Levels are applied in the order they
are defined in the properties file.  Thus level settings for child
nodes in the tree should come after settings for their parents.
The property name \".level\" can be used to set the level for the
root of the tree.
<p>
All methods on the LogManager object are multi-thread safe.

@since 1.4
"
      class 1139714 "LoggerWeakRef"
	visibility package 
	nactuals 1
	actual class class_ref 131330 // WeakReference
	  rank 0 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3681538 // <realization>
	  relation 3681538 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3681538 // <realization>
	    b parent class_ref 131330 // WeakReference
	end

	classrelation 3681666 // name (<unidirectional association>)
	  relation 3681666 --->
	    a role_name "name" private
	      comment " for namedLoggers cleanup"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3681666 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3681794 // node (<unidirectional association>)
	  relation 3681794 --->
	    a role_name "node" private
	      comment " for loggerRef cleanup"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3681794 // node (<unidirectional association>)
	    b parent class_ref 1140866 // LogNode
	end

	classrelation 3681922 // parentRef (<unidirectional association>)
	  relation 3681922 --->
	    a role_name "parentRef" private
	      comment " for kids cleanup"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Logger> ${name}${value};
"
	      classrelation_ref 3681922 // parentRef (<unidirectional association>)
	    b parent class_ref 131330 // WeakReference
	end

	attribute 2191618 "disposed"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " avoid calling dispose twice"
	end

	operation 9398530 "LoggerWeakRef"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "logger" type class_ref 215298 // Logger
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9398658 "dispose"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " dispose of this LoggerWeakRef object"
	end

	operation 9398786 "setNode"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 1140866 // LogNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " set the node field to the specified value"
	end

	operation 9398914 "setParentRef"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "parentRef" type class_ref 131330 // WeakReference
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Logger> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " set the parentRef field to the specified value"
	end
      end

      classrelation 3679874 // manager (<unidirectional association>)
	relation 3679874 --->
	  a role_name "manager" class_relation const_relation private
	    comment " The global LogManager object
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3679874 // manager (<unidirectional association>)
	  b parent class_ref 1138562 // LogManager
      end

      classrelation 3680002 // props (<unidirectional association>)
	relation 3680002 --->
	  a role_name "props" init_value " new Properties()" volatile private
	    comment " 'props' is assigned within a lock but accessed without it.
 Declaring it volatile makes sure that another thread will not
 be able to see a partially constructed 'props' object.
 (seeing a partially constructed 'props' object can result in
 NPE being thrown in Hashtable.get(), because it leaves the door
 open for props.getProperties() to be called before the construcor
 of Hashtable is actually completed).
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3680002 // props (<unidirectional association>)
	  b parent class_ref 240130 // Properties
      end

      classrelation 3680130 // defaultLevel (<unidirectional association>)
	relation 3680130 --->
	  a role_name "defaultLevel" init_value " Level.INFO" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3680130 // defaultLevel (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      classrelation 3680258 // listenerMap (<unidirectional association>)
	relation 3680258 --->
	  a role_name "listenerMap" init_value " new HashMap<>()" const_relation private
	    comment " The map of the registered listeners. The map value is the registration
 count to allow for cases where the same listener is registered many times.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object,Integer> ${name}${value};
"
	    classrelation_ref 3680258 // listenerMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      class 1140610 "LoggerContext"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3681026 // namedLoggers (<unidirectional association>)
	  relation 3681026 --->
	    a role_name "namedLoggers" init_value " new Hashtable<>()" const_relation private
	      comment " Table of named Loggers that maps names to Loggers.
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,LoggerWeakRef> ${name}${value};
"
	      classrelation_ref 3681026 // namedLoggers (<unidirectional association>)
	    b parent class_ref 137090 // Hashtable
	end

	classrelation 3681154 // root (<unidirectional association>)
	  relation 3681154 --->
	    a role_name "root" const_relation private
	      comment " Tree of named Loggers
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3681154 // root (<unidirectional association>)
	    b parent class_ref 1140866 // LogNode
	end

	operation 9396226 "LoggerContext"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9396354 "requiresDefaultLoggers"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Tells whether default loggers are required in this context.
 If true, the default loggers will be lazily added."
	end

	operation 9396482 "getOwner"
	  package return_type class_ref 1138562 // LogManager
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " This context's LogManager."
	end

	operation 9396610 "getRootLogger"
	  package return_type class_ref 215298 // Logger
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " This context owner's root logger, which if not null, and if
 the context requires default loggers, will be added to the context
 logger's tree."
	end

	operation 9396738 "getGlobalLogger"
	  package return_type class_ref 215298 // Logger
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " The global logger, which if not null, and if
 the context requires default loggers, will be added to the context
 logger's tree."
	end

	operation 9396866 "demandLogger"
	  package return_type class_ref 215298 // Logger
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "resourceBundleName" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9396994 "ensureInitialized"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Due to subtle deadlock issues getUserContext() no longer
 calls addLocalLogger(rootLogger);
 Therefore - we need to add the default loggers later on.
 Checks that the context is properly initialized
 This is necessary before calling e.g. find(name)
 or getLoggerNames()
"
	end

	operation 9397122 "findLogger"
	  package return_type class_ref 215298 // Logger
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9397250 "ensureAllDefaultLoggers"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "logger" type class_ref 215298 // Logger
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " This method is called before adding a logger to the
 context.
 'logger' is the context that will be added.
 This method will ensure that the defaults loggers are added
 before adding 'logger'.
"
	end

	operation 9397378 "ensureDefaultLogger"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "logger" type class_ref 215298 // Logger
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9397506 "addLocalLogger"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "logger" type class_ref 215298 // Logger
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9397634 "addLocalLogger"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "logger" type class_ref 215298 // Logger
	    param inout name "addDefaultLoggersIfNeeded" explicit_type "boolean"
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Add a logger to this context.  This method will only set its level
 and process parent loggers.  It doesn't set its handlers."
	end

	operation 9397762 "removeLoggerRef"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "ref" type class_ref 1139714 // LoggerWeakRef
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9397890 "getLoggerNames"
	  package return_type class_ref 185986 // Enumeration
	  nparams 0
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9398018 "processParentHandlers"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "logger" type class_ref 215298 // Logger
	    param in name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " If logger.getUseParentHandlers() returns 'true' and any of the logger's
 parents have levels or handlers defined, make sure they are instantiated."
	end

	operation 9398146 "getNode"
	  package return_type class_ref 1140866 // LogNode
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Gets a node in our tree of logger nodes.
 If necessary, create it."
	end
      end

      classrelation 3680386 // systemContext (<unidirectional association>)
	relation 3680386 --->
	  a role_name "systemContext" init_value " new SystemLoggerContext()" const_relation private
	    comment " LoggerContext for system loggers and user loggers
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3680386 // systemContext (<unidirectional association>)
	  b parent class_ref 1140610 // LoggerContext
      end

      classrelation 3680514 // userContext (<unidirectional association>)
	relation 3680514 --->
	  a role_name "userContext" init_value " new LoggerContext()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3680514 // userContext (<unidirectional association>)
	  b parent class_ref 1140610 // LoggerContext
      end

      classrelation 3680642 // rootLogger (<unidirectional association>)
	relation 3680642 --->
	  a role_name "rootLogger" volatile private
	    comment " non final field - make it volatile to make sure that other threads
 will see the new value once ensureLogManagerInitialized() has finished
 executing.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3680642 // rootLogger (<unidirectional association>)
	  b parent class_ref 215298 // Logger
      end

      attribute 2190978 "readPrimordialConfiguration"
	volatile private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Have we done the primordial reading of the configuration file?
 (Must be done after a suitable amount of java.lang.System
 initialization has been done)
"
      end

      attribute 2191106 "initializedGlobalHandlers"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Have we initialized global (root) handlers yet?
 This gets set to false in readConfiguration
"
      end

      attribute 2191234 "deathImminent"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " True if JVM death is imminent and the exit hook has been called.
"
      end

      extra_member 178306 "initialization"
	
	cpp "" ""
	java "  static {
        manager = AccessController.doPrivileged(new PrivilegedAction<LogManager>() {
            @Override
            public LogManager run() {
                LogManager mgr = null;
                String cname = null;
                try {
                    cname = System.getProperty(\"java.util.logging.manager\");
                    if (cname != null) {
                        try {
                            Class<?> clz = ClassLoader.getSystemClassLoader()
                                    .loadClass(cname);
                            mgr = (LogManager) clz.newInstance();
                        } catch (ClassNotFoundException ex) {
                            Class<?> clz = Thread.currentThread()
                                    .getContextClassLoader().loadClass(cname);
                            mgr = (LogManager) clz.newInstance();
                        }
                    }
                } catch (Exception ex) {
                    System.err.println(\"Could not load Logmanager \\\"\" + cname + \"\\\"\");
                    ex.printStackTrace();
                }
                if (mgr == null) {
                    mgr = new LogManager();
                }
                return mgr;

            }
        });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      class 1140738 "Cleaner"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3680770 // <generalisation>
	  relation 3680770 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3680770 // <generalisation>
	    b parent class_ref 128642 // Thread
	end

	operation 9394306 "Cleaner"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9394434 "run"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 9394562 "LogManager"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected constructor.  This is protected so that container applications
(such as J2EE containers) can subclass the object.  It is non-public as
it is intended that there only be one LogManager object, whose value is
retrieved by calling LogManager.getLogManager.
"
      end

      operation 9394690 "LogManager"
	private explicit_return_type ""
	nparams 1
	  param inout name "checked" type class_ref 146946 // Void
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9394818 "checkSubclassPermissions"
	class_operation private return_type class_ref 146946 // Void
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2191362 "initializedCalled"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Lazy initialization: if this instance of manager is the global
manager then this method will read the initial configuration and
add the root logger and global logger by calling addLogger().

Note that it is subtly different from what we do in LoggerContext.
In LoggerContext we're patching up the logger context tree in order to add
the root and global logger *to the context tree*.

For this to work, addLogger() must have already have been called
once on the LogManager instance for the default logger being
added.

This is why ensureLogManagerInitialized() needs to be called before
any logger is added to any logger context.


"
      end

      attribute 2191490 "initializationDone"
	volatile private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9394946 "ensureLogManagerInitialized"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9395074 "getLogManager"
	class_operation public return_type class_ref 1138562 // LogManager
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the global LogManager object.
@return the global LogManager object
"
      end

      operation 9395202 "readPrimordialConfiguration"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9395330 "addPropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 347266 // PropertyChangeListener
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Adds an event listener to be invoked when the logging
properties are re-read. Adding multiple instances of
the same event Listener results in multiple entries
in the property event listener table.

<p><b>WARNING:</b> This method is omitted from this class in all subset
Profiles of Java SE that do not include the {@code java.beans} package.
</p>

@param l  event listener
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\").
@exception NullPointerException if the PropertyChangeListener is null.
@deprecated The dependency on {@code PropertyChangeListener} creates a
            significant impediment to future modularization of the Java
            platform. This method will be removed in a future release.
            The global {@code LogManager} can detect changes to the
            logging configuration by overridding the {@link
            #readConfiguration readConfiguration} method.
"
      end

      operation 9395458 "removePropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 347266 // PropertyChangeListener
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Removes an event listener for property change events.
If the same listener instance has been added to the listener table
through multiple invocations of <CODE>addPropertyChangeListener</CODE>,
then an equivalent number of
<CODE>removePropertyChangeListener</CODE> invocations are required to remove
all instances of that listener from the listener table.
<P>
Returns silently if the given listener is not found.

<p><b>WARNING:</b> This method is omitted from this class in all subset
Profiles of Java SE that do not include the {@code java.beans} package.
</p>

@param l  event listener (can be null)
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\").
@deprecated The dependency on {@code PropertyChangeListener} creates a
            significant impediment to future modularization of the Java
            platform. This method will be removed in a future release.
            The global {@code LogManager} can detect changes to the
            logging configuration by overridding the {@link
            #readConfiguration readConfiguration} method.
"
      end

      classrelation 3680898 // contextsMap (<unidirectional association>)
	relation 3680898 --->
	  a role_name "contextsMap" init_value " null" private
	    comment " LoggerContext maps from AppContext
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object, LoggerContext> ${name}${value};
"
	    classrelation_ref 3680898 // contextsMap (<unidirectional association>)
	  b parent class_ref 192002 // WeakHashMap
      end

      operation 9395586 "getUserContext"
	private return_type class_ref 1140610 // LoggerContext
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the LoggerContext for the user code (i.e. application or AppContext).
 Loggers are isolated from each AppContext."
      end

      operation 9395714 "getSystemContext"
	package return_type class_ref 1140610 // LoggerContext
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The system context."
      end

      operation 9395842 "contexts"
	private return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<LoggerContext> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9395970 "demandLogger"
	package return_type class_ref 215298 // Logger
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "resourceBundleName" type class_ref 128130 // String
	  param inout name "caller" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Find or create a specified logger instance. If a logger has
 already been created with the given name it is returned.
 Otherwise a new logger instance is created and registered
 in the LogManager global namespace.
 This method will always return a non-null Logger object.
 Synchronization is not required here. All synchronization for
 adding a new Logger object is handled by addLogger().

 This method must delegate to the LogManager implementation to
 add a new Logger or return the one that has been added previously
 as a LogManager subclass may override the addLogger, getLogger,
 readConfiguration, and other methods."
      end

      operation 9396098 "demandSystemLogger"
	package return_type class_ref 215298 // Logger
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "resourceBundleName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1140866 "LogNode"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3682178 // children (<unidirectional association>)
	  relation 3682178 --->
	    a role_name "children" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,LogNode> ${name}${value};
"
	      classrelation_ref 3682178 // children (<unidirectional association>)
	    b parent class_ref 132866 // HashMap
	end

	classrelation 3682306 // loggerRef (<unidirectional association>)
	  relation 3682306 --->
	    a role_name "loggerRef" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3682306 // loggerRef (<unidirectional association>)
	    b parent class_ref 1139714 // LoggerWeakRef
	end

	classrelation 3682434 // parent (<unidirectional association>)
	  relation 3682434 --->
	    a role_name "parent" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3682434 // parent (<unidirectional association>)
	    b parent class_ref 1140866 // LogNode
	end

	classrelation 3682562 // context (<unidirectional association>)
	  relation 3682562 --->
	    a role_name "context" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3682562 // context (<unidirectional association>)
	    b parent class_ref 1140610 // LoggerContext
	end

	operation 9401730 "LogNode"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "parent" type class_ref 1140866 // LogNode
	    param inout name "context" type class_ref 1140610 // LoggerContext
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9401858 "walkAndSetParent"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "parent" type class_ref 215298 // Logger
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Recursive method to walk the tree below a node and set
 a new parent logger."
	end
      end

      class 1140994 "SystemLoggerContext"
	visibility package 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3681282 // <generalisation>
	  relation 3681282 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3681282 // <generalisation>
	    b parent class_ref 1140610 // LoggerContext
	end

	operation 9398274 "demandLogger"
	  package return_type class_ref 215298 // Logger
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "resourceBundleName" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Add a system logger in the system context's namespace as well as
 in the LogManager's namespace if not exist so that there is only
 one single logger of the given name.  System loggers are visible
 to applications unless a logger of the same name has been added."
	end
      end

      operation 9398402 "loadLoggerHandlers"
	private explicit_return_type "void"
	nparams 3
	  param in name "logger" type class_ref 215298 // Logger
	  param in name "name" type class_ref 128130 // String
	  param in name "handlersPropertyName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add new per logger handlers.
 We need to raise privilege here. All our decisions will
 be made based on the logging configuration, which can
 only be modified by trusted code."
      end

      classrelation 3681410 // loggerRefQueue (<unidirectional association>)
	relation 3681410 --->
	  a role_name "loggerRefQueue" init_value " new ReferenceQueue<>()" const_relation private
	    comment " loggerRefQueue holds LoggerWeakRef objects for Logger objects
 that have been GC'ed.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Logger> ${name}${value};
"
	    classrelation_ref 3681410 // loggerRefQueue (<unidirectional association>)
	  b parent class_ref 130946 // ReferenceQueue
      end

      attribute 2191746 "MAX_ITERATIONS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 400"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Package-level method.
 Drain some Logger objects that have been GC'ed.

 drainLoggerRefQueueBounded() is called by addLogger() below
 and by Logger.getAnonymousLogger(String) so we'll drain up to
 MAX_ITERATIONS GC'ed Loggers for every Logger we add.

 On a WinXP VMware client, a MAX_ITERATIONS value of 400 gives
 us about a 50/50 mix in increased weak ref counts versus
 decreased weak ref counts in the AnonLoggerWeakRefLeak test.
 Here are stats for cleaning up sets of 400 anonymous Loggers:
   - test duration 1 minute
   - sample size of 125 sets of 400
   - average: 1.99 ms
   - minimum: 0.57 ms
   - maximum: 25.3 ms

 The same config gives us a better decreased weak ref count
 than increased weak ref count in the LoggerWeakRefLeak test.
 Here are stats for cleaning up sets of 400 named Loggers:
   - test duration 2 minutes
   - sample size of 506 sets of 400
   - average: 0.57 ms
   - minimum: 0.02 ms
   - maximum: 10.9 ms

"
      end

      operation 9399042 "drainLoggerRefQueueBounded"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9399170 "addLogger"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "logger" type class_ref 215298 // Logger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a named logger.  This does nothing and returns false if a logger
with the same name is already registered.
<p>
The Logger factory methods call this method to register each
newly created Logger.
<p>
The application should retain its own reference to the Logger
object to avoid it being garbage collected.  The LogManager
may only retain a weak reference.

@param   logger the new logger.
@return  true if the argument logger was registered successfully,
         false if a logger of that name already exists.
@exception NullPointerException if the logger name is null.
"
      end

      operation 9399298 "doSetLevel"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "logger" type class_ref 215298 // Logger
	  param in name "level" type class_ref 215426 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to set a level on a logger.
 If necessary, we raise privilege before doing the call."
      end

      operation 9399426 "doSetParent"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "logger" type class_ref 215298 // Logger
	  param in name "parent" type class_ref 215298 // Logger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to set a parent on a logger.
 If necessary, we raise privilege before doing the setParent call."
      end

      operation 9399554 "getLogger"
	public return_type class_ref 215298 // Logger
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to find a named logger.
<p>
Note that since untrusted code may create loggers with
arbitrary names this method should not be relied on to
find Loggers for security sensitive logging.
It is also important to note that the Logger associated with the
String {@code name} may be garbage collected at any time if there
is no strong reference to the Logger. The caller of this method
must check the return value for null in order to properly handle
the case where the Logger has been garbage collected.
<p>
@param name name of the logger
@return  matching logger or null if none is found
"
      end

      operation 9399682 "getLoggerNames"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an enumeration of known logger names.
<p>
Note:  Loggers may be added dynamically as new classes are loaded.
This method only reports on the loggers that are currently registered.
It is also important to note that this method only returns the name
of a Logger, not a strong reference to the Logger itself.
The returned String does nothing to prevent the Logger from being
garbage collected. In particular, if the returned name is passed
to {@code LogManager.getLogger()}, then the caller must check the
return value from {@code LogManager.getLogger()} for null to properly
handle the case where the Logger has been garbage collected in the
time since its name was returned by this method.
<p>
@return  enumeration of logger name strings
"
      end

      operation 9399810 "readConfiguration"
	public explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reinitialize the logging properties and reread the logging configuration.
<p>
The same rules are used for locating the configuration properties
as are used at startup.  So normally the logging properties will
be re-read from the same file that was used at startup.
<P>
Any log level definitions in the new configuration file will be
applied using Logger.setLevel(), if the target Logger exists.
<p>
A PropertyChangeEvent will be fired after the properties are read.

@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\").
@exception  IOException if there are IO problems reading the configuration.
"
      end

      operation 9399938 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset the logging configuration.
<p>
For all named loggers, the reset operation removes and closes
all Handlers and (except for the root logger) sets the level
to null.  The root logger's level is set to Level.INFO.

@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\").
"
      end

      operation 9400066 "resetLogger"
	private explicit_return_type "void"
	nparams 1
	  param inout name "logger" type class_ref 215298 // Logger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to reset an individual target logger."
      end

      operation 9400194 "parseClassNames"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "propertyName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get a list of whitespace separated classnames from a property."
      end

      operation 9400322 "readConfiguration"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ins" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reinitialize the logging properties and reread the logging configuration
from the given stream, which should be in java.util.Properties format.
A PropertyChangeEvent will be fired after the properties are read.
<p>
Any log level definitions in the new configuration file will be
applied using Logger.setLevel(), if the target Logger exists.

@param ins       stream to read properties from
@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\").
@exception  IOException if there are problems reading from the stream.
"
      end

      operation 9400450 "getProperty"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value of a logging property.
The method returns null if the property is not found.
@param name      property name
@return          property value
"
      end

      operation 9400578 "getStringProperty"
	package return_type class_ref 128130 // String
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "defaultValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get a String property.
 If the property is not defined we return the given
 default value."
      end

      operation 9400706 "getIntProperty"
	package explicit_return_type "int"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param in name "defaultValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get an integer property.
 If the property is not defined or cannot be parsed
 we return the given default value."
      end

      operation 9400834 "getBooleanProperty"
	package explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "defaultValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get a boolean property.
 If the property is not defined or cannot be parsed
 we return the given default value."
      end

      operation 9400962 "getLevelProperty"
	package return_type class_ref 215426 // Level
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "defaultValue" type class_ref 215426 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get a Level property.
 If the property is not defined or cannot be parsed
 we return the given default value."
      end

      operation 9401090 "getFilterProperty"
	package return_type class_ref 1138690 // Filter
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "defaultValue" type class_ref 1138690 // Filter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get a filter property.
 We return an instance of the class named by the \"name\"
 property. If the property is not defined or has problems
 we return the defaultValue."
      end

      operation 9401218 "getFormatterProperty"
	package return_type class_ref 1138818 // Formatter
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "defaultValue" type class_ref 1138818 // Formatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private method to get a formatter property.
 We return an instance of the class named by the \"name\"
 property. If the property is not defined or has problems
 we return the defaultValue."
      end

      operation 9401346 "initializeGlobalHandlers"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to load the global handlers.
 We do the real work lazily, when the global handlers
 are first used."
      end

      classrelation 3682050 // controlPermission (<unidirectional association>)
	relation 3682050 --->
	  a role_name "controlPermission" init_value " new LoggingPermission(\"control\", null)" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3682050 // controlPermission (<unidirectional association>)
	  b parent class_ref 257538 // Permission
      end

      operation 9401474 "checkPermission"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9401602 "checkAccess"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check that the current context is trusted to modify the logging
configuration.  This requires LoggingPermission(\"control\").
<p>
If the check fails we throw a SecurityException, otherwise
we return normally.

@exception  SecurityException  if a security manager exists and if
            the caller does not have LoggingPermission(\"control\").
"
      end

      class 1141122 "RootLogger"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3682690 // <generalisation>
	  relation 3682690 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3682690 // <generalisation>
	    b parent class_ref 215298 // Logger
	end

	operation 9401986 "RootLogger"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9402114 "log"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "record" type class_ref 215554 // LogRecord
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9402242 "addHandler"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "h" type class_ref 1138434 // Handler
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9402370 "removeHandler"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "h" type class_ref 1138434 // Handler
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9402498 "accessCheckedHandlers"
	  package return_type class_ref 1138434 // Handler
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 9402626 "setLevelsOnExistingLoggers"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to be called when the configuration has
 changed to apply any level settings to any pre-existing loggers."
      end

      classrelation 3682818 // loggingMXBean (<unidirectional association>)
	relation 3682818 --->
	  a role_name "loggingMXBean" init_value " null" class_relation private
	    comment " Management Support
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3682818 // loggingMXBean (<unidirectional association>)
	  b parent class_ref 1140098 // LoggingMXBean
      end

      classrelation 3682946 // LOGGING_MXBEAN_NAME (<unidirectional association>)
	relation 3682946 --->
	  a role_name "LOGGING_MXBEAN_NAME" init_value " \"java.util.logging:type=Logging\"" class_relation const_relation public
	    comment "
String representation of the
{@link javax.management.ObjectName} for the management interface
for the logging facility.

@see java.lang.management.PlatformLoggingMXBean
@see java.util.logging.LoggingMXBean

@since 1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3682946 // LOGGING_MXBEAN_NAME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9402754 "getLoggingMXBean"
	class_operation public return_type class_ref 1140098 // LoggingMXBean
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>LoggingMXBean</tt> for managing loggers.
An alternative way to manage loggers is through the
{@link java.lang.management.PlatformLoggingMXBean} interface
that can be obtained by calling:
<pre>
    PlatformLoggingMXBean logging = {@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)
        ManagementFactory.getPlatformMXBean}(PlatformLoggingMXBean.class);
</pre>

@return a {@link LoggingMXBean} object.

@see java.lang.management.PlatformLoggingMXBean
@since 1.5
"
      end

      class 1141250 "Beans"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3683074 // propertyChangeListenerClass (<unidirectional association>)
	  relation 3683074 --->
	    a role_name "propertyChangeListenerClass" init_value "
            getClass(\"java.beans.PropertyChangeListener\")" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3683074 // propertyChangeListenerClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3683202 // propertyChangeEventClass (<unidirectional association>)
	  relation 3683202 --->
	    a role_name "propertyChangeEventClass" init_value "
            getClass(\"java.beans.PropertyChangeEvent\")" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3683202 // propertyChangeEventClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3683330 // propertyChangeMethod (<unidirectional association>)
	  relation 3683330 --->
	    a role_name "propertyChangeMethod" init_value "
            getMethod(propertyChangeListenerClass,
                      \"propertyChange\",
                      propertyChangeEventClass)" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3683330 // propertyChangeMethod (<unidirectional association>)
	    b parent class_ref 137858 // Method
	end

	classrelation 3683458 // propertyEventCtor (<unidirectional association>)
	  relation 3683458 --->
	    a role_name "propertyEventCtor" init_value "
            getConstructor(propertyChangeEventClass,
                           Object.class,
                           String.class,
                           Object.class,
                           Object.class)" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3683458 // propertyEventCtor (<unidirectional association>)
	    b parent class_ref 189186 // Constructor
	end

	operation 9402882 "getClass"
	  class_operation private return_type class_ref 130818 // Class
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9403010 "getConstructor"
	  class_operation private return_type class_ref 189186 // Constructor
	  nparams 2
	    param inout name "c" type class_ref 130818 // Class
	    param inout name "types" explicit_type "Class<?>..."
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9403138 "getMethod"
	  class_operation private return_type class_ref 137858 // Method
	  nparams 3
	    param inout name "c" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "types" explicit_type "Class<?>..."
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9403266 "isBeansPresent"
	  class_operation package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns {@code true} if java.beans is present.
"
	end

	operation 9403394 "newPropertyChangeEvent"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 4
	    param inout name "source" type class_ref 129538 // Object
	    param inout name "prop" type class_ref 128130 // String
	    param inout name "oldValue" type class_ref 129538 // Object
	    param inout name "newValue" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a new PropertyChangeEvent with the given source, property
name, old and new values.
"
	end

	operation 9403522 "invokePropertyChange"
	  class_operation package explicit_return_type "void"
	  nparams 2
	    param inout name "listener" type class_ref 129538 // Object
	    param inout name "ev" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Invokes the given PropertyChangeListener's propertyChange method
with the given event.
"
	end
      end
    end

    class 1138690 "Filter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A Filter can be used to provide fine grain control over
what is logged, beyond the control provided by log levels.
<p>
Each Logger and each Handler can have a filter associated with it.
The Logger or Handler will call the isLoggable method to check
if a given LogRecord should be published.  If isLoggable returns
false, the LogRecord will be discarded.

@since 1.4
"
      operation 9376386 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if a given log record should be published.
@param record  a LogRecord
@return true if the log record should be published.
"
      end
    end

    class 1138818 "Formatter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A Formatter provides support for formatting LogRecords.
<p>
Typically each logging Handler will have a Formatter associated
with it.  The Formatter takes a LogRecord and converts it to
a string.
<p>
Some formatters (such as the XMLFormatter) need to wrap head
and tail strings around a set of formatted records. The getHeader
and getTail methods can be used to obtain these strings.

@since 1.4
"
      operation 9376514 "Formatter"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new formatter.
"
      end

      operation 9376642 "format"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format the given log record and return the formatted string.
<p>
The resulting formatted String will normally include a
localized and formatted version of the LogRecord's message field.
It is recommended to use the {@link Formatter#formatMessage}
convenience method to localize and format the message field.

@param record the log record to be formatted.
@return the formatted log record
"
      end

      operation 9376770 "getHead"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "h" type class_ref 1138434 // Handler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the header string for a set of formatted records.
<p>
This base class returns an empty string, but this may be
overridden by subclasses.

@param   h  The target handler (can be null)
@return  header string
"
      end

      operation 9376898 "getTail"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "h" type class_ref 1138434 // Handler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the tail string for a set of formatted records.
<p>
This base class returns an empty string, but this may be
overridden by subclasses.

@param   h  The target handler (can be null)
@return  tail string
"
      end

      operation 9377026 "formatMessage"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Localize and format the message string from a log record.  This
method is provided as a convenience for Formatter subclasses to
use when they are performing formatting.
<p>
The message string is first localized to a format string using
the record's ResourceBundle.  (If there is no ResourceBundle,
or if the message key is not found, then the key is used as the
format string.)  The format String uses java.text style
formatting.
<ul>
<li>If there are no parameters, no formatter is used.
<li>Otherwise, if the string contains \"{0\" then
    java.text.MessageFormat  is used to format the string.
<li>Otherwise no formatting is performed.
</ul>
<p>

@param  record  the log record containing the raw message
@return   a localized and formatted message
"
      end
    end

    class 1138946 "ErrorManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ErrorManager objects can be attached to Handlers to process
any error that occurs on a Handler during Logging.
<p>
When processing logging output, if a Handler encounters problems
then rather than throwing an Exception back to the issuer of
the logging call (who is unlikely to be interested) the Handler
should call its associated ErrorManager.
"
      attribute 2188162 "reported"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2188290 "GENERIC_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "We declare standard error codes for important categories of errors.


GENERIC_FAILURE is used for failure that don't fit
into one of the other categories.

"
      end

      attribute 2188418 "WRITE_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "WRITE_FAILURE is used when a write to an output stream fails.

"
      end

      attribute 2188546 "FLUSH_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "FLUSH_FAILURE is used when a flush to an output stream fails.

"
      end

      attribute 2188674 "CLOSE_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "CLOSE_FAILURE is used when a close of an output stream fails.

"
      end

      attribute 2188802 "OPEN_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "OPEN_FAILURE is used when an open of an output stream fails.

"
      end

      attribute 2188930 "FORMAT_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "FORMAT_FAILURE is used when formatting fails for any reason.

"
      end

      operation 9373570 "error"
	public explicit_return_type "void"
	nparams 3
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "ex" type class_ref 132226 // Exception
	  param in name "code" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The error method is called when a Handler failure occurs.
<p>
This method may be overridden in subclasses.  The default
behavior in this base class is that the first call is
reported to System.err, and subsequent calls are ignored.

@param msg    a descriptive string (may be null)
@param ex     an exception (may be null)
@param code   an error code defined in ErrorManager
"
      end
    end

    class 1139074 "FileHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Simple file logging <tt>Handler</tt>.
<p>
The <tt>FileHandler</tt> can either write to a specified file,
or it can write to a rotating set of files.
<p>
For a rotating set of files, as each file reaches a given size
limit, it is closed, rotated out, and a new file opened.
Successively older files are named by adding \"0\", \"1\", \"2\",
etc. into the base filename.
<p>
By default buffering is enabled in the IO libraries but each log
record is flushed out when it is complete.
<p>
By default the <tt>XMLFormatter</tt> class is used for formatting.
<p>
<b>Configuration:</b>
By default each <tt>FileHandler</tt> is initialized using the following
<tt>LogManager</tt> configuration properties where <tt>&lt;handler-name&gt;</tt>
refers to the fully-qualified class name of the handler.
If properties are not defined
(or have invalid values) then the specified default values are used.
<ul>
<li>   &lt;handler-name&gt;.level
       specifies the default level for the <tt>Handler</tt>
       (defaults to <tt>Level.ALL</tt>). </li>
<li>   &lt;handler-name&gt;.filter
       specifies the name of a <tt>Filter</tt> class to use
       (defaults to no <tt>Filter</tt>). </li>
<li>   &lt;handler-name&gt;.formatter
       specifies the name of a <tt>Formatter</tt> class to use
       (defaults to <tt>java.util.logging.XMLFormatter</tt>) </li>
<li>   &lt;handler-name&gt;.encoding
       the name of the character set encoding to use (defaults to
       the default platform encoding). </li>
<li>   &lt;handler-name&gt;.limit
       specifies an approximate maximum amount to write (in bytes)
       to any one file.  If this is zero, then there is no limit.
       (Defaults to no limit). </li>
<li>   &lt;handler-name&gt;.count
       specifies how many output files to cycle through (defaults to 1). </li>
<li>   &lt;handler-name&gt;.pattern
       specifies a pattern for generating the output file name.  See
       below for details. (Defaults to \"%h/java%u.log\"). </li>
<li>   &lt;handler-name&gt;.append
       specifies whether the FileHandler should append onto
       any existing files (defaults to false). </li>
</ul>
<p>
For example, the properties for {@code FileHandler} would be:
<ul>
<li>   java.util.logging.FileHandler.level=INFO </li>
<li>   java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter </li>
</ul>
<p>
For a custom handler, e.g. com.foo.MyHandler, the properties would be:
<ul>
<li>   com.foo.MyHandler.level=INFO </li>
<li>   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter </li>
</ul>
<p>
A pattern consists of a string that includes the following special
components that will be replaced at runtime:
<ul>
<li>    \"/\"    the local pathname separator </li>
<li>     \"%t\"   the system temporary directory </li>
<li>     \"%h\"   the value of the \"user.home\" system property </li>
<li>     \"%g\"   the generation number to distinguish rotated logs </li>
<li>     \"%u\"   a unique number to resolve conflicts </li>
<li>     \"%%\"   translates to a single percent sign \"%\" </li>
</ul>
If no \"%g\" field has been specified and the file count is greater
than one, then the generation number will be added to the end of
the generated filename, after a dot.
<p>
Thus for example a pattern of \"%t/java%g.log\" with a count of 2
would typically cause log files to be written on Solaris to
/var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they
would be typically written to C:\\TEMP\\java0.log and C:\\TEMP\\java1.log
<p>
Generation numbers follow the sequence 0, 1, 2, etc.
<p>
Normally the \"%u\" unique field is set to 0.  However, if the <tt>FileHandler</tt>
tries to open the filename and finds the file is currently in use by
another process it will increment the unique number field and try
again.  This will be repeated until <tt>FileHandler</tt> finds a file name that
is  not currently in use. If there is a conflict and no \"%u\" field has
been specified, it will be added at the end of the filename after a dot.
(This will be after any automatically added generation number.)
<p>
Thus if three processes were all trying to log to fred%u.%g.txt then
they  might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as
the first file in their rotating sequences.
<p>
Note that the use of unique ids to avoid conflicts is only guaranteed
to work reliably when using a local disk file system.

@since 1.4
"
      classrelation 3672706 // <generalisation>
	relation 3672706 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3672706 // <generalisation>
	  b parent class_ref 1138306 // StreamHandler
      end

      class 1139202 "MeteredStream"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3673602 // <generalisation>
	  relation 3673602 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3673602 // <generalisation>
	    b parent class_ref 151298 // OutputStream
	end

	classrelation 3673730 // out (<unidirectional association>)
	  relation 3673730 --->
	    a role_name "out" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3673730 // out (<unidirectional association>)
	    b parent class_ref 151298 // OutputStream
	end

	attribute 2189570 "written"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9373698 "MeteredStream"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "out" type class_ref 151298 // OutputStream
	    param in name "written" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9373826 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "b" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9373954 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "buff" explicit_type "byte"
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9374082 "write"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "buff" explicit_type "byte"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9374210 "flush"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9374338 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 146818 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 3672834 // meter (<unidirectional association>)
	relation 3672834 --->
	  a role_name "meter" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3672834 // meter (<unidirectional association>)
	  b parent class_ref 1139202 // MeteredStream
      end

      attribute 2189058 "append"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2189186 "limit"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " zero => no limit."
      end

      attribute 2189314 "count"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3672962 // pattern (<unidirectional association>)
	relation 3672962 --->
	  a role_name "pattern" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3672962 // pattern (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3673090 // lockFileName (<unidirectional association>)
	relation 3673090 --->
	  a role_name "lockFileName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3673090 // lockFileName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3673218 // lockFileChannel (<unidirectional association>)
	relation 3673218 --->
	  a role_name "lockFileChannel" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3673218 // lockFileChannel (<unidirectional association>)
	  b parent class_ref 924034 // FileChannel
      end

      classrelation 3673346 // files (<unidirectional association>)
	relation 3673346 --->
	  a role_name "files" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3673346 // files (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      attribute 2189442 "MAX_LOCKS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3673474 // locks (<unidirectional association>)
	relation 3673474 --->
	  a role_name "locks" init_value " new HashSet<>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3673474 // locks (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      operation 9374466 "open"
	private explicit_return_type "void"
	nparams 2
	  param inout name "fname" type class_ref 131970 // File
	  param inout name "append" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9374594 "configure"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Configure a FileHandler from LogManager properties and/or default values
as specified in the class javadoc.
"
      end

      operation 9374722 "FileHandler"
	public explicit_return_type ""
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a default <tt>FileHandler</tt>.  This will be configured
entirely from <tt>LogManager</tt> properties (or their default values).
<p>
@exception  IOException if there are IO problems opening the files.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\"))</tt>.
@exception  NullPointerException if pattern property is an empty String.
"
      end

      operation 9374850 "FileHandler"
	public explicit_return_type ""
	nparams 1
	  param inout name "pattern" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize a <tt>FileHandler</tt> to write to the given filename.
<p>
The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>
properties (or their default values) except that the given pattern
argument is used as the filename pattern, the file limit is
set to no limit, and the file count is set to one.
<p>
There is no limit on the amount of data that may be written,
so use this with care.

@param pattern  the name of the output file
@exception  IOException if there are IO problems opening the files.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception  IllegalArgumentException if pattern is an empty string
"
      end

      operation 9374978 "FileHandler"
	public explicit_return_type ""
	nparams 2
	  param inout name "pattern" type class_ref 128130 // String
	  param inout name "append" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize a <tt>FileHandler</tt> to write to the given filename,
with optional append.
<p>
The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>
properties (or their default values) except that the given pattern
argument is used as the filename pattern, the file limit is
set to no limit, the file count is set to one, and the append
mode is set to the given <tt>append</tt> argument.
<p>
There is no limit on the amount of data that may be written,
so use this with care.

@param pattern  the name of the output file
@param append  specifies append mode
@exception  IOException if there are IO problems opening the files.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception  IllegalArgumentException if pattern is an empty string
"
      end

      operation 9375106 "FileHandler"
	public explicit_return_type ""
	nparams 3
	  param inout name "pattern" type class_ref 128130 // String
	  param in name "limit" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize a <tt>FileHandler</tt> to write to a set of files.  When
(approximately) the given limit has been written to one file,
another file will be opened.  The output will cycle through a set
of count files.
<p>
The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>
properties (or their default values) except that the given pattern
argument is used as the filename pattern, the file limit is
set to the limit argument, and the file count is set to the
given count argument.
<p>
The count must be at least 1.

@param pattern  the pattern for naming the output file
@param limit  the maximum number of bytes to write to any one file
@param count  the number of files to use
@exception  IOException if there are IO problems opening the files.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception  IllegalArgumentException if {@code limit < 0}, or {@code count < 1}.
@exception  IllegalArgumentException if pattern is an empty string
"
      end

      operation 9375234 "FileHandler"
	public explicit_return_type ""
	nparams 4
	  param inout name "pattern" type class_ref 128130 // String
	  param in name "limit" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "append" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize a <tt>FileHandler</tt> to write to a set of files
with optional append.  When (approximately) the given limit has
been written to one file, another file will be opened.  The
output will cycle through a set of count files.
<p>
The <tt>FileHandler</tt> is configured based on <tt>LogManager</tt>
properties (or their default values) except that the given pattern
argument is used as the filename pattern, the file limit is
set to the limit argument, and the file count is set to the
given count argument, and the append mode is set to the given
<tt>append</tt> argument.
<p>
The count must be at least 1.

@param pattern  the pattern for naming the output file
@param limit  the maximum number of bytes to write to any one file
@param count  the number of files to use
@param append  specifies append mode
@exception  IOException if there are IO problems opening the files.
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
@exception  IllegalArgumentException if {@code limit < 0}, or {@code count < 1}.
@exception  IllegalArgumentException if pattern is an empty string

"
      end

      operation 9375362 "isParentWritable"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9375490 "openFiles"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the set of output files, based on the configured
instance variables.
"
      end

      operation 9375618 "generate"
	private return_type class_ref 131970 // File
	nparams 3
	  param inout name "pattern" type class_ref 128130 // String
	  param in name "generation" explicit_type "int"
	  param in name "unique" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a file based on a user-supplied pattern, generation number,
and an integer uniqueness suffix
@param pattern the pattern for naming the output file
@param generation the generation number to distinguish rotated logs
@param unique a unique number to resolve conflicts
@return the generated File
@throws IOException
"
      end

      operation 9375746 "rotate"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rotate the set of output files
"
      end

      operation 9375874 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Format and publish a <tt>LogRecord</tt>.

@param  record  description of the log event. A null record is
                silently ignored and is not published
"
      end

      operation 9376002 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Close all the files.

@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
"
      end

      class 1139330 "InitializationErrorManager"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3673858 // <generalisation>
	  relation 3673858 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3673858 // <generalisation>
	    b parent class_ref 1138946 // ErrorManager
	end

	classrelation 3673986 // lastException (<unidirectional association>)
	  relation 3673986 --->
	    a role_name "lastException" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3673986 // lastException (<unidirectional association>)
	    b parent class_ref 132226 // Exception
	end

	operation 9376130 "error"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "msg" type class_ref 128130 // String
	    param inout name "ex" type class_ref 132226 // Exception
	    param in name "code" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 9376258 "isSetUID"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "check if we are in a set UID program.
"
      end
    end

    class 1139970 "Logging"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Logging is the implementation class of LoggingMXBean.

The <tt>LoggingMXBean</tt> interface provides a standard
method for management access to the individual
{@code Logger} objects available at runtime.

@author Ron Mann
@author Mandy Chung
@since 1.5

@see javax.management
@see Logger
@see LogManager
"
      classrelation 3679234 // <realization>
	relation 3679234 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3679234 // <realization>
	  b parent class_ref 1140098 // LoggingMXBean
      end

      classrelation 3679362 // logManager (<unidirectional association>)
	relation 3679362 --->
	  a role_name "logManager" init_value " LogManager.getLogManager()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3679362 // logManager (<unidirectional association>)
	  b parent class_ref 1138562 // LogManager
      end

      operation 9391490 "Logging"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructor of Logging which is the implementation class
 of LoggingMXBean.
"
      end

      operation 9391618 "getLoggerNames"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3679490 // EMPTY_STRING (<unidirectional association>)
	relation 3679490 --->
	  a role_name "EMPTY_STRING" init_value " \"\"" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3679490 // EMPTY_STRING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9391746 "getLoggerLevel"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "loggerName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9391874 "setLoggerLevel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "loggerName" type class_ref 128130 // String
	  param inout name "levelName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9392002 "getParentLoggerName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "loggerName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1140098 "LoggingMXBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The management interface for the logging facility. It is recommended
to use the {@link java.lang.management.PlatformLoggingMXBean} management
interface that implements all attributes defined in this
{@code LoggingMXBean}.  The
{@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)
ManagementFactory.getPlatformMXBean} method can be used to obtain
the {@code PlatformLoggingMXBean} object representing the management
interface for logging.

<p>There is a single global instance of the <tt>LoggingMXBean</tt>.
This instance is an {@link javax.management.MXBean MXBean} that
can be obtained by calling the {@link LogManager#getLoggingMXBean}
method or from the
{@linkplain java.lang.management.ManagementFactory#getPlatformMBeanServer
platform <tt>MBeanServer</tt>}.
<p>
The {@link javax.management.ObjectName ObjectName} that uniquely identifies
the management interface for logging within the {@code MBeanServer} is:
<pre>
   {@link LogManager#LOGGING_MXBEAN_NAME java.util.logging:type=Logging}
</pre>
<p>
The instance registered in the platform {@code MBeanServer}
is also a {@link java.lang.management.PlatformLoggingMXBean}.

@author  Ron Mann
@author  Mandy Chung
@since   1.5

@see java.lang.management.PlatformLoggingMXBean
"
      operation 9390978 "getLoggerNames"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of currently registered logger names. This method
calls {@link LogManager#getLoggerNames} and returns a list
of the logger names.

@return A list of <tt>String</tt> each of which is a
        currently registered <tt>Logger</tt> name.
"
      end

      operation 9391106 "getLoggerLevel"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "loggerName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the log level associated with the specified logger.
If the specified logger does not exist, <tt>null</tt>
is returned.
This method first finds the logger of the given name and
then returns the name of the log level by calling:
<blockquote>
  {@link Logger#getLevel Logger.getLevel()}.{@link Level#getName getName()};
</blockquote>

<p>
If the <tt>Level</tt> of the specified logger is <tt>null</tt>,
which means that this logger's effective level is inherited
from its parent, an empty string will be returned.

@param loggerName The name of the <tt>Logger</tt> to be retrieved.

@return The name of the log level of the specified logger; or
        an empty string if the log level of the specified logger
        is <tt>null</tt>.  If the specified logger does not
        exist, <tt>null</tt> is returned.

@see Logger#getLevel
"
      end

      operation 9391234 "setLoggerLevel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "loggerName" type class_ref 128130 // String
	  param inout name "levelName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the specified logger to the specified new level.
If the <tt>levelName</tt> is not <tt>null</tt>, the level
of the specified logger is set to the parsed <tt>Level</tt>
matching the <tt>levelName</tt>.
If the <tt>levelName</tt> is <tt>null</tt>, the level
of the specified logger is set to <tt>null</tt> and
the effective level of the logger is inherited from
its nearest ancestor with a specific (non-null) level value.

@param loggerName The name of the <tt>Logger</tt> to be set.
                  Must be non-null.
@param levelName The name of the level to set on the specified logger,
                or <tt>null</tt> if setting the level to inherit
                from its nearest ancestor.

@throws IllegalArgumentException if the specified logger
does not exist, or <tt>levelName</tt> is not a valid level name.

@throws SecurityException if a security manager exists and if
the caller does not have LoggingPermission(\"control\").

@see Logger#setLevel
"
      end

      operation 9391362 "getParentLoggerName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "loggerName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the parent for the specified logger.
If the specified logger does not exist, <tt>null</tt> is returned.
If the specified logger is the root <tt>Logger</tt> in the namespace,
the result will be an empty string.

@param loggerName The name of a <tt>Logger</tt>.

@return the name of the nearest existing parent logger;
        an empty string if the specified logger is the root logger.
        If the specified logger does not exist, <tt>null</tt>
        is returned.
"
      end
    end

    class 1140226 "LoggingPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The permission which the SecurityManager will check when code
that is running with a SecurityManager calls one of the logging
control methods (such as Logger.setLevel).
<p>
Currently there is only one named LoggingPermission.  This is \"control\"
and it grants the ability to control the logging configuration, for
example by adding or removing Handlers, by adding or removing Filters,
or by changing logging levels.
<p>
Programmers do not normally create LoggingPermission objects directly.
Instead they are created by the security policy code based on reading
the security policy file.


@since 1.4
@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager

"
      classrelation 3679618 // <generalisation>
	relation 3679618 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3679618 // <generalisation>
	  b parent class_ref 257410 // BasicPermission
      end

      attribute 2190722 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 63564341580231582L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9392130 "LoggingPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new LoggingPermission object.

@param name Permission name.  Must be \"control\".
@param actions Must be either null or the empty string.

@throws NullPointerException if <code>name</code> is <code>null</code>.
@throws IllegalArgumentException if <code>name</code> is empty or if
arguments are invalid.
"
      end
    end

    class 1140354 "LoggingProxyImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Implementation of LoggingProxy when java.util.logging classes exist.
"
      attribute 2190850 "INSTANCE"
	class_attribute const_attribute package explicit_type "LoggingProxy"
	init_value " new LoggingProxyImpl()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9392258 "LoggingProxyImpl"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9392386 "getLogger"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9392514 "getLevel"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "logger" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9392642 "setLevel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "logger" type class_ref 129538 // Object
	  param inout name "newLevel" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9392770 "isLoggable"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "logger" type class_ref 129538 // Object
	  param inout name "level" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9392898 "log"
	public explicit_return_type "void"
	nparams 3
	  param inout name "logger" type class_ref 129538 // Object
	  param inout name "level" type class_ref 129538 // Object
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9393026 "log"
	public explicit_return_type "void"
	nparams 4
	  param inout name "logger" type class_ref 129538 // Object
	  param inout name "level" type class_ref 129538 // Object
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "t" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9393154 "log"
	public explicit_return_type "void"
	nparams 4
	  param inout name "logger" type class_ref 129538 // Object
	  param inout name "level" type class_ref 129538 // Object
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "" explicit_type "Object...params"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9393282 "getLoggerNames"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9393410 "getLoggerLevel"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "loggerName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9393538 "setLoggerLevel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "loggerName" type class_ref 128130 // String
	  param inout name "levelName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9393666 "getParentLoggerName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "loggerName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9393794 "parseLevel"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "levelName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9393922 "getLevelName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "level" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9394050 "getLevelValue"
	public explicit_return_type "int"
	nparams 1
	  param inout name "level" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9394178 "getProperty"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 1141378 "MemoryHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<tt>Handler</tt> that buffers requests in a circular buffer in memory.
<p>
Normally this <tt>Handler</tt> simply stores incoming <tt>LogRecords</tt>
into its memory buffer and discards earlier records.  This buffering
is very cheap and avoids formatting costs.  On certain trigger
conditions, the <tt>MemoryHandler</tt> will push out its current buffer
contents to a target <tt>Handler</tt>, which will typically publish
them to the outside world.
<p>
There are three main models for triggering a push of the buffer:
<ul>
<li>
An incoming <tt>LogRecord</tt> has a type that is greater than
a pre-defined level, the <tt>pushLevel</tt>. </li>
<li>
An external class calls the <tt>push</tt> method explicitly. </li>
<li>
A subclass overrides the <tt>log</tt> method and scans each incoming
<tt>LogRecord</tt> and calls <tt>push</tt> if a record matches some
desired criteria. </li>
</ul>
<p>
<b>Configuration:</b>
By default each <tt>MemoryHandler</tt> is initialized using the following
<tt>LogManager</tt> configuration properties where <tt>&lt;handler-name&gt;</tt>
refers to the fully-qualified class name of the handler.
If properties are not defined
(or have invalid values) then the specified default values are used.
If no default value is defined then a RuntimeException is thrown.
<ul>
<li>   &lt;handler-name&gt;.level
       specifies the level for the <tt>Handler</tt>
       (defaults to <tt>Level.ALL</tt>). </li>
<li>   &lt;handler-name&gt;.filter
       specifies the name of a <tt>Filter</tt> class to use
       (defaults to no <tt>Filter</tt>). </li>
<li>   &lt;handler-name&gt;.size
       defines the buffer size (defaults to 1000). </li>
<li>   &lt;handler-name&gt;.push
       defines the <tt>pushLevel</tt> (defaults to <tt>level.SEVERE</tt>). </li>
<li>   &lt;handler-name&gt;.target
       specifies the name of the target <tt>Handler </tt> class.
       (no default). </li>
</ul>
<p>
For example, the properties for {@code MemoryHandler} would be:
<ul>
<li>   java.util.logging.MemoryHandler.level=INFO </li>
<li>   java.util.logging.MemoryHandler.formatter=java.util.logging.SimpleFormatter </li>
</ul>
<p>
For a custom handler, e.g. com.foo.MyHandler, the properties would be:
<ul>
<li>   com.foo.MyHandler.level=INFO </li>
<li>   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter </li>
</ul>
<p>
@since 1.4
"
      classrelation 3685250 // <generalisation>
	relation 3685250 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3685250 // <generalisation>
	  b parent class_ref 1138434 // Handler
      end

      attribute 2192642 "DEFAULT_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3685378 // pushLevel (<unidirectional association>)
	relation 3685378 --->
	  a role_name "pushLevel" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3685378 // pushLevel (<unidirectional association>)
	  b parent class_ref 215426 // Level
      end

      attribute 2192770 "size"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3685506 // target (<unidirectional association>)
	relation 3685506 --->
	  a role_name "target" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3685506 // target (<unidirectional association>)
	  b parent class_ref 1138434 // Handler
      end

      classrelation 3685634 // buffer (<unidirectional association>)
	relation 3685634 --->
	  a role_name "buffer" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3685634 // buffer (<unidirectional association>)
	  b parent class_ref 215554 // LogRecord
      end

      attribute 2192898 "start"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2193026 "count"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9407490 "configure"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to configure a MemoryHandler from LogManager
 properties and/or default values as specified in the class
 javadoc."
      end

      operation 9407618 "MemoryHandler"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>MemoryHandler</tt> and configure it based on
<tt>LogManager</tt> configuration properties.
"
      end

      operation 9407746 "init"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize.  Size is a count of LogRecords."
      end

      operation 9407874 "MemoryHandler"
	public explicit_return_type ""
	nparams 3
	  param inout name "target" type class_ref 1138434 // Handler
	  param in name "size" explicit_type "int"
	  param inout name "pushLevel" type class_ref 215426 // Level
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>MemoryHandler</tt>.
<p>
The <tt>MemoryHandler</tt> is configured based on <tt>LogManager</tt>
properties (or their default values) except that the given <tt>pushLevel</tt>
argument and buffer size argument are used.

@param target  the Handler to which to publish output.
@param size    the number of log records to buffer (must be greater than zero)
@param pushLevel  message level to push on

@throws IllegalArgumentException if {@code size is <= 0}
"
      end

      operation 9408002 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Store a <tt>LogRecord</tt> in an internal buffer.
<p>
If there is a <tt>Filter</tt>, its <tt>isLoggable</tt>
method is called to check if the given log record is loggable.
If not we return.  Otherwise the given record is copied into
an internal circular buffer.  Then the record's level property is
compared with the <tt>pushLevel</tt>. If the given level is
greater than or equal to the <tt>pushLevel</tt> then <tt>push</tt>
is called to write all buffered records to the target output
<tt>Handler</tt>.

@param  record  description of the log event. A null record is
                silently ignored and is not published
"
      end

      operation 9408130 "push"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Push any buffered output to the target <tt>Handler</tt>.
<p>
The buffer is then cleared.
"
      end

      operation 9408258 "flush"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Causes a flush on the target <tt>Handler</tt>.
<p>
Note that the current contents of the <tt>MemoryHandler</tt>
buffer are <b>not</b> written out.  That requires a \"push\".
"
      end

      operation 9408386 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Close the <tt>Handler</tt> and free all associated resources.
This will also close the target <tt>Handler</tt>.

@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
"
      end

      operation 9408514 "setPushLevel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newLevel" type class_ref 215426 // Level
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the <tt>pushLevel</tt>.  After a <tt>LogRecord</tt> is copied
into our internal buffer, if its level is greater than or equal to
the <tt>pushLevel</tt>, then <tt>push</tt> will be called.

@param newLevel the new value of the <tt>pushLevel</tt>
@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
"
      end

      operation 9408642 "getPushLevel"
	public return_type class_ref 215426 // Level
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the <tt>pushLevel</tt>.

@return the value of the <tt>pushLevel</tt>
"
      end

      operation 9408770 "isLoggable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Check if this <tt>Handler</tt> would actually log a given
<tt>LogRecord</tt> into its internal buffer.
<p>
This method checks if the <tt>LogRecord</tt> has an appropriate level and
whether it satisfies any <tt>Filter</tt>.  However it does <b>not</b>
check whether the <tt>LogRecord</tt> would result in a \"push\" of the
buffer contents. It will return false if the <tt>LogRecord</tt> is null.
<p>
@param record  a <tt>LogRecord</tt>
@return true if the <tt>LogRecord</tt> would be logged.

"
      end
    end

    class 1141506 "SimpleFormatter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Print a brief summary of the {@code LogRecord} in a human readable
format.  The summary will typically be 1 or 2 lines.

<p>
<a name=\"formatting\">
<b>Configuration:</b></a>
The {@code SimpleFormatter} is initialized with the
<a href=\"../Formatter.html#syntax\">format string</a>
specified in the {@code java.util.logging.SimpleFormatter.format}
property to {@linkplain #format format} the log messages.
This property can be defined
in the {@linkplain LogManager#getProperty logging properties}
configuration file
or as a system property.  If this property is set in both
the logging properties and system properties,
the format string specified in the system property will be used.
If this property is not defined or the given format string
is {@linkplain java.util.IllegalFormatException illegal},
the default format is implementation-specific.

@since 1.4
@see java.util.Formatter
"
      classrelation 3685762 // <generalisation>
	relation 3685762 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3685762 // <generalisation>
	  b parent class_ref 1138818 // Formatter
      end

      classrelation 3685890 // format (<unidirectional association>)
	relation 3685890 --->
	  a role_name "format" init_value " LoggingSupport.getSimpleFormat()" class_relation const_relation private
	    comment " format string for printing the log record
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3685890 // format (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3686018 // dat (<unidirectional association>)
	relation 3686018 --->
	  a role_name "dat" init_value " new Date()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3686018 // dat (<unidirectional association>)
	  b parent class_ref 521474 // Date
      end

      operation 9408898 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format the given LogRecord.
<p>
The formatting can be customized by specifying the
<a href=\"../Formatter.html#syntax\">format string</a>
in the <a href=\"#formatting\">
{@code java.util.logging.SimpleFormatter.format}</a> property.
The given {@code LogRecord} will be formatted as if by calling:
<pre>
   {@link String#format String.format}(format, date, source, logger, level, message, thrown);
</pre>
where the arguments are:<br>
<ol>
<li>{@code format} - the {@link java.util.Formatter
    java.util.Formatter} format string specified in the
    {@code java.util.logging.SimpleFormatter.format} property
    or the default format.</li>
<li>{@code date} - a {@link Date} object representing
    {@linkplain LogRecord#getMillis event time} of the log record.</li>
<li>{@code source} - a string representing the caller, if available;
    otherwise, the logger's name.</li>
<li>{@code logger} - the logger's name.</li>
<li>{@code level} - the {@linkplain Level#getLocalizedName
    log level}.</li>
<li>{@code message} - the formatted log message
    returned from the {@link Formatter#formatMessage(LogRecord)}
    method.  It uses {@link java.text.MessageFormat java.text}
    formatting and does not use the {@code java.util.Formatter
    format} argument.</li>
<li>{@code thrown} - a string representing
    the {@linkplain LogRecord#getThrown throwable}
    associated with the log record and its backtrace
    beginning with a newline character, if any;
    otherwise, an empty string.</li>
</ol>

<p>Some example formats:<br>
<ul>
<li> {@code java.util.logging.SimpleFormatter.format=\"%4$s: %5$s [%1$tc]%n\"}
    <p>This prints 1 line with the log level ({@code 4$}),
    the log message ({@code 5$}) and the timestamp ({@code 1$}) in
    a square bracket.
    <pre>
    WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]
    </pre></li>
<li> {@code java.util.logging.SimpleFormatter.format=\"%1$tc %2$s%n%4$s: %5$s%6$s%n\"}
    <p>This prints 2 lines where the first line includes
    the timestamp ({@code 1$}) and the source ({@code 2$});
    the second line includes the log level ({@code 4$}) and
    the log message ({@code 5$}) followed with the throwable
    and its backtrace ({@code 6$}), if any:
    <pre>
    Tue Mar 22 13:11:31 PDT 2011 MyClass fatal
    SEVERE: several message with an exception
    java.lang.IllegalArgumentException: invalid argument
            at MyClass.mash(MyClass.java:9)
            at MyClass.crunch(MyClass.java:6)
            at MyClass.main(MyClass.java:3)
    </pre></li>
<li> {@code java.util.logging.SimpleFormatter.format=\"%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n\"}
     <p>This prints 2 lines similar to the example above
        with a different date/time formatting and does not print
        the throwable and its backtrace:
    <pre>
    Mar 22, 2011 1:11:31 PM MyClass fatal
    SEVERE: several message with an exception
    </pre></li>
</ul>
<p>This method can also be overridden in a subclass.
It is recommended to use the {@link Formatter#formatMessage}
convenience method to localize and format the message field.

@param record the log record to be formatted.
@return a formatted log record
"
      end
    end

    class 1141634 "SocketHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Simple network logging <tt>Handler</tt>.
<p>
<tt>LogRecords</tt> are published to a network stream connection.  By default
the <tt>XMLFormatter</tt> class is used for formatting.
<p>
<b>Configuration:</b>
By default each <tt>SocketHandler</tt> is initialized using the following
<tt>LogManager</tt> configuration properties where <tt>&lt;handler-name&gt;</tt>
refers to the fully-qualified class name of the handler.
If properties are not defined
(or have invalid values) then the specified default values are used.
<ul>
<li>   &lt;handler-name&gt;.level
       specifies the default level for the <tt>Handler</tt>
       (defaults to <tt>Level.ALL</tt>). </li>
<li>   &lt;handler-name&gt;.filter
       specifies the name of a <tt>Filter</tt> class to use
       (defaults to no <tt>Filter</tt>). </li>
<li>   &lt;handler-name&gt;.formatter
       specifies the name of a <tt>Formatter</tt> class to use
       (defaults to <tt>java.util.logging.XMLFormatter</tt>). </li>
<li>   &lt;handler-name&gt;.encoding
       the name of the character set encoding to use (defaults to
       the default platform encoding). </li>
<li>   &lt;handler-name&gt;.host
       specifies the target host name to connect to (no default). </li>
<li>   &lt;handler-name&gt;.port
       specifies the target TCP port to use (no default). </li>
</ul>
<p>
For example, the properties for {@code SocketHandler} would be:
<ul>
<li>   java.util.logging.SocketHandler.level=INFO </li>
<li>   java.util.logging.SocketHandler.formatter=java.util.logging.SimpleFormatter </li>
</ul>
<p>
For a custom handler, e.g. com.foo.MyHandler, the properties would be:
<ul>
<li>   com.foo.MyHandler.level=INFO </li>
<li>   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter </li>
</ul>
<p>
The output IO stream is buffered, but is flushed after each
<tt>LogRecord</tt> is written.

@since 1.4
"
      classrelation 3686146 // <generalisation>
	relation 3686146 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3686146 // <generalisation>
	  b parent class_ref 1138306 // StreamHandler
      end

      classrelation 3686274 // sock (<unidirectional association>)
	relation 3686274 --->
	  a role_name "sock" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3686274 // sock (<unidirectional association>)
	  b parent class_ref 209154 // Socket
      end

      classrelation 3686402 // host (<unidirectional association>)
	relation 3686402 --->
	  a role_name "host" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3686402 // host (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2193154 "port"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9409026 "configure"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private method to configure a SocketHandler from LogManager
 properties and/or default values as specified in the class
 javadoc."
      end

      operation 9409154 "SocketHandler"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <tt>SocketHandler</tt>, using only <tt>LogManager</tt> properties
(or their defaults).
@throws IllegalArgumentException if the host or port are invalid or
         are not specified as LogManager properties.
@throws IOException if we are unable to connect to the target
        host and port.
"
      end

      operation 9409282 "SocketHandler"
	public explicit_return_type ""
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a <tt>SocketHandler</tt> using a specified host and port.

The <tt>SocketHandler</tt> is configured based on <tt>LogManager</tt>
properties (or their default values) except that the given target host
and port arguments are used. If the host argument is empty, but not
null String then the localhost is used.

@param host target host.
@param port target port.

@throws IllegalArgumentException if the host or port are invalid.
@throws IOException if we are unable to connect to the target
        host and port.
"
      end

      operation 9409410 "connect"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9409538 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Close this output stream.

@exception  SecurityException  if a security manager exists and if
            the caller does not have <tt>LoggingPermission(\"control\")</tt>.
"
      end

      operation 9409666 "publish"
	public explicit_return_type "void"
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Format and publish a <tt>LogRecord</tt>.

@param  record  description of the log event. A null record is
                silently ignored and is not published
"
      end
    end

    class 1141762 "XMLFormatter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Format a LogRecord into a standard XML format.
<p>
The DTD specification is provided as Appendix A to the
Java Logging APIs specification.
<p>
The XMLFormatter can be used with arbitrary character encodings,
but it is recommended that it normally be used with UTF-8.  The
character encoding can be set on the output Handler.

@since 1.4
"
      classrelation 3686530 // <generalisation>
	relation 3686530 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3686530 // <generalisation>
	  b parent class_ref 1138818 // Formatter
      end

      classrelation 3686658 // manager (<unidirectional association>)
	relation 3686658 --->
	  a role_name "manager" init_value " LogManager.getLogManager()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3686658 // manager (<unidirectional association>)
	  b parent class_ref 1138562 // LogManager
      end

      operation 9409794 "a2"
	private explicit_return_type "void"
	nparams 2
	  param inout name "sb" type class_ref 173058 // StringBuilder
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Append a two digit number."
      end

      operation 9409922 "appendISO8601"
	private explicit_return_type "void"
	nparams 2
	  param inout name "sb" type class_ref 173058 // StringBuilder
	  param in name "millis" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Append the time and date in ISO 8601 format"
      end

      operation 9410050 "escape"
	private explicit_return_type "void"
	nparams 2
	  param inout name "sb" type class_ref 173058 // StringBuilder
	  param inout name "text" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Append to the given StringBuilder an escaped version of the
 given text string where XML special characters have been escaped.
 For a null string we append \"<null>\""
      end

      operation 9410178 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "record" type class_ref 215554 // LogRecord
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Format the given message to XML.
<p>
This method can be overridden in a subclass.
It is recommended to use the {@link Formatter#formatMessage}
convenience method to localize and format the message field.

@param record the log record to be formatted.
@return a formatted log record
"
      end

      operation 9410306 "getHead"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "h" type class_ref 1138434 // Handler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the header string for a set of XML formatted records.

@param   h  The target handler (can be null)
@return  a valid XML string
"
      end

      operation 9410434 "getTail"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "h" type class_ref 1138434 // Handler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the tail string for a set of XML formatted records.

@param   h  The target handler (can be null)
@return  a valid XML string
"
      end
    end
  end

  deploymentview 171266 "logging"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 820866 "Handler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.UnsupportedEncodingException;
${definition}"
      associated_elems
	class_ref 1138434 // Handler
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 820994 "StreamHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_elems
	class_ref 1138306 // StreamHandler
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 821122 "ConsoleHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1138178 // ConsoleHandler
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 821250 "ErrorManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1138946 // ErrorManager
      end
      comment "Copyright (c) 2001, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 821378 "FileHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.channels.FileChannel;
import java.nio.channels.OverlappingFileLockException;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.HashSet;
import java.util.Set;
import static java.nio.file.StandardOpenOption.APPEND;
import static java.nio.file.StandardOpenOption.CREATE_NEW;
import static java.nio.file.StandardOpenOption.WRITE;
${definition}"
      associated_elems
	class_ref 1139074 // FileHandler
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 821506 "Filter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1138690 // Filter
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 821634 "Formatter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1138818 // Formatter
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 821762 "Level"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
${definition}"
      associated_elems
	class_ref 215426 // Level
      end
      comment "Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 821890 "Logger"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.WeakReference;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.function.Supplier;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
${definition}"
      associated_elems
	class_ref 215298 // Logger
      end
      comment "Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 822018 "LoggingMXBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1140098 // LoggingMXBean
      end
      comment "Copyright (c) 2003, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 822146 "Logging"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.util.List;
import java.util.ArrayList;
${definition}"
      associated_elems
	class_ref 1139970 // Logging
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 822274 "LoggingPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
${definition}"
      associated_elems
	class_ref 1140226 // LoggingPermission
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 822402 "LoggingProxyImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.util.logging.LoggingProxy;
${definition}"
      associated_elems
	class_ref 1140354 // LoggingProxyImpl
      end
      comment "Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 822530 "LogManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.*;
import java.security.*;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.beans.PropertyChangeListener;
import sun.misc.JavaAWTAccess;
import sun.misc.SharedSecrets;
${definition}"
      associated_elems
	class_ref 1138562 // LogManager
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 822658 "LogRecord"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.io.*;
import sun.misc.JavaLangAccess;
import sun.misc.SharedSecrets;
${definition}"
      associated_elems
	class_ref 215554 // LogRecord
      end
      comment "Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 822786 "MemoryHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1141378 // MemoryHandler
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 822914 "SimpleFormatter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.text.*;
import java.util.Date;
import sun.util.logging.LoggingSupport;
${definition}"
      associated_elems
	class_ref 1141506 // SimpleFormatter
      end
      comment "Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 823042 "SocketHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.net.*;
${definition}"
      associated_elems
	class_ref 1141634 // SocketHandler
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 823170 "XMLFormatter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.nio.charset.Charset;
import java.util.*;
${definition}"
      associated_elems
	class_ref 1141762 // XMLFormatter
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
