class ZoneRegion
!!!8443394.java!!!	ofId(inout zoneId : String, inout checkAvailable : boolean) : ZoneRegion
        Objects.requireNonNull(zoneId, "zoneId");
        checkName(zoneId);
        ZoneRules rules = null;
        try {
            // always attempt load for better behavior after deserialization
            rules = ZoneRulesProvider.getRules(zoneId, true);
        } catch (ZoneRulesException ex) {
            if (checkAvailable) {
                throw ex;
            }
        }
        return new ZoneRegion(zoneId, rules);
!!!8443522.java!!!	checkName(inout zoneId : String) : void
        int n = zoneId.length();
        if (n < 2) {
           throw new DateTimeException("Invalid ID for region-based ZoneId, invalid format: " + zoneId);
        }
        for (int i = 0; i < n; i++) {
            char c = zoneId.charAt(i);
            if (c >= 'a' && c <= 'z') continue;
            if (c >= 'A' && c <= 'Z') continue;
            if (c == '/' && i != 0) continue;
            if (c >= '0' && c <= '9' && i != 0) continue;
            if (c == '~' && i != 0) continue;
            if (c == '.' && i != 0) continue;
            if (c == '_' && i != 0) continue;
            if (c == '+' && i != 0) continue;
            if (c == '-' && i != 0) continue;
            throw new DateTimeException("Invalid ID for region-based ZoneId, invalid format: " + zoneId);
        }
!!!8443650.java!!!	ZoneRegion(inout id : String, inout rules : ZoneRules)
        this.id = id;
        this.rules = rules;
!!!8443778.java!!!	getId() : String
        return id;
!!!8443906.java!!!	getRules() : ZoneRules
        // additional query for group provider when null allows for possibility
        // that the provider was updated after the ZoneId was created
        return (rules != null ? rules : ZoneRulesProvider.getRules(id, false));
!!!8444034.java!!!	writeReplace() : Object
        return new Ser(Ser.ZONE_REGION_TYPE, this);
!!!8444162.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8444290.java!!!	write(inout out : DataOutput) : void
        out.writeByte(Ser.ZONE_REGION_TYPE);
        writeExternal(out);
!!!8444418.java!!!	writeExternal(inout out : DataOutput) : void
        out.writeUTF(id);
!!!8444546.java!!!	readExternal(inout in : DataInput) : ZoneId
        String id = in.readUTF();
        return ZoneId.of(id, false);
