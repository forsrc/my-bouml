class PushbackReader
!!!6923138.java!!!	PushbackReader(inout in : Reader, in size : int)
        super(in);
        if (size <= 0) {
            throw new IllegalArgumentException("size <= 0");
        }
        this.buf = new char[size];
        this.pos = size;
!!!6923266.java!!!	PushbackReader(inout in : Reader)
        this(in, 1);
!!!6923394.java!!!	ensureOpen() : void
        if (buf == null)
            throw new IOException("Stream closed");
!!!6923522.java!!!	read() : int
        synchronized (lock) {
            ensureOpen();
            if (pos < buf.length)
                return buf[pos++];
            else
                return super.read();
        }
!!!6923650.java!!!	read(inout cbuf : char [[]], in off : int, in len : int) : int
        synchronized (lock) {
            ensureOpen();
            try {
                if (len <= 0) {
                    if (len < 0) {
                        throw new IndexOutOfBoundsException();
                    } else if ((off < 0) || (off > cbuf.length)) {
                        throw new IndexOutOfBoundsException();
                    }
                    return 0;
                }
                int avail = buf.length - pos;
                if (avail > 0) {
                    if (len < avail)
                        avail = len;
                    System.arraycopy(buf, pos, cbuf, off, avail);
                    pos += avail;
                    off += avail;
                    len -= avail;
                }
                if (len > 0) {
                    len = super.read(cbuf, off, len);
                    if (len == -1) {
                        return (avail == 0) ? -1 : avail;
                    }
                    return avail + len;
                }
                return avail;
            } catch (ArrayIndexOutOfBoundsException e) {
                throw new IndexOutOfBoundsException();
            }
        }
!!!6923778.java!!!	unread(in c : int) : void
        synchronized (lock) {
            ensureOpen();
            if (pos == 0)
                throw new IOException("Pushback buffer overflow");
            buf[--pos] = (char) c;
        }
!!!6923906.java!!!	unread(inout cbuf : char [[]], in off : int, in len : int) : void
        synchronized (lock) {
            ensureOpen();
            if (len > pos)
                throw new IOException("Pushback buffer overflow");
            pos -= len;
            System.arraycopy(cbuf, off, buf, pos, len);
        }
!!!6924034.java!!!	unread(inout cbuf : char [[]]) : void
        unread(cbuf, 0, cbuf.length);
!!!6924162.java!!!	ready() : boolean
        synchronized (lock) {
            ensureOpen();
            return (pos < buf.length) || super.ready();
        }
!!!6924290.java!!!	mark(in readAheadLimit : int) : void
        throw new IOException("mark/reset not supported");
!!!6924418.java!!!	reset() : void
        throw new IOException("mark/reset not supported");
!!!6924546.java!!!	markSupported() : boolean
        return false;
!!!6924674.java!!!	close() : void
        super.close();
        buf = null;
!!!6924802.java!!!	skip(in n : long) : long
        if (n < 0L)
            throw new IllegalArgumentException("skip value is negative");
        synchronized (lock) {
            ensureOpen();
            int avail = buf.length - pos;
            if (avail > 0) {
                if (n <= avail) {
                    pos += n;
                    return n;
                } else {
                    pos = buf.length;
                    n -= avail;
                }
            }
            return avail + super.skip(n);
        }
