class JWindow
!!!2830466.java!!!	JWindow()
        this((Frame)null);
!!!2830594.java!!!	JWindow(inout gc : GraphicsConfiguration)
        this(null, gc);
        super.setFocusableWindowState(false);
!!!2830722.java!!!	JWindow(inout owner : Frame)
        super(owner == null? SwingUtilities.getSharedOwnerFrame() : owner);
        if (owner == null) {
            WindowListener ownerShutdownListener =
                    SwingUtilities.getSharedOwnerFrameShutdownListener();
            addWindowListener(ownerShutdownListener);
        }
        windowInit();
!!!2830850.java!!!	JWindow(inout owner : Window)
        super(owner == null ? (Window)SwingUtilities.getSharedOwnerFrame() :
              owner);
        if (owner == null) {
            WindowListener ownerShutdownListener =
                    SwingUtilities.getSharedOwnerFrameShutdownListener();
            addWindowListener(ownerShutdownListener);
        }
        windowInit();
!!!2830978.java!!!	JWindow(inout owner : Window, inout gc : GraphicsConfiguration)
        super(owner == null ? (Window)SwingUtilities.getSharedOwnerFrame() :
              owner, gc);
        if (owner == null) {
            WindowListener ownerShutdownListener =
                    SwingUtilities.getSharedOwnerFrameShutdownListener();
            addWindowListener(ownerShutdownListener);
        }
        windowInit();
!!!2831106.java!!!	windowInit() : void
        setLocale( JComponent.getDefaultLocale() );
        setRootPane(createRootPane());
        setRootPaneCheckingEnabled(true);
        sun.awt.SunToolkit.checkAndSetPolicy(this);
!!!2831234.java!!!	createRootPane() : JRootPane
        JRootPane rp = new JRootPane();
        // NOTE: this uses setOpaque vs LookAndFeel.installProperty as there
        // is NO reason for the RootPane not to be opaque. For painting to
        // work the contentPane must be opaque, therefor the RootPane can
        // also be opaque.
        rp.setOpaque(true);
        return rp;
!!!2831362.java!!!	isRootPaneCheckingEnabled() : boolean
        return rootPaneCheckingEnabled;
!!!2831490.java!!!	setTransferHandler(inout newHandler : TransferHandler) : void
        TransferHandler oldHandler = transferHandler;
        transferHandler = newHandler;
        SwingUtilities.installSwingDropTargetAsNecessary(this, transferHandler);
        firePropertyChange("transferHandler", oldHandler, newHandler);
!!!2831618.java!!!	getTransferHandler() : TransferHandler
        return transferHandler;
!!!2831746.java!!!	update(inout g : Graphics) : void
        paint(g);
!!!2831874.java!!!	setRootPaneCheckingEnabled(inout enabled : boolean) : void
        rootPaneCheckingEnabled = enabled;
!!!2832002.java!!!	addImpl(inout comp : Component, inout constraints : Object, in index : int) : void
        if(isRootPaneCheckingEnabled()) {
            getContentPane().add(comp, constraints, index);
        }
        else {
            super.addImpl(comp, constraints, index);
        }
!!!2832130.java!!!	remove(inout comp : Component) : void
        if (comp == rootPane) {
            super.remove(comp);
        } else {
            getContentPane().remove(comp);
        }
!!!2832258.java!!!	setLayout(inout manager : LayoutManager) : void
        if(isRootPaneCheckingEnabled()) {
            getContentPane().setLayout(manager);
        }
        else {
            super.setLayout(manager);
        }
!!!2832386.java!!!	getRootPane() : JRootPane
        return rootPane;
!!!2832514.java!!!	setRootPane(inout root : JRootPane) : void
        if(rootPane != null) {
            remove(rootPane);
        }
        rootPane = root;
        if(rootPane != null) {
            boolean checkingEnabled = isRootPaneCheckingEnabled();
            try {
                setRootPaneCheckingEnabled(false);
                add(rootPane, BorderLayout.CENTER);
            }
            finally {
                setRootPaneCheckingEnabled(checkingEnabled);
            }
        }
!!!2832642.java!!!	getContentPane() : Container
        return getRootPane().getContentPane();
!!!2832770.java!!!	setContentPane(inout contentPane : Container) : void
        getRootPane().setContentPane(contentPane);
!!!2832898.java!!!	getLayeredPane() : JLayeredPane
        return getRootPane().getLayeredPane();
!!!2833026.java!!!	setLayeredPane(inout layeredPane : JLayeredPane) : void
        getRootPane().setLayeredPane(layeredPane);
!!!2833154.java!!!	getGlassPane() : Component
        return getRootPane().getGlassPane();
!!!2833282.java!!!	setGlassPane(inout glassPane : Component) : void
        getRootPane().setGlassPane(glassPane);
!!!2833410.java!!!	getGraphics() : Graphics
        JComponent.getGraphicsInvoked(this);
        return super.getGraphics();
!!!2833538.java!!!	repaint(in time : long, in x : int, in y : int, in width : int, in height : int) : void
        if (RepaintManager.HANDLE_TOP_LEVEL_PAINT) {
            RepaintManager.currentManager(this).addDirtyRegion(
                              this, x, y, width, height);
        }
        else {
            super.repaint(time, x, y, width, height);
        }
!!!2833666.java!!!	paramString() : String
        String rootPaneCheckingEnabledString = (rootPaneCheckingEnabled ?
                                                "true" : "false");

        return super.paramString() +
        ",rootPaneCheckingEnabled=" + rootPaneCheckingEnabledString;
!!!2833794.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJWindow();
        }
        return accessibleContext;
