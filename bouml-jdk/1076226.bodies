class CheckedCollection
!!!8720002.java!!!	typeCheck(inout o : Object) : E
            if (o != null && !type.isInstance(o))
                throw new ClassCastException(badElementMsg(o));
            return (E) o;
!!!8720130.java!!!	badElementMsg(inout o : Object) : String
            return "Attempt to insert " + o.getClass() +
                " element into collection with element type " + type;
!!!8720258.java!!!	CheckedCollection(inout c : Collection, inout type : Class)
            this.c = Objects.requireNonNull(c, "c");
            this.type = Objects.requireNonNull(type, "type");
!!!8720386.java!!!	size() : int
 return c.size();
!!!8720514.java!!!	isEmpty() : boolean
 return c.isEmpty();
!!!8720642.java!!!	contains(inout o : Object) : boolean
 return c.contains(o);
!!!8720770.java!!!	toArray() : Object
 return c.toArray();
!!!8720898.java!!!	toArray(inout a : T [[]]) : T
 return c.toArray(a);
!!!8721026.java!!!	toString() : String
 return c.toString();
!!!8721154.java!!!	remove(inout o : Object) : boolean
 return c.remove(o);
!!!8721282.java!!!	clear() : void
        c.clear();
!!!8721410.java!!!	containsAll(inout coll : Collection) : boolean
            return c.containsAll(coll);
!!!8721538.java!!!	removeAll(inout coll : Collection) : boolean
            return c.removeAll(coll);
!!!8721666.java!!!	retainAll(inout coll : Collection) : boolean
            return c.retainAll(coll);
!!!8721794.java!!!	iterator() : Iterator
            // JDK-6363904 - unwrapped iterator could be typecast to
            // ListIterator with unsafe set()
            final Iterator<E> it = c.iterator();
            return new Iterator<E>() {
                public boolean hasNext() { return it.hasNext(); }
                public E next()          { return it.next(); }
                public void remove()     {        it.remove(); }};
!!!8721922.java!!!	add(inout e : E) : boolean
 return c.add(typeCheck(e));
!!!8722050.java!!!	zeroLengthElementArray() : E
            return zeroLengthElementArray != null ? zeroLengthElementArray :
                (zeroLengthElementArray = zeroLengthArray(type));
!!!8722178.java!!!	checkedCopyOf(inout coll : Collection) : Collection
            Object[] a;
            try {
                E[] z = zeroLengthElementArray();
                a = coll.toArray(z);
                // Defend against coll violating the toArray contract
                if (a.getClass() != z.getClass())
                    a = Arrays.copyOf(a, a.length, z.getClass());
            } catch (ArrayStoreException ignore) {
                // To get better and consistent diagnostics,
                // we call typeCheck explicitly on each element.
                // We call clone() to defend against coll retaining a
                // reference to the returned array and storing a bad
                // element into it after it has been type checked.
                a = coll.toArray().clone();
                for (Object o : a)
                    typeCheck(o);
            }
            // A slight abuse of the type system, but safe here.
            return (Collection<E>) Arrays.asList(a);
!!!8722306.java!!!	addAll(inout coll : Collection) : boolean
            // Doing things this way insulates us from concurrent changes
            // in the contents of coll and provides all-or-nothing
            // semantics (which we wouldn't get if we type-checked each
            // element as we added it)
            return c.addAll(checkedCopyOf(coll));
!!!8722434.java!!!	forEach(inout action : Consumer) : void
c.forEach(action);
!!!8722562.java!!!	removeIf(inout filter : Predicate) : boolean
            return c.removeIf(filter);
!!!8722690.java!!!	spliterator() : Spliterator
return c.spliterator();
!!!8722818.java!!!	stream() : Stream
return c.stream();
!!!8722946.java!!!	parallelStream() : Stream
return c.parallelStream();
